using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Linq;
using UnityEditorInternal;
using System.Reflection;
using System;
using System.IO;
using BLINK.RPGBuilder.Logic;
using BLINK.RPGBuilder.Managers;
using UnityEditor.SceneManagement;
using UnityEngine.AI;
using UnityEngine.SceneManagement;

public class RPGBuilderWindow : EditorWindow
{
    private RPGBuilderEditorDATA editorDATA;
    private RPGBuilderEditorFilters editorFilters;
    private RPGBuilderEditorDATA.ThemeTypes cachedTheme;
    private GUISkin skin;

    private float viewWidth, elementListWidth, buttonHeight, contentWidth, smallFieldHeight, smallButtonHeight, bigHorizontalSpace, middleButtonSpace, middleButtonMaxWidth;
    private Rect viewRect;

    public List<RPGBuilderEditorFilters.EntryFieldList> entryFieldLists = new List<RPGBuilderEditorFilters.EntryFieldList>();
    public static AssetType currentAssetType;
    private static Type currentType = null;
    private bool isSelectingField;
    private int currentFilterEntryDataIndex;

    private List<RPGBuilderEditorFilters.FilterEntryData> currentFilterList;

    private List<RPGAbility> allAbilities = new List<RPGAbility>();
    private RPGAbility currentlyViewedAbility;
    private List<RPGEffect> allEffects = new List<RPGEffect>();
    private RPGEffect currentlyViewedEffect;
    private List<RPGNpc> allNPCs = new List<RPGNpc>();
    private RPGNpc currentlyViewedNPC;
    private List<RPGStat> allStats = new List<RPGStat>();
    private RPGStat currentlyViewedStat;
    private List<RPGTreePoint> allTreePoints = new List<RPGTreePoint>();
    private RPGTreePoint currentlyViewedTreePoint;
    private List<RPGSpellbook> allSpellbooks = new List<RPGSpellbook>();
    private RPGSpellbook currentlyViewedSpellbook;
    private List<RPGFaction> allFactions = new List<RPGFaction>();
    private RPGFaction currentlyViewedFaction;
    private List<RPGWeaponTemplate> allWeaponTemplates = new List<RPGWeaponTemplate>();
    private RPGWeaponTemplate currentlyViewedWeaponTemplate;
    private List<RPGSpecies> allSpecies = new List<RPGSpecies>();
    private RPGSpecies currentlyViewedSpecies;
    private List<RPGCombo> allCombos = new List<RPGCombo>();
    private RPGCombo currentlyViewedCombo;


    private List<RPGItem> allItems = new List<RPGItem>();
    private RPGItem currentlyViewedItem;
    private List<RPGSkill> allSkills = new List<RPGSkill>();
    private RPGSkill currentlyViewedSkill;
    private List<RPGLevelsTemplate> allLevelsTemplate = new List<RPGLevelsTemplate>();
    private RPGLevelsTemplate currentlyViewedLevelTemplate;
    private List<RPGRace> allRaces = new List<RPGRace>();
    private RPGRace currentlyViewedRace;
    private List<RPGClass> allClasses = new List<RPGClass>();
    private RPGClass currentlyViewedClass;
    private List<RPGLootTable> allLootTables = new List<RPGLootTable>();
    private RPGLootTable currentlyViewedLootTable;
    private List<RPGMerchantTable> allMerchantTables = new List<RPGMerchantTable>();
    private RPGMerchantTable currentlyViewedMerchantTable;
    private List<RPGCurrency> allCurrencies = new List<RPGCurrency>();
    private RPGCurrency currentlyViewedCurrency;
    private List<RPGCraftingRecipe> allCraftingRecipes = new List<RPGCraftingRecipe>();
    private RPGCraftingRecipe currentlyViewedCraftingRecipe;
    private List<RPGCraftingStation> allCraftingStations = new List<RPGCraftingStation>();
    private RPGCraftingStation currentlyViewedCraftingStation;
    private List<RPGTalentTree> allTalentTrees = new List<RPGTalentTree>();
    private RPGTalentTree currentlyViewedTalentTree;
    private List<RPGBonus> allBonuses = new List<RPGBonus>();
    private RPGBonus currentlyViewedBonus;
    private List<RPGGearSet> allGearSets = new List<RPGGearSet>();
    private RPGGearSet currentlyViewedGearSet;
    private List<RPGEnchantment> allEnchantments = new List<RPGEnchantment>();
    private RPGEnchantment currentlyViewedEnchantment;

    private List<RPGTask> allTasks = new List<RPGTask>();
    private RPGTask currentlyViewedTask;
    private List<RPGQuest> allQuests = new List<RPGQuest>();
    private RPGQuest currentlyViewedQuest;
    private List<RPGWorldPosition> allWorldPositions = new List<RPGWorldPosition>();
    private RPGWorldPosition currentlyViewedWorldPosition;
    private List<RPGResourceNode> allResourceNodes = new List<RPGResourceNode>();
    private RPGResourceNode currentlyViewedResourceNode;
    private RPGGameScene currentlyViewedGameScene;
    private List<RPGGameScene> allGameScenes = new List<RPGGameScene>();
    private RPGDialogue currentlyViewedDialogue;
    private List<RPGDialogue> allDialogues = new List<RPGDialogue>();
    private RPGGameModifier currentlyViewedGameModifier;
    private List<RPGGameModifier> allGameModifiers = new List<RPGGameModifier>();

    private RPGCombatDATA combatSettings;
    private RPGItemDATA itemSettings;
    private RPGGeneralDATA generalSettings;

    private class elementListDATA
    {
        public string name;
        public Texture texture;
        public bool showIcon;
        public int ID;
        public bool matchFilters;
    }

    private List<elementListDATA> curElementList;

    public enum AssetType
    {
        Ability,
        Effect,
        Item,
        NPC,
        Stat,
        CombatSettings,
        ItemSettings,
        Skill,
        LevelTemplate,
        Race,
        Class,
        GeneralSettings,
        TalentTree,
        TreePoint,
        LootTable,
        WorldPosition,
        MerchantTable,
        Currency,
        Task,
        Quest,
        CraftingRecipe,
        CraftingStation,
        ResourceNode,
        Bonus,
        GameScene,
        GearSet,
        Enchantment,
        Spellbook,
        Faction,
        WeaponTemplate,
        Dialogue,
        None,
        GameModifier,
        EditorSettings,
        Species,
        Combo
    }

    public enum CategorySelectedType
    {
        Combat,
        General,
        World,
        Settings,
        Partners
    }

    public CategorySelectedType currentCategorySelected;
    public int curSubCategorySelected = 0;


    public enum CombatSubCategorySelectedType
    {
        Ability,
        Effect,
        NPCs,
        Stat,
        TreePoint,
        Spellbook,
        Faction,
        WeaponTemplate,
        Species,
        Combo
    }

    public CombatSubCategorySelectedType combatSubCurrentCategorySelected;

    public enum GeneralSubCategorySelectedType
    {
        Item,
        Skill,
        LevelTemplate,
        Race,
        Class,
        LootTable,
        MerchantTable,
        Currency,
        CraftingRecipe,
        CraftingStation,
        TalentTree,
        Bonus,
        GearSet,
        Enchantment
    }

    public GeneralSubCategorySelectedType generalSubCurrentCategorySelected;

    public enum WorldSubCategorySelectedType
    {
        Task,
        Quest,
        WorldPosition,
        ResourceNode,
        GameScene,
        Dialogue,
        GameModifier
    }

    public WorldSubCategorySelectedType worldSubCurrentCategorySelected;

    public enum SettingsSubCategorySelectedType
    {
        General,
        Combat,
        Item,
        Editor
    }

    public SettingsSubCategorySelectedType settingsSubCurrentCategorySelected;

    public enum PartnersSubCategorySelectedType
    {
        PolytopeStudio,
        Cafofo,
        GabrielAguiar,
        RDR,
        TitanForge,
        PONETI,
        MalbersAnimation,
        BOXOPHOBIC,
        PolyartStudio,
        Staggart,
        InifnityPBR
    }

    public PartnersSubCategorySelectedType partnersSubCurrentCategorySelected;

    public int curViewElementIndex;

    private string moduleSearchText = "";
    private string curCraftingTreeSearchText = "";
    public Vector2 elementListScrollPosition, cachedElementListScrollPosition = Vector2.zero;
    public Vector2 viewScrollPosition;
    public Vector2 filtersScrollPosition;
    public Vector2 blinkScrollPosition;

    private string cachedFileName = "";
    private string cachedElementName = "";

    private bool showFilters;

    public static RPGBuilderWindow Instance;
    private AssetType currentlyViewedAssetType;

    [MenuItem("BLINK/RPG Builder")]
    private static void OpenWindow()
    {
        var window = (RPGBuilderWindow) GetWindow(typeof(RPGBuilderWindow), false, "RPG Builder");
        GUI.contentColor = Color.white;
        window.Show();

        Instance = window;
    }

    private void OnDestroy()
    {
        Instance = null;
    }

    private void OnDisable()
    {
        Instance = null;
    }
    
    private void InitALLData(bool selectEntry)
    {
        LoadAbilities();
        LoadMerchantTables();
        LoadEffects();
        LoadNPCs();
        LoadItems();
        LoadStats();
        LoadSettings();
        LoadSkills();
        LoadLevelsTemplate();
        LoadRaces();
        LoadClasses();
        LoadTalentTrees();
        LoadTreePoints();
        LoadLootTables();
        LoadWorldPositions();
        LoadCurrencies();
        LoadTasks();
        LoadQuests();
        LoadCraftingRecipes();
        LoadCraftingStations();
        LoadResourceNodes();
        LoadBonuses();
        LoadGameScenes();
        LoadGearSet();
        LoadEnchantments();
        LoadSpellbooks();
        LoadFactions();
        LoadWeaponTemplates();
        LoadDialogues();
        LoadGameModifiers();
        LoadSpecies();
        LoadCombos();
        
        if(selectEntry) SelectAbility(0);
    }

    private bool alreadyOpened = false; 
    private void OnEnable()
    {
        if (!alreadyOpened)
        {
            Instance = this;
            editorDATA = Resources.Load<RPGBuilderEditorDATA>("EditorData/RPGBuilderEditorData");
            skin = Resources.Load<GUISkin>(editorDATA.RPGBEditorDataPath + "RPGBuilderSkin");
            editorFilters = Resources.Load<RPGBuilderEditorFilters>(editorDATA.RPGBEditorDataPath + "RPGBuilderEditorFilters");
            cachedTheme = editorDATA.curEditorTheme;
            InitALLData(true);
            SelectCategory("Combat");
            minSize = new Vector2(editorDATA.MinEditorWidth, editorDATA.MinEditorHeight);
        }
        Instance = this;
        alreadyOpened = true;
        updateElementList = true;
        
        SceneManager.activeSceneChanged += EditorSceneManager_activeSceneChanged;
        EditorSceneManager.sceneOpened += EditorSceneManager_sceneOpened;
        EditorApplication.playModeStateChanged += HandleOnPlayModeChanged;

        //SetEntryListScrollPos();
        //cachedElementListScrollPosition = elementListScrollPosition;
    }

    private void SetEntryListScrollPos()
    {
        float elementHeight = editorDATA.CategoriesY * getHeightModifier();
        float YPos = elementHeight * (curViewElementIndex);
        elementListScrollPosition = new Vector2(0, YPos);
    }

    private void InitializeFilters(List<RPGBuilderEditorFilters.FilterEntryData> filterList)
    {
        foreach (var filter in filterList)
        {
            if (string.IsNullOrEmpty(filter.fieldTypeString) || filter.fieldType != null) continue;
            filter.fieldType = GetType(filter.fieldTypeString);

            if (!filter.fieldType.IsEnum) continue;
            if (filter.enumReference != null) continue;
            if (filter.enumIndex > 0 && filter.fieldType.GetEnumValues().Length >= (filter.enumIndex + 1))
            {
                filter.enumReference = (Enum) filter.fieldType.GetEnumValues().GetValue(filter.enumIndex);
            }
            else
            {
                filter.enumReference = (Enum) filter.fieldType.GetEnumValues().GetValue(0);
            }
        }
    }

    private void ResetScrollPositions()
    {
        elementListScrollPosition = Vector2.zero;
        cachedElementListScrollPosition = Vector2.zero;
        filtersScrollPosition = Vector2.zero; 
    }
    
    private void EditorSceneManager_activeSceneChanged(Scene arg0, Scene arg1)
    {
        ResetScrollPositions();
        SelectCategory("Combat");
    }
    private void EditorSceneManager_sceneOpened(Scene arg0, OpenSceneMode mode)
    {
        ResetScrollPositions();
        SelectCategory("Combat");
    }

    void HandleOnPlayModeChanged(PlayModeStateChange state)
    {
        if (state != PlayModeStateChange.EnteredPlayMode && state != PlayModeStateChange.ExitingPlayMode) return;
        ResetScrollPositions();
        SelectCategory("Combat");
    }

    void Update()
    {
        
        if (updateShowBlinkPage)
        {
            showBlinkPage = targetShowBlinkPage;
            updateShowBlinkPage = false;
        }
        
        if (updateFiltersNeedChecking)
        {
            filtersNeedChecking = targetFiltersNeedChecking;
            updateFiltersNeedChecking = false;
        }
        
        if (updateElementList)
        {
            redrawElementList = true;
            updateElementList = false;
        }
        
        
        if (updateShowCategories)
        {
            if (showSubCategories)
            {
                targetShowSubCategories = false;
                showSubCategories = false;
                updateShowSubCategories = false;
            }
            
            showCategories = targetShowCategories;
            updateShowCategories = false;
        } else if (updateShowSubCategories)
        {
            if (showCategories)
            {
                targetShowCategories = false;
                showCategories = false;
                updateShowCategories = false;
            }
            
            showSubCategories = targetShowSubCategories;
            updateShowSubCategories = false;
        }
        
        if (editorDATA.increasedEditorUpdates)
        {
            Repaint();
        }
    }

    private void OnGUI()
    {
        GUI.DrawTexture(new Rect(0, 0, GetScreenWidth(), GetScreenHeight()), getThemeTexture());
        DrawTopBar();
        DrawCurrentElementList();
        DrawView();
        DrawFilters();
        DrawCategories();
        DrawSubCategories(); 
        DrawBlinkPage();
    }

    private float GetScreenWidth()
    {
        float width = Screen.width;
        float extraWidthFromScaling = (editorDATA.MinEditorWidth * getWidthModifier()) * (EditorGUIUtility.pixelsPerPoint - 1);
        width -= extraWidthFromScaling;
        return width;
    }
    private float GetScreenHeight()
    {
        float height = Screen.height;
        float extraHeightFromScaling = (editorDATA.MinEditorHeight * getHeightModifier()) * (EditorGUIUtility.pixelsPerPoint - 1);
        if (EditorGUIUtility.pixelsPerPoint > 1) extraHeightFromScaling += 15;
        height -= extraHeightFromScaling;
        return height;
    }

    private bool updateElementList, updateFiltersNeedChecking;
    private bool redrawElementList = true, filtersNeedChecking;
    private bool targetFiltersNeedChecking;

    private void DrawCurrentElementList()
    {
        if (showBlinkPage) return; 

        if (redrawElementList) 
        {
            GenerateCurElementList();
            redrawElementList = false;
            targetFiltersNeedChecking = !filtersNeedChecking;
            updateFiltersNeedChecking = true;
        }

        DrawElementList(curElementList, currentlyViewedAssetType);
    }

    private void GenerateCurElementList()
    {
        curElementList = new List<elementListDATA>();
        switch (currentlyViewedAssetType)
        {
            case AssetType.Ability:
                foreach (var t in allAbilities) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Effect:
                foreach (var t in allEffects) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Item:
                foreach (var t in allItems) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.NPC:
                foreach (var t in allNPCs) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Stat:
                foreach (var t in allStats) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.Skill:
                foreach (var t in allSkills) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.LevelTemplate:
                foreach (var t in allLevelsTemplate) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.Race:
                foreach (var t in allRaces) AddElementToElementList(t.ID, t._name, true, t.maleIcon != null ? t.maleIcon : t.femaleIcon);
                break;
            case AssetType.Class:
                foreach (var t in allClasses) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.TalentTree:
                foreach (var t in allTalentTrees) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.TreePoint:
                foreach (var t in allTreePoints) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.LootTable:
                foreach (var t in allLootTables) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.WorldPosition:
                foreach (var t in allWorldPositions) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.MerchantTable:
                foreach (var t in allMerchantTables) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.Currency:
                foreach (var t in allCurrencies) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Task:
                foreach (var t in allTasks) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.Quest:
                foreach (var t in allQuests) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.CraftingRecipe:
                foreach (var t in allCraftingRecipes) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.CraftingStation:
                foreach (var t in allCraftingStations) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.ResourceNode:
                foreach (var t in allResourceNodes) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Bonus:
                foreach (var t in allBonuses) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.GameScene:
                foreach (var t in allGameScenes) AddElementToElementList(t.ID, t._name, true, t.minimapImage);
                break;
            case AssetType.GearSet:
                foreach (var t in allGearSets) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.Enchantment:
                foreach (var t in allEnchantments) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.Spellbook:
                foreach (var t in allSpellbooks) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Faction:
                foreach (var t in allFactions) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.WeaponTemplate:
                foreach (var t in allWeaponTemplates) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Dialogue:
                foreach (var t in allDialogues) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.GameModifier:
                foreach (var t in allGameModifiers) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Species:
                foreach (var t in allSpecies) AddElementToElementList(t.ID, t._name, true, t.icon);
                break;
            case AssetType.Combo:
                foreach (var t in allCombos) AddElementToElementList(t.ID, t._name, false, null);
                break;
            case AssetType.None:
            case AssetType.CombatSettings:
            case AssetType.GeneralSettings:
            case AssetType.ItemSettings:
            case AssetType.EditorSettings:
                break;
        }
    }

    private void AddElementToElementList(int ID, string _name, bool showIcon, Sprite icon)
    {
        var newElementDATA = new elementListDATA();
        newElementDATA.ID = ID;
        newElementDATA.name = _name;
        newElementDATA.showIcon = showIcon;
        if (icon != null) newElementDATA.texture = icon.texture;
        curElementList.Add(newElementDATA);
    }

    Texture2D getThemeTexture()
    {
        return editorDATA.curEditorTheme == RPGBuilderEditorDATA.ThemeTypes.Dark
            ? editorDATA.DarkThemeBackground
            : editorDATA.LightThemeBackground;
    }

    private bool updateShowCategories, updateShowSubCategories;
    private bool targetShowCategories, targetShowSubCategories;
    private bool showCategories, showSubCategories;
    private bool updateShowBlinkPage, targetShowBlinkPage, showBlinkPage;
    private void DrawTopBar()
    {
        if(showBlinkPage) return;
        float panelWidth = GetScreenWidth();
        Rect panelRect = new Rect(0, 0, panelWidth, GetScreenHeight() * editorDATA.TopBarHeightPercent);

        GUILayout.BeginArea(panelRect);

        float logoSize = GetScreenHeight() * (editorDATA.TopBarHeightPercent * 0.8f);
        float logoMargin = GetScreenHeight() - ((GetScreenHeight() * editorDATA.TopBarHeightPercent) * 0.25f);
        logoMargin = GetScreenHeight() - logoMargin;
        logoMargin /= 2;

        EditorGUILayout.BeginHorizontal();
        Rect rpgbLogoRect = new Rect(logoMargin, logoMargin, logoSize * 1.1f, logoSize);
        Texture2D rpgbLogo = editorDATA.RPGBuilderLogo.texture;
        if (isCursorHoverRect2(rpgbLogoRect))
        {
            rpgbLogo = editorDATA.RPGBuilderLogoHover.texture;
            Event e = Event.current;
            if (e.type == EventType.MouseDown)
            {
                targetShowCategories = !showCategories;
                updateShowCategories = true;
            }
        }
        GUI.DrawTexture(rpgbLogoRect, rpgbLogo);

        GUILayout.Space(logoSize + 30);
        
        var buttonStyle = skin.GetStyle("TopBarSelected");

        switch (editorDATA.curEditorTheme)
        {
            case RPGBuilderEditorDATA.ThemeTypes.Dark:
                buttonStyle.normal.background = editorDATA.DarkThemeBackground;
                buttonStyle.hover.background = editorDATA.DarkThemeBackground;
                break;
            case RPGBuilderEditorDATA.ThemeTypes.Light:
                buttonStyle.normal.background = editorDATA.LightThemeBackground;
                buttonStyle.hover.background = editorDATA.LightThemeBackground;
                break;
        }
        var separationStyle = skin.GetStyle("TopBarSeparation");

        float elementHeight = editorDATA.ModuleButtonsY * getHeightModifier();
        if (GUILayout.Button(currentCategorySelected.ToString(), buttonStyle, GUILayout.Height(elementHeight)))
        {
            targetShowSubCategories = !showSubCategories;
            updateShowSubCategories = true;
        }
        
        GUILayout.Space(4);
        EditorGUILayout.LabelField(" > ", separationStyle, GUILayout.Height(elementHeight+5), GUILayout.MaxWidth(25));
        GUILayout.Space(4);
        
        if (GUILayout.Button(editorDATA.categoriesData[(int)currentCategorySelected].subCategoriesData[curSubCategorySelected].SubCategoryName, skin.GetStyle("TopBarSelectedSub"), GUILayout.Height(elementHeight)))
        {
            
        }

        if (currentlyViewedAssetType != AssetType.CombatSettings &&
            currentlyViewedAssetType != AssetType.ItemSettings &&
            currentlyViewedAssetType != AssetType.GeneralSettings &&
            currentlyViewedAssetType != AssetType.EditorSettings)
        {
            if (!string.IsNullOrEmpty(moduleSearchText))
            {
                GUILayout.Space(4);
                EditorGUILayout.LabelField(" > ", separationStyle, GUILayout.Height(elementHeight+5), GUILayout.MaxWidth(25));
            }
            else
            {
                EditorGUILayout.LabelField("", GUILayout.MaxWidth(0));
            }
            
            GUILayout.Space(4);
            var moduleSearchStyle = skin.GetStyle("ModuleSearchText");

            switch (editorDATA.curEditorTheme)
            {
                case RPGBuilderEditorDATA.ThemeTypes.Dark:
                    moduleSearchStyle.normal.background = editorDATA.DarkThemeModuleSearchBackground;
                    moduleSearchStyle.hover.background = editorDATA.DarkThemeModuleSearchBackgroundHover;
                    break;
                case RPGBuilderEditorDATA.ThemeTypes.Light:
                    moduleSearchStyle.normal.background = editorDATA.LightThemeModuleSearchBackground;
                    moduleSearchStyle.hover.background = editorDATA.LightThemeModuleSearchBackgroundHover;
                    break;
            }

            float rectX = GUILayoutUtility.GetLastRect().x;
            if (currentFilterList.Count == 0 && (rectX <= 325 || (rectX >= 325 && getWidthModifier() >= 1.25f)))
            {
                EditorGUILayout.BeginVertical();
                GUILayout.Space(9 * getHeightModifier());
                moduleSearchText = EditorGUILayout.TextField(moduleSearchText, moduleSearchStyle,
                    GUILayout.Height(elementHeight / 1.75f), GUILayout.Width(75 * getWidthModifier()));
                EditorGUILayout.EndVertical();
            }
            else
            {
                moduleSearchText = "";
            }
        }

        DrawActionButtons(panelRect);
        
        float logoLength = 100;
        Rect blinkTextRect = new Rect(GetScreenWidth() - (logoLength+logoMargin), logoMargin*getHeightModifier(), logoLength, logoLength*0.28f);
        Texture2D blinkLogo = editorDATA.BlinkLogoOff.texture;
        
        if (isCursorHoverRect2(blinkTextRect))
        {
            blinkLogo = editorDATA.BlinkLogoOn.texture;
            Event e = Event.current;
            if (e.type == EventType.MouseDown)
            {
                targetShowBlinkPage = !showBlinkPage;
                updateShowBlinkPage = true;
            }
        }
        GUI.DrawTexture(blinkTextRect, blinkLogo);
        
        EditorGUILayout.EndHorizontal();
        GUILayout.EndArea();
        
    }

    private void DrawCategories()
    {
        if(showBlinkPage) return;
        if(!showCategories) return;
        float panelWidth = GetScreenWidth() * editorDATA.CategoryWidthPercentHover;
        float distanceFromTop = GetScreenHeight() * editorDATA.TopBarHeightPercent;
        float panelHeight = GetScreenHeight() - distanceFromTop;
        Rect panelRect = new Rect(0, distanceFromTop, panelWidth, panelHeight);
        
        GUILayout.BeginArea(panelRect);

        foreach (var t in editorDATA.categoriesData)
        {
            if (t.Active)
            {
                var selected = false;
                var buttonStyle = skin.GetStyle("ModuleButton");
                switch (editorDATA.curEditorTheme)
                {
                    case RPGBuilderEditorDATA.ThemeTypes.Dark:
                        buttonStyle.normal.textColor = Color.white;
                        break;
                    case RPGBuilderEditorDATA.ThemeTypes.Light:
                        buttonStyle.normal.textColor = Color.black;
                        break;
                }

                if (t.CategoryName == editorDATA.categoriesData[(int) currentCategorySelected].CategoryName) selected = true;
                if (selected)
                {
                    buttonStyle = skin.GetStyle("ModuleButtonSelected");
                }

                float elementHeight = editorDATA.CategoriesY * getHeightModifier();
                if (GUILayout.Button("  " + t.CategoryName, buttonStyle, GUILayout.ExpandWidth(true), GUILayout.Height(elementHeight)))
                {
                    SelectCategory(t.CategoryName);
                    targetShowCategories = false;
                    updateShowCategories = true;
                }
            }
        }

        GUILayout.EndArea();
    }
    
    private void DrawBlinkPage()
    {
        if(!showBlinkPage) return;
        float panelWidth = GetScreenWidth();
        float panelHeight = GetScreenHeight();
        Rect panelRect = new Rect(0, 0, panelWidth, panelHeight);
        
        float logoMargin = GetScreenHeight() - ((GetScreenHeight() * editorDATA.TopBarHeightPercent) * 0.25f);
        logoMargin = GetScreenHeight() - logoMargin;
        logoMargin /= 2;
        
        GUILayout.BeginArea(panelRect);
        
        float logoLength = 100;
        Rect blinkTextRect = new Rect(GetScreenWidth() - (logoLength+logoMargin), logoMargin*getHeightModifier(), logoLength, logoLength*0.28f);
        Texture2D blinkLogo = editorDATA.BlinkLogoOff.texture;
        
        if (isCursorHoverRect2(blinkTextRect))
        {
            blinkLogo = editorDATA.BlinkLogoOn.texture;
            Event e = Event.current;
            if (e.type == EventType.MouseDown)
            {
                targetShowBlinkPage = !showBlinkPage;
                updateShowBlinkPage = true;
            }
        }
        GUI.DrawTexture(blinkTextRect, blinkLogo);
        
        EditorGUILayout.EndHorizontal();
        
        
        GUILayout.Space(50);
        blinkScrollPosition = EditorGUILayout.BeginScrollView(blinkScrollPosition, false, false,
            GUILayout.Width(panelRect.width), GUILayout.MaxWidth(panelRect.width), GUILayout.Height(panelRect.height - 75));
        EditorGUILayout.BeginVertical();

        GUI.DrawTexture(new Rect(GetScreenWidth() / 4f, 0, 487*getWidthModifier(), 300*getHeightModifier())
            , editorDATA.BlinkBanner.texture);
        
        GUILayout.Space(320*getHeightModifier());
        GUILayout.Space(10);
        GUILayout.Label("WHAT IS BLINK ?", skin.GetStyle("BlinkPageTitle"), GUILayout.Height(50));
        GUILayout.Label("Blink is a Singapore Company providing both Softwares & Art Assets to thousands of Video Game Developers all around the world.", skin.GetStyle("BlinkPageText"), GUILayout.Height(50));
        GUILayout.Space(10);
        
        GUILayout.Space(10);
        GUILayout.Label("PRODUCTS:", skin.GetStyle("BlinkPageTitle"), GUILayout.Height(50));
        GUILayout.Label("The main product is RPG Builder. Many art packs are also in production.", skin.GetStyle("BlinkPageText"), GUILayout.Height(50));
        GUILayout.Space(10);
        
        StartHorizontalMargin(panelRect.width/2.2f, false);
        if (GUILayout.Button("RPG Builder", skin.GetStyle("AddButton"), GUILayout.MaxWidth(200), GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/packages/templates/systems/rpg-builder-177657");
        }
        EndHorizontalMargin(panelRect.width/2.2f, false);
        
        
        GUILayout.Space(10);
        GUILayout.Label("THE COMMUNITY:", skin.GetStyle("BlinkPageTitle"), GUILayout.Height(50));
        GUILayout.Label("Join the Blink community on:", skin.GetStyle("BlinkPageText"), GUILayout.Height(50));
        GUILayout.Space(10);
        
        StartHorizontalMargin(panelRect.width/2.2f, false);
        if (GUILayout.Button("Discord", skin.GetStyle("AddButton"), GUILayout.MaxWidth(200), GUILayout.Height(40)))
        {
            Application.OpenURL("https://discord.gg/fYzpuYwPwJ");
        }
        EndHorizontalMargin(panelRect.width/2.2f, false);
        
        GUILayout.Space(30);
        StartHorizontalMargin(panelRect.width/2.2f, false);
        if (GUILayout.Button("YouTube", skin.GetStyle("AddButton"), GUILayout.MaxWidth(200), GUILayout.Height(40)))
        {
            Application.OpenURL("https://www.youtube.com/c/BlinkStudioYoutube");
        }
        EndHorizontalMargin(panelRect.width/2.2f, false);
        
        GUILayout.Space(30);
        
        GUILayout.EndScrollView();
        GUILayout.EndArea();
    }

    float getHeightModifier()
    {
        return position.height / editorDATA.MinEditorHeight;
    }
    float getWidthModifier()
    {
        return position.width / editorDATA.MinEditorWidth;
    }
    
    private void DrawSubCategories()
    {
        if(showBlinkPage) return;
        if(!showSubCategories) return;
        float panelWidth = GetScreenWidth() * editorDATA.SubCategoryWidthPercentHover;
        float distanceFromTop = GetScreenHeight() * editorDATA.TopBarHeightPercent;
        float panelHeight = GetScreenHeight() - distanceFromTop;
        Rect panelRect = new Rect(0, distanceFromTop, panelWidth, panelHeight);

        GUILayout.BeginArea(panelRect);
        
        for (var i = 0; i < editorDATA.categoriesData[(int) currentCategorySelected].subCategoriesData.Length; i++)
            if (editorDATA.categoriesData[(int) currentCategorySelected].subCategoriesData[i].Active)
            {
                var selected = false;
                var buttonStyle = skin.GetStyle("ModuleButton");
                switch (editorDATA.curEditorTheme)
                {
                    case RPGBuilderEditorDATA.ThemeTypes.Dark:
                        buttonStyle.normal.textColor = Color.white;
                        break;
                    case RPGBuilderEditorDATA.ThemeTypes.Light:
                        buttonStyle.normal.textColor = Color.black;
                        break;
                }

                if (editorDATA.categoriesData[(int) currentCategorySelected].subCategoriesData[i].SubCategoryName ==
                    editorDATA.categoriesData[(int) currentCategorySelected].subCategoriesData[curSubCategorySelected]
                        .SubCategoryName) selected = true;
                if (selected)
                {
                    buttonStyle = skin.GetStyle("ModuleButtonSelected");
                }

                float elementHeight = editorDATA.CategoriesY * getHeightModifier();
                if (GUILayout.Button("  " + editorDATA.categoriesData[(int) currentCategorySelected].subCategoriesData[i].SubCategoryName,
                    buttonStyle, GUILayout.ExpandWidth(true), GUILayout.Height(elementHeight)))
                {
                    SelectSubCategory(i);
                    targetShowSubCategories = false;
                    updateShowSubCategories = true;
                }
            }

        GUILayout.EndArea();
    }

    private void DrawView()
    {
        if(showBlinkPage) return;
        switch (editorDATA.categoriesData[(int) currentCategorySelected].CategoryName)
        {
            case "Combat":
            case "COMBAT":
                DrawCombatView();
                break;
            case "General":
            case "GENERAL":
                DrawGeneralView();
                break;
            case "World":
            case "WORLD":
                DrawWorldView();
                break;
            case "Settings":
            case "SETTINGS":
                DrawSettingsView();
                break;
            case "Partners":
            case "PARTNERS":
                DrawPartnersView();
                break;
        }
    }
    

    private void DrawFilters()
    {
        if(showBlinkPage) return;
        if (!showFilters) return;

        float panel3Width = 1 - (editorDATA.CategoryWidthPercent + editorDATA.SubCategoryWidthPercent +
                                 editorDATA.FilterWidthPercent);
        
        panel3Width = GetScreenWidth() * panel3Width;
        
        float filterWidth = GetScreenWidth() * editorDATA.FilterWidthPercent;
        float distanceFromTop = GetScreenHeight() * editorDATA.TopBarHeightPercent;
        float panelHeight = GetScreenHeight() - distanceFromTop;
        panelHeight *= 1.02f;
        Rect panelRect = new Rect(panel3Width, distanceFromTop, filterWidth, panelHeight);
        
        GUILayout.BeginArea(panelRect);
        
        float topSpace = buttonHeight;
        
        filtersScrollPosition = EditorGUILayout.BeginScrollView(filtersScrollPosition, false, false,
            GUILayout.Width(filterWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(GetScreenHeight() - topSpace - 18));

        if (isSelectingField)
        {
            RPGBuilderEditorFilters.EntryField newField = DrawFieldSelectionView();
            if (newField != null)
            {
                currentFilterList[currentFilterEntryDataIndex].parentFieldNames = newField.parentFieldNames;
                currentFilterList[currentFilterEntryDataIndex].fieldName = newField.fieldName;
                currentFilterList[currentFilterEntryDataIndex].mopduleName = newField.mopduleName;
                currentFilterList[currentFilterEntryDataIndex].categoryName = newField.categoryName;
                currentFilterList[currentFilterEntryDataIndex].fieldType = newField.fieldType;
                currentFilterList[currentFilterEntryDataIndex].fieldTypeString = newField.fieldType.ToString();
                currentFilterEntryDataIndex = -1;
            }
        }
        else
        {
            DrawFilterEntryView();
        }
        
        GUILayout.Space(30);
        GUILayout.EndScrollView();
        GUILayout.EndArea();
    }
    
    private bool filterListContainsFieldName(string fieldName)
    {
        foreach (var filterEntry in currentFilterList)
        {
            if (filterEntry.fieldName == fieldName) return true;
        }

        return false;
    }

    private List<string> getSettingsStringList(string listName)
    {
        switch (listName)
        {
            case "weaponType":
                return itemSettings.weaponTypeList;
            case "itemType":
                return itemSettings.itemTypeList;
            case "equipmentSlot":
                return itemSettings.armorSlotsList;
            case "armorType":
                return itemSettings.armorTypeList;
            case "slotType":
                return itemSettings.slotTypeList;
            
        }

        return null;
    }

    private void DrawFilterEntryView()
    {
        StartHorizontalMargin(15, true);

        if (currentFilterList.Count > 0)
        {
            if (GUILayout.Button("Apply Filters", skin.GetStyle("AddButton"), GUILayout.Height(25),
                GUILayout.ExpandWidth(true)))
            {
                updateElementList = true;
                cachedRequirementResults = null;
                EndHorizontalMargin(0, true);
                return;
            }
        }

        GUILayout.Space(10);

        if (currentFilterList.Count > 0)
        {
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Add Filter", skin.GetStyle("AddButton"), GUILayout.Height(25),
                GUILayout.ExpandWidth(true)))
            {
                var newFilter = new RPGBuilderEditorFilters.FilterEntryData();
                currentFilterList.Add(newFilter);
                GUI.FocusControl(null);
                return;
            }

            GUILayout.Space(10);
            if (GUILayout.Button("Remove", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.MinWidth(75),
                GUILayout.Height(25), GUILayout.ExpandWidth(true)))
            {
                currentFilterList.RemoveAt(currentFilterList.Count - 1);
                GUI.FocusControl(null);

                if (currentFilterList.Count != 0) return;
                updateElementList = true;
                cachedRequirementResults = null;
                return;
            }

            EditorGUILayout.EndHorizontal();

            GUILayout.Space(10);
            if (GUILayout.Button("Remove All (" + currentFilterList.Count + ")",
                skin.GetStyle("RemoveAbilityRankButton"), GUILayout.MinWidth(150), GUILayout.Height(25),
                GUILayout.ExpandWidth(true)))
            {
                currentFilterList.Clear();
                GUI.FocusControl(null);
                
                updateElementList = true;
                cachedRequirementResults = null;
                return;
            }
        }
        else
        {
            if (GUILayout.Button("Add Filter", skin.GetStyle("AddButton"), GUILayout.Height(25),
                GUILayout.ExpandWidth(true)))
            {
                var newFilter = new RPGBuilderEditorFilters.FilterEntryData();
                currentFilterList.Add(newFilter);
                GUI.FocusControl(null);

                return;
            }
        }

        GUILayout.Space(25);
        EndHorizontalMargin(15, true);

        for (var index = 0; index < currentFilterList.Count; index++)
        {
            var filterEntryNumber = index + 1;
            var filterEntry = currentFilterList[index];

            StartHorizontalMargin(10, true);
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                GUILayout.Height(20)))
            {
                currentFilterList.RemoveAt(index);

                if (currentFilterList.Count != 0) return;
                updateElementList = true;
                cachedRequirementResults = null;
                return;
            }

            string fieldName = "";
            if (!string.IsNullOrEmpty(filterEntry.fieldName))
            {
                GUILayout.Space(5);
                if (GUILayout.Button(">", skin.GetStyle("AddButtonSmall"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentFilterEntryDataIndex = index;
                    isSelectingField = true;
                }
                
                fieldName = GetFieldDisplayName(filterEntry.mopduleName, filterEntry.categoryName,
                    filterEntry.fieldName);
                ;
                EditorGUILayout.LabelField(filterEntryNumber + ". " + fieldName,
                    GUILayout.Width(editorDATA.filterLabelFieldWidth));
                
            }
            else
            {
                GUILayout.Space(25);
                if (GUILayout.Button("Select Field", skin.GetStyle("AddButton"), GUILayout.MaxWidth(150),
                    GUILayout.Height(20)))
                {
                    currentFilterEntryDataIndex = index;
                    isSelectingField = true;
                }
            }

            EditorGUILayout.EndHorizontal();
            GUILayout.Space(5);

            StartHorizontalMargin(10, true);

            if (filterEntry.fieldType == null && !string.IsNullOrEmpty(filterEntry.fieldTypeString))
            {
                filterEntry.fieldType = GetType(filterEntry.fieldTypeString);
            }

            if (filterEntry.fieldType != null)
            {
                if (filterEntry.isRPGDataReference)
                {
                    EditorGUILayout.BeginHorizontal();
                    EditorGUILayout.LabelField("Condition Type", GUILayout.Width(editorDATA.filterLabelFieldWidth));
                    filterEntry.numberConditionType =
                        (RPGBuilderEditorFilters.NumberConditionType) EditorGUILayout.EnumPopup(filterEntry
                            .numberConditionType);
                    EditorGUILayout.EndHorizontal();

                    filterEntry.intValue = DrawHorizontalIntField("Value", "", 15, editorDATA.filterLabelFieldWidth,
                        filterEntry.intValue);
                }
                else if (filterEntry.fieldType == typeof(int))
                {
                    EditorGUILayout.BeginHorizontal();
                    EditorGUILayout.LabelField("Condition Type", GUILayout.Width(editorDATA.filterLabelFieldWidth));
                    filterEntry.numberConditionType =
                        (RPGBuilderEditorFilters.NumberConditionType) EditorGUILayout.EnumPopup(filterEntry
                            .numberConditionType);
                    EditorGUILayout.EndHorizontal();

                    filterEntry.intValue = DrawHorizontalIntField("Value", "", 15, editorDATA.filterLabelFieldWidth,
                        filterEntry.intValue);
                }
                else if (filterEntry.fieldType == typeof(float))
                {
                    EditorGUILayout.BeginHorizontal();
                    EditorGUILayout.LabelField("Condition Type", GUILayout.Width(editorDATA.filterLabelFieldWidth));
                    filterEntry.numberConditionType =
                        (RPGBuilderEditorFilters.NumberConditionType) EditorGUILayout.EnumPopup(filterEntry
                            .numberConditionType);
                    EditorGUILayout.EndHorizontal();

                    filterEntry.floatValue = DrawHorizontalFloatField("Value", "", 15, editorDATA.filterLabelFieldWidth,
                        filterEntry.floatValue);
                }
                else if (filterEntry.fieldType == typeof(string))
                {
                    if (GetFieldIsStringEnum(filterEntry.mopduleName, filterEntry.categoryName, filterEntry.fieldName))
                    {
                        var stringIndex = getIndexFromName(filterEntry.fieldName, filterEntry.text);
                        List<string> stringList = getSettingsStringList(filterEntry.fieldName);
                        var tempIndex1 = EditorGUILayout.Popup(stringIndex, stringList.ToArray());
                        if (stringList.Count > 0)
                            filterEntry.text = stringList[tempIndex1];
                    }
                    else
                    {
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Condition Type", GUILayout.Width(editorDATA.filterLabelFieldWidth));
                        filterEntry.stringValueType =
                            (RPGBuilderEditorFilters.StringValueType) EditorGUILayout.EnumPopup(filterEntry
                                .stringValueType);
                        EditorGUILayout.EndHorizontal();

                        filterEntry.text = DrawHorizontalTextField("Text", "", 15, editorDATA.filterLabelFieldWidth,
                            filterEntry.text);
                    }
                }
                else if (filterEntry.fieldType == typeof(bool))
                {
                    filterEntry.boolValue = DrawHorizontalToggle("Is ON ?", "", 15, editorDATA.filterLabelFieldWidth,
                        filterEntry.boolValue);
                }
                else if (filterEntry.fieldType == typeof(Sprite))
                {
                    EditorGUILayout.BeginHorizontal();
                    EditorGUILayout.LabelField("Sprite to match", GUILayout.Width(100));
                    filterEntry.sprite = DrawIconField(filterEntry.sprite, 50);
                    EditorGUILayout.EndHorizontal();
                }
                else if (filterEntry.fieldType == typeof(GameObject))
                {
                    filterEntry.gameObject = (GameObject) EditorGUILayout.ObjectField("Prefab",
                        filterEntry.gameObject, typeof(GameObject), false);
                }
                else if (filterEntry.fieldType == typeof(Material))
                {
                    filterEntry.material = (Material) EditorGUILayout.ObjectField("Material",
                        filterEntry.material, typeof(Material), false);
                }
                else if (filterEntry.fieldType == typeof(Vector3))
                {
                    EditorGUILayout.BeginHorizontal();
                    filterEntry.entryReferenceConditionType =
                        (RPGBuilderEditorFilters.EntryReferenceConditionType) EditorGUILayout.EnumPopup(filterEntry
                            .entryReferenceConditionType);
                    filterEntry.vector3 = DrawHorizontalVector3("Vector 3", "", 15, filterEntry.vector3);
                    EditorGUILayout.EndHorizontal();
                }
                else if (filterEntry.fieldType.IsEnum)
                {
                    EditorGUILayout.BeginHorizontal();
                    filterEntry.entryReferenceConditionType =
                        (RPGBuilderEditorFilters.EntryReferenceConditionType) EditorGUILayout.EnumPopup(filterEntry
                            .entryReferenceConditionType);
                    if (filterEntry.enumReference == null)
                    {
                        if (filterEntry.enumIndex > 0 &&
                            filterEntry.fieldType.GetEnumValues().Length >= (filterEntry.enumIndex + 1))
                        {
                            filterEntry.enumReference =
                                (Enum) filterEntry.fieldType.GetEnumValues().GetValue(filterEntry.enumIndex);
                        }
                        else
                        {
                            filterEntry.enumReference = (Enum) filterEntry.fieldType.GetEnumValues().GetValue(0);
                        }
                    }

                    filterEntry.enumReference =
                        EditorGUILayout.EnumPopup(
                            (Enum) Enum.ToObject(filterEntry.fieldType, filterEntry.enumReference));
                    filterEntry.enumIndex = GetEnumValueIndexByName(filterEntry.fieldType.GetEnumValues(),
                        filterEntry.enumReference.ToString());
                    EditorGUILayout.EndHorizontal();
                }
            }

            EndHorizontalMargin(10, true);
            EndHorizontalMargin(15, true);
            GUILayout.Space(15);
        }
    }

    private int GetEnumValueIndexByName(Array enumValues, string enumValueName)
    {
        for (int i = 0; i < enumValues.Length; i++)
        {
            if (enumValues.GetValue(i).ToString() == enumValueName) return i;
        }

        return -1;
    }

    private RPGBuilderEditorFilters.EntryField DrawFieldSelectionView()
    {
        GUILayout.Space(20);
        StartHorizontalMargin(15, true);

        if (GUILayout.Button("Cancel", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.MinWidth(80), GUILayout.ExpandWidth(true)))
        {
            currentFilterEntryDataIndex = -1;
            isSelectingField = false;
        }
        GUILayout.Space(10);
        GUILayout.BeginHorizontal();
        string moduleName = "";
        foreach (var fieldList in entryFieldLists)
        {
            if (moduleName == "") moduleName = fieldList.categoryName;
        }

        if (GUILayout.Button("Minimize", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.MinWidth(75), GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
        {
            ChangeFilterCategoriesShowState(moduleName, false);
        }
        GUILayout.Space(10);
        if (GUILayout.Button("Maximize", skin.GetStyle("AddButton"), GUILayout.MinWidth(75), GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
        {
            ChangeFilterCategoriesShowState(moduleName, true);
        }
        GUILayout.EndHorizontal();
        
        EndHorizontalMargin(15, true);
        GUILayout.Space(10);
        
        foreach (var fieldList in entryFieldLists)
        {
            if (!GetCategoryDisplayState(moduleName, fieldList.categoryName)) continue;
            bool showCategory = GetCategoryShowState(moduleName, fieldList.categoryName);
            showCategory = HandleModuleBanner2(GetCategoryDisplayName(moduleName, fieldList.categoryName), showCategory);
            SetCategoryShowState(moduleName, fieldList.categoryName, showCategory);
            GUILayout.Space(10);
            if(!showCategory) continue;
            StartHorizontalMargin(10, true);
            foreach (var field in fieldList.fieldList)
            {
                if (!GetFilterFieldDisplayState(moduleName, fieldList.categoryName, field.fieldName)) continue;
                if (filterListContainsFieldName(field.fieldName)) continue;
                string fieldName = GetFieldDisplayName(moduleName, fieldList.categoryName, field.fieldName);
                
                StartHorizontalMargin(35, false);
                if (GUILayout.Button(fieldName, skin.GetStyle("FilterFieldButton"), GUILayout.MinWidth(80),GUILayout.ExpandWidth(true)))
                {
                    isSelectingField = false;
                    return field;
                }
                EndHorizontalMargin(35, false);
                GUILayout.Space(5);
            }
            EndHorizontalMargin(10, true);
            GUILayout.Space(10);
        }


        return null;
    }

    private string GetCategoryDisplayName(string moduleName, string categoryName)
    {
        foreach (var module in editorFilters.modules)
        {
            if(module.moduleName != moduleName) continue;
            foreach (var category in module.categories)
            {
                if (category.categoryName == categoryName) return category.categoryDisplayName;
            }
        }

        return "-- NAME NOT FOUND --";
    }

    private bool GetCategoryShowState(string moduleName, string categoryName)
    {
        foreach (var module in editorFilters.modules)
        {
            if(module.moduleName != moduleName) continue;
            foreach (var category in module.categories)
            {
                if (category.categoryName == categoryName) return category.showInEditor;
            }
        }

        return false;
    }
    private bool GetFilterFieldDisplayState(string moduleName, string categoryName, string fieldName)
    {
        foreach (var module in editorFilters.modules)
        {
            if(module.moduleName != moduleName) continue;
            foreach (var category in module.categories)
            {
                if(category.categoryName != categoryName) continue;
                foreach (var field in category.fields)
                {
                    if(field.fieldBaseName != fieldName) continue;
                    return field.display;
                }
            }
        }

        return false;
    }
    private void SetCategoryShowState(string moduleName, string categoryName, bool show)
    {
        foreach (var module in editorFilters.modules)
        {
            if(module.moduleName != moduleName) continue;
            foreach (var category in module.categories)
            {
                if(category.categoryName != categoryName) continue;
                category.showInEditor = show;
            }
        }
    }
    
    private bool GetCategoryDisplayState(string moduleName, string categoryName)
    {
        foreach (var module in editorFilters.modules)
        {
            if(module.moduleName != moduleName) continue;
            foreach (var category in module.categories)
            {
                if(category.categoryName != categoryName) continue;
                return category.display;
            }
        }

        return false;
    }
    
    private void ChangeFilterCategoriesShowState(string moduleName, bool open)
    {
        foreach (var module in editorFilters.modules)
        {
            if(module.moduleName != moduleName) continue;
            foreach (var category in module.categories)
            {
                category.showInEditor = open;
            }
        }
    }

    private int editorLanguageIndex = 0;
    private string GetFieldDisplayName(string moduleName, string categoryName, string fieldName)
    {
        foreach (var module in editorFilters.modules)
        {
            if(module.moduleName != moduleName) continue;
            foreach (var category in module.categories)
            {
                if(category.categoryName != categoryName) continue;
                foreach (var field in category.fields)
                {
                    if(field.fieldBaseName != fieldName) continue;
                    return field.fieldNames[editorLanguageIndex];
                }
            }
        }

        return "-- NAME NOT FOUND --";
    }
    
    private bool GetFieldIsStringEnum(string moduleName, string categoryName, string fieldName)
    {
        foreach (var module in editorFilters.modules)
        {
            if(module.moduleName != moduleName) continue;
            foreach (var category in module.categories)
            {
                if(category.categoryName != categoryName) continue;
                foreach (var field in category.fields)
                {
                    if(field.fieldBaseName != fieldName) continue;
                    return field.isStringEnum;
                }
            }
        }

        return false;
    }
    
    private void InitializeCurrentAssetType()
    {
        currentType = null;
        switch (currentAssetType)
        {
            case AssetType.Ability:
                currentType = typeof(RPGAbility);
                currentFilterList = editorFilters.abilityFilters; 
                break;
            case AssetType.Effect:
                currentType = typeof(RPGEffect);
                currentFilterList = editorFilters.effectFilters;
                break;
            case AssetType.Item:
                currentType = typeof(RPGItem);
                currentFilterList = editorFilters.itemFilters; 
                break;
            case AssetType.NPC:
                currentType = typeof(RPGNpc);
                currentFilterList = editorFilters.NPCFilters; 
                break;
            case AssetType.Stat:
                currentType = typeof(RPGStat);
                currentFilterList = editorFilters.statFilters; 
                break;
            case AssetType.Skill:
                currentType = typeof(RPGSkill);
                currentFilterList = editorFilters.skillFilters; 
                break;
            case AssetType.LevelTemplate:
                currentType = typeof(RPGLevelsTemplate);
                currentFilterList = editorFilters.levelTemplateFilters; 
                break;
            case AssetType.Race:
                currentType = typeof(RPGRace);
                currentFilterList = editorFilters.raceFilters; 
                break;
            case AssetType.Class:
                currentType = typeof(RPGClass);
                currentFilterList = editorFilters.classFilters; 
                break;
            case AssetType.TalentTree:
                currentType = typeof(RPGTalentTree);
                currentFilterList = editorFilters.talentTreeFilters; 
                break;
            case AssetType.TreePoint:
                currentType = typeof(RPGTreePoint);
                currentFilterList = editorFilters.talentPointFilters; 
                break;
            case AssetType.LootTable:
                currentType = typeof(RPGLootTable);
                currentFilterList = editorFilters.lootTablesFilters; 
                break;
            case AssetType.WorldPosition:
                currentType = typeof(RPGWorldPosition);
                currentFilterList = editorFilters.worldPositionFilters; 
                break;
            case AssetType.MerchantTable:
                currentType = typeof(RPGMerchantTable);
                currentFilterList = editorFilters.merchantTableFilters; 
                break;
            case AssetType.Currency:
                currentType = typeof(RPGCurrency);
                currentFilterList = editorFilters.currencyFilters; 
                break;
            case AssetType.Task:
                currentType = typeof(RPGTask);
                currentFilterList = editorFilters.taskFilters; 
                break;
            case AssetType.Quest:
                currentType = typeof(RPGQuest);
                currentFilterList = editorFilters.questFilters; 
                break;
            case AssetType.CraftingRecipe:
                currentType = typeof(RPGCraftingRecipe);
                currentFilterList = editorFilters.recipeFilters; 
                break;
            case AssetType.CraftingStation:
                currentType = typeof(RPGCraftingStation);
                currentFilterList = editorFilters.craftingStationFilters; 
                break;
            case AssetType.ResourceNode:
                currentType = typeof(RPGResourceNode);
                currentFilterList = editorFilters.resourceNodeFilters; 
                break;
            case AssetType.Bonus:
                currentType = typeof(RPGBonus);
                currentFilterList = editorFilters.bonusFilters; 
                break;
            case AssetType.GameScene:
                currentType = typeof(RPGGameScene);
                currentFilterList = editorFilters.gameSceneFilters; 
                break;
            case AssetType.GearSet:
                currentType = typeof(RPGGearSet);
                currentFilterList = editorFilters.gearsSetFilters; 
                break;
            case AssetType.Enchantment:
                currentType = typeof(RPGEnchantment);
                currentFilterList = editorFilters.enchantmentFilters; 
                break;
            case AssetType.Spellbook:
                currentType = typeof(RPGSpellbook);
                currentFilterList = editorFilters.spellbookFilters; 
                break;
            case AssetType.Faction:
                currentType = typeof(RPGFaction);
                currentFilterList = editorFilters.factionFilters; 
                break;
            case AssetType.WeaponTemplate:
                currentType = typeof(RPGWeaponTemplate);
                currentFilterList = editorFilters.weaponTemplateFilters; 
                break;
            case AssetType.Dialogue:
                currentType = typeof(RPGDialogue);
                currentFilterList = editorFilters.dialogueFilters; 
                break;
            case AssetType.GameModifier:
                currentType = typeof(RPGGameModifier);
                currentFilterList = editorFilters.gameModifierFilters; 
                break;
            case AssetType.Species:
                currentType = typeof(RPGSpecies);
                currentFilterList = editorFilters.speciesFilters; 
                break;
            case AssetType.Combo:
                currentType = typeof(RPGCombo);
                currentFilterList = editorFilters.comboFilters; 
                break;
        }

        foreach (var filter in currentFilterList)
        { 
            if (filter.fieldType != null) continue;
            if (string.IsNullOrEmpty(filter.fieldTypeString)) continue;
            filter.fieldType = GetType(filter.fieldTypeString);
            if (filter.fieldType == null)
            {
                Debug.LogError("Could not find TYPE for filter: " + filter.fieldName);
            }
        }
        
        HandleFullFieldList();
    }
    
    public static Type GetType(string TypeName)
    {
        var type = Type.GetType(TypeName);

        if (type != null)
            return type;

        if (TypeName.Contains("."))
        {
            var assemblyName = TypeName.Substring(0, TypeName.IndexOf('.'));
            var assembly = Assembly.Load(assemblyName);
            if (assembly == null)
                return null;

            type = assembly.GetType(TypeName);
            if (type != null)
                return type;

        }

        var currentAssembly = Assembly.GetExecutingAssembly();
        var referencedAssemblies = currentAssembly.GetReferencedAssemblies();
        foreach (var assemblyName in referencedAssemblies)
        {

            var assembly = Assembly.Load(assemblyName);
            if (assembly == null) continue;
            type = assembly.GetType(TypeName);
            if (type != null)
                return type;
        }

        return null;
    }
    
    private void HandleFullFieldList()
    {
        entryFieldLists.Clear();
        GenerateEntryFieldCategory(currentType.ToString(), currentType.ToString(), new List<string>(), "", currentType.ToString());
    }

    private void GenerateEntryFieldCategory(string categoryName, string typeName, List<string> parentFieldNames, string newFieldName, string moduleName)
    {
        RPGBuilderEditorFilters.EntryFieldList newEntryList = new RPGBuilderEditorFilters.EntryFieldList();
        newEntryList.mopduleName = moduleName;
        newEntryList.categoryName = categoryName;
        newEntryList.fieldList = GETFields(GetType(typeName), parentFieldNames, newFieldName, moduleName, categoryName);
        entryFieldLists.Add(newEntryList);

        foreach (var field in newEntryList.fieldList)
        {
            if (field.fieldType.ToString().Contains("+") && field.fieldType.ToString().Contains("System.Collections.Generic.List"))
            {
                if (field.fieldType.ToString().Contains(entryFieldLists[0].categoryName))
                {
                    // THIS LOCAL FIELD LIST HAD A LIST IN IT
                    string fieldTypeToString = field.fieldType.ToString();
                    int indexOfBeginning = fieldTypeToString.IndexOf("[");
                    string finalName = fieldTypeToString.Remove(0, indexOfBeginning + 1);
                    finalName = finalName.Remove(finalName.Length - 1);

                    GenerateEntryFieldCategory(finalName, finalName, field.parentFieldNames, field.fieldName, moduleName);
                    field.display = false;
                }
                else
                {
                    field.display = false;
                }
            } else if (field.fieldName.Contains("REF"))
            {
                field.display = false;
            }
        }
    }
    
    private List<RPGBuilderEditorFilters.EntryField> GETFields(Type type, List<string> parentFieldNames, string newFieldName, string moduleName, string categoryName)
    {
        List<RPGBuilderEditorFilters.EntryField> fieldList = new List<RPGBuilderEditorFilters.EntryField>();
        
        var fieldValues = type.GetFields ();

        foreach (var field in fieldValues)
        {
            RPGBuilderEditorFilters.EntryField newVar = new RPGBuilderEditorFilters.EntryField();
            newVar.fieldType = field.FieldType;
            newVar.fieldName = field.Name;
            newVar.mopduleName = moduleName;
            newVar.categoryName = categoryName;
            foreach (var parentFieldName in parentFieldNames)
            {
                newVar.parentFieldNames.Add(parentFieldName);
            }
            newVar.parentFieldNames.Add(newFieldName);
            fieldList.Add(newVar);
        }
        
        return fieldList;
    }
    
    public void InitFilterWindow()
    {
        currentFilterEntryDataIndex = -1;
        isSelectingField = false;
        
        InitializeCurrentAssetType(); 
    }

    private void DrawCombatView()
    {
        PrepareViewArea();
        
        switch (combatSubCurrentCategorySelected)
        {
            case CombatSubCategorySelectedType.Ability:
                DrawAbilityView();
                break;

            case CombatSubCategorySelectedType.Effect:
                DrawEffectView();
                break;

            case CombatSubCategorySelectedType.NPCs:
                DrawNPCsView();
                break;

            case CombatSubCategorySelectedType.Stat:
                DrawStatView();
                break;

            case CombatSubCategorySelectedType.TreePoint:
                DrawTreePointView();
                break;

            case CombatSubCategorySelectedType.Spellbook:
                DrawSpellbookView();
                break;

            case CombatSubCategorySelectedType.Faction:
                DrawFactionView();
                break;

            case CombatSubCategorySelectedType.WeaponTemplate:
                DrawWeaponTemplateView();
                break;

            case CombatSubCategorySelectedType.Species:
                DrawSpeciesView();
                break;

            case CombatSubCategorySelectedType.Combo:
                DrawComboView();
                break;
        }
        GUILayout.EndArea();
    }

    private bool isNameAvailable(AssetType assetType)
    {
        switch (assetType)
        {
            case AssetType.Ability:
                foreach (var t in allAbilities)
                {
                    if (currentlyViewedAbility._name != t._name || currentlyViewedAbility.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Effect:
                foreach (var t in allEffects)
                {
                    if (currentlyViewedEffect._name != t._name || currentlyViewedEffect.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Item:
                foreach (var t in allItems)
                {
                    if (currentlyViewedItem._name != t._name || currentlyViewedItem.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.NPC:
                foreach (var t in allNPCs)
                {
                    if (currentlyViewedNPC._name != t._name || currentlyViewedNPC.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Stat:
                foreach (var t in allStats)
                {
                    if (currentlyViewedStat._name != t._name || currentlyViewedStat.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Skill:
                foreach (var t in allSkills)
                {
                    if (currentlyViewedSkill._name != t._name || currentlyViewedSkill.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.LevelTemplate:
                foreach (var t in allLevelsTemplate)
                {
                    if (currentlyViewedLevelTemplate._name != t._name || currentlyViewedLevelTemplate.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Race:
                foreach (var t in allRaces)
                {
                    if (currentlyViewedRace._name != t._name || currentlyViewedRace.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Class:
                foreach (var t in allClasses)
                {
                    if (currentlyViewedClass._name != t._name || currentlyViewedClass.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.TalentTree:
                foreach (var t in allTalentTrees)
                {
                    if (currentlyViewedTalentTree._name != t._name || currentlyViewedTalentTree.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.TreePoint:
                foreach (var t in allTreePoints)
                {
                    if (currentlyViewedTreePoint._name != t._name || currentlyViewedTreePoint.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.LootTable:
                foreach (var t in allLootTables)
                {
                    if (currentlyViewedLootTable._name != t._name || currentlyViewedLootTable.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.WorldPosition:
                foreach (var t in allWorldPositions)
                {
                    if (currentlyViewedWorldPosition._name != t._name || currentlyViewedWorldPosition.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.MerchantTable:
                foreach (var t in allMerchantTables)
                {
                    if (currentlyViewedMerchantTable._name != t._name || currentlyViewedMerchantTable.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Currency:
                foreach (var t in allCurrencies)
                {
                    if (currentlyViewedCurrency._name != t._name || currentlyViewedCurrency.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Task:
                foreach (var t in allTasks)
                {
                    if (currentlyViewedTask._name != t._name || currentlyViewedTask.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Quest:
                foreach (var t in allQuests)
                {
                    if (currentlyViewedQuest._name != t._name || currentlyViewedQuest.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.CraftingRecipe:
                foreach (var t in allCraftingRecipes)
                {
                    if (currentlyViewedCraftingRecipe._name != t._name || currentlyViewedCraftingRecipe.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.CraftingStation:
                foreach (var t in allCraftingStations)
                {
                    if (currentlyViewedCraftingStation._name != t._name || currentlyViewedCraftingStation.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.ResourceNode:
                foreach (var t in allResourceNodes)
                {
                    if (currentlyViewedResourceNode._name != t._name || currentlyViewedResourceNode.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Bonus:
                foreach (var t in allBonuses)
                {
                    if (currentlyViewedBonus._name != t._name || currentlyViewedBonus.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.GameScene:
                foreach (var t in allGameScenes)
                {
                    if (currentlyViewedGameScene._name != t._name || currentlyViewedGameScene.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Dialogue:
                foreach (var t in allDialogues)
                {
                    if (currentlyViewedDialogue._name != t._name || currentlyViewedDialogue.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.GearSet:
                foreach (var t in allGearSets)
                {
                    if (currentlyViewedGearSet._name != t._name || currentlyViewedGearSet.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Enchantment:
                foreach (var t in allEnchantments)
                {
                    if (currentlyViewedEnchantment._name != t._name || currentlyViewedEnchantment.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Spellbook:
                foreach (var t in allSpellbooks)
                {
                    if (currentlyViewedSpellbook._name != t._name || currentlyViewedSpellbook.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Faction:
                foreach (var t in allFactions)
                {
                    if (currentlyViewedFaction._name != t._name || currentlyViewedFaction.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.WeaponTemplate:
                foreach (var t in allWeaponTemplates)
                {
                    if (currentlyViewedWeaponTemplate._name != t._name || currentlyViewedWeaponTemplate.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.GameModifier:
                foreach (var t in allGameModifiers)
                {
                    if (currentlyViewedGameModifier._name != t._name || currentlyViewedGameModifier.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Species:
                foreach (var t in allSpecies)
                {
                    if (currentlyViewedSpecies._name != t._name || currentlyViewedSpecies.ID == t.ID) continue;
                    return false;
                }
                break;
            case AssetType.Combo:
                foreach (var t in allCombos)
                {
                    if (currentlyViewedCombo._name != t._name || currentlyViewedCombo.ID == t.ID) continue;
                    return false;
                }
                break;
        }
        return true;
    }

    private bool isCursorHoverRect(Rect checkRect)
    {
        var e = Event.current;
        return GUILayoutUtility.GetLastRect().Contains(e.mousePosition);
    }
    
    private bool isCursorHoverRect2(Rect checkRect)
    {
        var e = Event.current;
        return checkRect.Contains(e.mousePosition);
    }

    private Rect DrawModuleBanner2(string bannerText, bool isShowing)
    {
        var bannerFullRect = GUILayoutUtility.GetRect(0, 0, 30, 0);
        var bannerBeginRect = new Rect(bannerFullRect.position.x + 20, bannerFullRect.position.y, 20, 30);
        var bannerMiddleRect = new Rect(bannerFullRect.position.x + 40, bannerFullRect.position.y,
            bannerFullRect.xMax - 80, 30);
        var bannerEndRect = new Rect(bannerFullRect.xMax - 40, bannerFullRect.position.y, 20, 30);

        Color guiColor = GUI.color;

        float width = bannerBeginRect.width + bannerMiddleRect.width + bannerEndRect.width;
        Rect fullBannerRect = new Rect(bannerBeginRect.x, bannerFullRect.position.y, width, 30);
        GUIStyle bannerTextStyle = skin.GetStyle("ViewTitle");
        if (isCursorHoverRect2(fullBannerRect))
        {
            GUI.color = editorDATA.bannerColorHover;
            bannerTextStyle.normal.textColor = Color.black;
        }
        else
        {
            GUI.color = isShowing ? editorDATA.bannerColor : editorDATA.bannerCollapsedColor;
            bannerTextStyle.normal.textColor = Color.white;
        }

        GUI.DrawTexture(bannerBeginRect, editorDATA.bannerBegin, ScaleMode.StretchToFill, true);
        GUI.DrawTexture(bannerMiddleRect, editorDATA.bannerMiddle, ScaleMode.StretchToFill, true);
        GUI.DrawTexture(bannerEndRect, editorDATA.bannerEnd, ScaleMode.StretchToFill, true);
        GUI.color = guiColor;

#if UNITY_2019_3_OR_NEWER
        GUI.Label(bannerFullRect, bannerText, skin.GetStyle("ViewTitle"));
#else
        GUI.Label(bannerFullRect, bannerText, skin.GetStyle("ViewTitle"));
#endif
        return fullBannerRect;
    }

    private Rect DrawModuleBanner(string bannerText, bool isShowing)
    {
        var bannerFullRect = GUILayoutUtility.GetRect(0, 0, 30, 0);
        var bannerBeginRect = new Rect(bannerFullRect.position.x + 60, bannerFullRect.position.y, 20, 30);
        var bannerMiddleRect = new Rect(bannerFullRect.position.x + 80, bannerFullRect.position.y, bannerFullRect.xMax - 170, 30);
        var bannerEndRect = new Rect(bannerFullRect.xMax - 90, bannerFullRect.position.y, 20, 30);

        Color guiColor = GUI.color;

        float width = bannerBeginRect.width + bannerMiddleRect.width + bannerEndRect.width;
        Rect fullBannerRect = new Rect(bannerBeginRect.x, bannerFullRect.position.y, width, 30);
        GUIStyle bannerTextStyle = skin.GetStyle("ViewTitle");
        if (isCursorHoverRect2(fullBannerRect))
        {
            GUI.color = editorDATA.bannerColorHover;
            bannerTextStyle.normal.textColor = Color.black;
        }
        else
        {
            GUI.color = isShowing ? editorDATA.bannerColor : editorDATA.bannerCollapsedColor;
            bannerTextStyle.normal.textColor = Color.white;
        }
        GUI.DrawTexture(bannerBeginRect, editorDATA.bannerBegin, ScaleMode.StretchToFill, true);
        GUI.DrawTexture(bannerMiddleRect, editorDATA.bannerMiddle, ScaleMode.StretchToFill, true);
        GUI.DrawTexture(bannerEndRect, editorDATA.bannerEnd, ScaleMode.StretchToFill, true);
        GUI.color = guiColor;

#if UNITY_2019_3_OR_NEWER
        GUI.Label(bannerFullRect, bannerText, skin.GetStyle("ViewTitle"));
#else
        GUI.Label(bannerFullRect, bannerText, skin.GetStyle("ViewTitle"));
#endif
        return fullBannerRect;
    }
    private Rect DrawAddRemoveButton(string bannerText, bool isAdd)
    {
        var bannerFullRect = GUILayoutUtility.GetRect(0, 75, 25, 0);
        var bannerBeginRect = new Rect(bannerFullRect.position.x + 10, bannerFullRect.position.y, 10, 25);
        var bannerMiddleRect = new Rect(bannerFullRect.position.x + 20, bannerFullRect.position.y,bannerFullRect.xMax - 75, 25);
        var bannerEndRect = new Rect(bannerFullRect.xMax - 60, bannerFullRect.position.y, 10, 25);

        Color guiColor = GUI.color;
        
        GUI.color = isAdd ? editorDATA.addButtonColor : editorDATA.removeButtonColor;
        GUI.DrawTexture(bannerBeginRect, editorDATA.bannerBegin, ScaleMode.StretchToFill, true);
        GUI.DrawTexture(bannerMiddleRect, editorDATA.bannerMiddle, ScaleMode.StretchToFill, true);
        GUI.DrawTexture(bannerEndRect, editorDATA.bannerEnd, ScaleMode.StretchToFill, true);
        GUI.color = guiColor;

#if UNITY_2019_3_OR_NEWER
        GUI.Label(bannerFullRect, bannerText, skin.GetStyle("ViewTitle"));
#else
        GUI.Label(bannerFullRect, bannerText, skin.GetStyle("ViewTitle"));
#endif
        return bannerFullRect;
    }

    private string GetModuleName()
    {
        switch (currentlyViewedAssetType)
        {
            case AssetType.Ability:
                return "RPGAbility";
            case AssetType.Effect:
                return "RPGEffect";
            case AssetType.Item:
                return "RPGItem";
            case AssetType.NPC:
                return "RPGNpc";
            case AssetType.Stat:
                return "RPGStat";
            case AssetType.CombatSettings:
                return "";
            case AssetType.ItemSettings:
                return "";
            case AssetType.Skill:
                return "RPGSkill";
            case AssetType.LevelTemplate:
                return "RPGLevelTemplate";
            case AssetType.Race:
                return "RPGRace";
            case AssetType.Class:
                return "RPGClass";
            case AssetType.GeneralSettings:
                return "";
            case AssetType.TalentTree:
                return "RPGTalentTree";
            case AssetType.TreePoint:
                return "RPGTreePoint";
            case AssetType.LootTable:
                return "RPGLootTable";
            case AssetType.WorldPosition:
                return "RPGWorldPosition";
            case AssetType.MerchantTable:
                return "RPGMerchantTable";
            case AssetType.Currency:
                return "RPGCurrency";
            case AssetType.Task:
                return "RPGTask";
            case AssetType.Quest:
                return "RPGQuest";
            case AssetType.CraftingRecipe:
                return "RPGCraftingRecipe";
            case AssetType.CraftingStation:
                return "RPGCraftingStation";
            case AssetType.ResourceNode:
                return "RPGResourceNode";
            case AssetType.Bonus:
                return "RPGBonus";
            case AssetType.GameScene:
                return "RPGGameScene";
            case AssetType.GearSet:
                return "RPGGearSet";
            case AssetType.Enchantment:
                return "RPGEnchantment";
            case AssetType.Spellbook:
                return "RPGSpellbook";
            case AssetType.Faction:
                return "RPGFaction";
            case AssetType.WeaponTemplate:
                return "RPGWeaponTemplate";
            case AssetType.Dialogue:
                return "RPGDialogue";
            case AssetType.None:
                return "";
            case AssetType.GameModifier:
                return "RPGGameModifier";
            case AssetType.Species:
                return "RPGSpecies";
            case AssetType.Combo:
                return "RPGCombo";
            default:
                return "";
        }
    }

    private void DrawActionButtons(Rect containerRect)
    {
        if (currentlyViewedAssetType == AssetType.None) return;
        containerRect.x = (GetScreenWidth() * editorDATA.CategoryWidthPercentHover) - 25;
        
        if (currentlyViewedAssetType == AssetType.CombatSettings || currentlyViewedAssetType == AssetType.ItemSettings ||
            currentlyViewedAssetType == AssetType.GeneralSettings || currentlyViewedAssetType == AssetType.EditorSettings)
        {
                containerRect.x = containerRect.width / 2.5f;
        }

        containerRect.width = GetScreenWidth() + (GetScreenWidth() * editorDATA.FilterWidthPercent);
        
        GUILayout.BeginArea(containerRect);
        GUILayout.BeginHorizontal();

        GUILayout.Space(75 * getWidthModifier());

        if (currentlyViewedAssetType != AssetType.CombatSettings && currentlyViewedAssetType != AssetType.ItemSettings &&
            currentlyViewedAssetType != AssetType.GeneralSettings && currentlyViewedAssetType != AssetType.EditorSettings)
        {
            /*GUIStyle searchstyle = skin.GetStyle("SearchButton");
            searchstyle.margin.top = (int)(8f * getHeightModifier());
            float size = 15 * getHeightModifier();
            if (GUILayout.Button("search button", searchstyle, GUILayout.Width(size), GUILayout.Height(size)))
            {
                showFilters = true;
                currentFilterEntryDataIndex = -1;
                isSelectingField = false;

                if (!filterListContainsFieldName("_name"))
                {
                    var newFilter = new RPGBuilderEditorFilters.FilterEntryData();
                    newFilter.parentFieldNames.Add("");
                    newFilter.fieldName = "_name";
                    string stringName = GetModuleName();
                    newFilter.mopduleName = stringName;
                    newFilter.categoryName = stringName;
                    newFilter.fieldType = typeof(string);
                    newFilter.fieldTypeString = newFilter.fieldType.ToString();
                    currentFilterList.Add(newFilter);

                    GUI.FocusControl(null);
                }
            }
            GUILayout.Space(50);
            */
        }
        

        GUIStyle buttonStyle = skin.GetStyle("ActionButtons");
        GUIStyle buttonStyleDelete = skin.GetStyle("ActionButtonsDelete");
        GUIStyle buttonStyleDocumentation = skin.GetStyle("DocumentationButton");

        switch (editorDATA.curEditorTheme)
        {
            case RPGBuilderEditorDATA.ThemeTypes.Dark:
                buttonStyle.normal.background = editorDATA.DarkThemeBackground;
                buttonStyle.hover.background = editorDATA.DarkThemeBackground;
                buttonStyle.normal.textColor = Color.white;
                buttonStyleDelete.normal.background = editorDATA.DarkThemeBackground;
                buttonStyleDelete.hover.background = editorDATA.DarkThemeBackground;
                buttonStyleDelete.normal.textColor = Color.white;
                buttonStyleDocumentation.normal.background = editorDATA.DarkThemeBackground;
                buttonStyleDocumentation.hover.background = editorDATA.DarkThemeBackground;
                buttonStyleDocumentation.normal.textColor = Color.white;
                break;
            case RPGBuilderEditorDATA.ThemeTypes.Light:
                buttonStyle.normal.background = editorDATA.LightThemeBackground;
                buttonStyle.hover.background = editorDATA.LightThemeBackground;
                buttonStyle.normal.textColor = Color.black;
                buttonStyleDelete.normal.background = editorDATA.LightThemeBackground;
                buttonStyleDelete.hover.background = editorDATA.LightThemeBackground;
                buttonStyleDelete.normal.textColor = Color.black;
                buttonStyleDocumentation.normal.background = editorDATA.LightThemeBackground;
                buttonStyleDocumentation.hover.background = editorDATA.LightThemeBackground;
                buttonStyleDocumentation.normal.textColor = Color.black;
                break;
        }

        float saveWidth = editorDATA.SmallActionButtonWidth * getWidthModifier();
        float dupWidth = editorDATA.MediumActionButtonWidth * getWidthModifier();
        float docWidth = editorDATA.BigActionButtonWidth * getWidthModifier();
        float buttonHeight = editorDATA.actionButtonsY * getHeightModifier();
        
        if (GUILayout.Button("Save", buttonStyle, GUILayout.Width(saveWidth), GUILayout.Height(buttonHeight)))
        {
            if (isNameAvailable(currentlyViewedAssetType))
            {
                Save(currentlyViewedAssetType);
            }
            else
            {
                EditorUtility.DisplayDialog("Warning", "This name is already in use, pick a new one", "OK");
            }
        }

        if (currentlyViewedAssetType != AssetType.CombatSettings && currentlyViewedAssetType != AssetType.ItemSettings &&
            currentlyViewedAssetType != AssetType.GeneralSettings && currentlyViewedAssetType != AssetType.EditorSettings)
        {
            if (GUILayout.Button("New", buttonStyle, GUILayout.Width(saveWidth), GUILayout.Height(buttonHeight)))
            {
                CreateNew(currentlyViewedAssetType);
            }

            if (GUILayout.Button("Duplicate", buttonStyle, GUILayout.Width(dupWidth), GUILayout.Height(buttonHeight)))
            {
                Duplicate(currentlyViewedAssetType);
            }
            if (GUILayout.Button("Delete", buttonStyleDelete, GUILayout.Width(dupWidth), GUILayout.Height(buttonHeight)))
            {
                if (EditorUtility.DisplayDialog("Confirm DELETE",
                    "Are you sure you want to delete this " + currentlyViewedAssetType, "YES", "Cancel"))
                {
                    Delete(currentlyViewedAssetType, true);
                }
            }
        }
        
        GUIStyle buttonStyle2 = skin.GetStyle("DocumentationButton");

        switch (editorDATA.curEditorTheme)
        {
            case RPGBuilderEditorDATA.ThemeTypes.Dark:
                buttonStyle2.normal.background = editorDATA.DarkThemeBackground;
                buttonStyle2.normal.textColor = Color.white;
                break;
            case RPGBuilderEditorDATA.ThemeTypes.Light:
                buttonStyle2.normal.background = editorDATA.LightThemeBackground;
                buttonStyle2.normal.textColor = Color.black;
                break;
        }

        if (GUILayout.Button("Documentation", buttonStyle2, GUILayout.Width(docWidth),
            GUILayout.Height(buttonHeight)))
        {
            switch (currentlyViewedAssetType)
            {
                case AssetType.Ability:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/abilities"); 
                    break;
                case AssetType.Effect:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/effects"); 
                    break;
                case AssetType.Item:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/items"); 
                    break;
                case AssetType.NPC:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/npcs"); 
                    break;
                case AssetType.Stat:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/stats"); 
                    break;
                case AssetType.CombatSettings:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/combat"); 
                    break;
                case AssetType.ItemSettings:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/item"); 
                    break;
                case AssetType.Skill:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/skills"); 
                    break;
                case AssetType.LevelTemplate:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/level-templates"); 
                    break;
                case AssetType.Race:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/races"); 
                    break;
                case AssetType.Class:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/classes"); 
                    break;
                case AssetType.GeneralSettings:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/general"); 
                    break;
                case AssetType.TalentTree:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/talent-trees"); 
                    break;
                case AssetType.TreePoint:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/tree-points"); 
                    break;
                case AssetType.LootTable:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/loot-tables"); 
                    break;
                case AssetType.WorldPosition:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/world-positions"); 
                    break;
                case AssetType.MerchantTable:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/merchant-tables"); 
                    break;
                case AssetType.Currency:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/currencies"); 
                    break;
                case AssetType.Task:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/task"); 
                    break;
                case AssetType.Quest:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/quest"); 
                    break;
                case AssetType.CraftingRecipe:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/crafting-recipes"); 
                    break;
                case AssetType.CraftingStation:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/crafting-stations"); 
                    break;
                case AssetType.ResourceNode:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/resource-nodes"); 
                    break;
                case AssetType.Bonus:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/bonuses"); 
                    break;
                case AssetType.GameScene:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/game-scenes"); 
                    break;
                case AssetType.GearSet:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/gear-sets"); 
                    break;
                case AssetType.Enchantment:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/enchantments"); 
                    break;
                case AssetType.Spellbook:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/spellbooks"); 
                    break;
                case AssetType.Faction:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/factions"); 
                    break;
                case AssetType.WeaponTemplate:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/weapon-template"); 
                    break;
                case AssetType.Dialogue:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/dialogues"); 
                    break;
                case AssetType.GameModifier:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/game-modifiers"); 
                    break;
                case AssetType.Species:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/species"); 
                    break;
                case AssetType.Combo:
                    Application.OpenURL("https://blink.developerhub.io/rpg-builder/combo"); 
                    break;
            }
        }
        
        if (currentlyViewedAssetType != AssetType.CombatSettings && currentlyViewedAssetType != AssetType.ItemSettings &&
            currentlyViewedAssetType != AssetType.GeneralSettings && currentlyViewedAssetType != AssetType.EditorSettings)
        {
            if (GUILayout.Button("Filters", buttonStyle, GUILayout.Width(saveWidth), GUILayout.Height(buttonHeight)))
            {
                showFilters = !showFilters;
                currentAssetType = currentlyViewedAssetType;
                if (showFilters)
                {
                    InitFilterWindow();
                }
                
            }
        }
        
        GUILayout.EndHorizontal();
        GUILayout.EndArea();
    }


    private void HandleRequirementResults(RPGBuilderEditorFilters.FilterEntryData filter,
        List<bool> requirementResults, object localFieldValue)
    {
        if (filter.fieldType == null)
        {
            filter.fieldType = GetType(filter.fieldTypeString);
        }
        
        if (filter.fieldType == typeof(int))
        {
            switch (filter.numberConditionType)
            {
                case RPGBuilderEditorFilters.NumberConditionType.Equal:
                    requirementResults.Add((int) localFieldValue == filter.intValue);
                        break;
                case RPGBuilderEditorFilters.NumberConditionType.EqualOrBelow:
                    requirementResults.Add((int) localFieldValue <= filter.intValue);
                    break;
                case RPGBuilderEditorFilters.NumberConditionType.EqualOrAbove:
                    requirementResults.Add((int) localFieldValue >= filter.intValue);
                    break;
                case RPGBuilderEditorFilters.NumberConditionType.Below:
                    requirementResults.Add((int) localFieldValue < filter.intValue);
                    break;
                case RPGBuilderEditorFilters.NumberConditionType.Above:
                    requirementResults.Add((int) localFieldValue > filter.intValue);
                    break;
            }
        }
        else if (filter.fieldType == typeof(float))
        {
            switch (filter.numberConditionType)
            {
                case RPGBuilderEditorFilters.NumberConditionType.Equal:
                    requirementResults.Add((float) localFieldValue == filter.floatValue);
                    break;
                case RPGBuilderEditorFilters.NumberConditionType.EqualOrBelow:
                    requirementResults.Add((float) localFieldValue <= filter.floatValue);
                    break;
                case RPGBuilderEditorFilters.NumberConditionType.EqualOrAbove:
                    requirementResults.Add((float) localFieldValue >= filter.floatValue);
                    break;
                case RPGBuilderEditorFilters.NumberConditionType.Below:
                    requirementResults.Add((float) localFieldValue < filter.floatValue);
                    break;
                case RPGBuilderEditorFilters.NumberConditionType.Above:
                    requirementResults.Add((float) localFieldValue > filter.floatValue);
                    break;
            }
        }
        else if (filter.fieldType == typeof(string))
        {
            if (string.IsNullOrEmpty(filter.text))
            {
                requirementResults.Add(true);
            }
            else
            {
                if (GetFieldIsStringEnum(filter.mopduleName, filter.categoryName, filter.fieldName))
                {
                    requirementResults.Add(localFieldValue.ToString().Equals(filter.text));
                }
                else
                {
                    switch (filter.stringValueType)
                    {
                        case RPGBuilderEditorFilters.StringValueType.Equal:
                            requirementResults.Add(localFieldValue.ToString().ToLower().Equals(filter.text.ToLower()));
                            break;
                        case RPGBuilderEditorFilters.StringValueType.Contains:
                            requirementResults.Add(localFieldValue.ToString().ToLower().Contains(filter.text.ToLower()));
                            break;
                        case RPGBuilderEditorFilters.StringValueType.DoNotContain:
                            requirementResults.Add(!localFieldValue.ToString().ToLower().Contains(filter.text.ToLower()));
                            break;
                    }
                }
            }
        }
        else if (filter.fieldType == typeof(bool))
        {
            requirementResults.Add((bool) localFieldValue == filter.boolValue);
        }
        else if (filter.fieldType == typeof(Sprite))
        {
            requirementResults.Add((Sprite) localFieldValue == filter.sprite);
        }
        else if (filter.fieldType == typeof(RPGAbility))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGAbility) localFieldValue == filter.Ability
                    : (RPGAbility) localFieldValue != filter.Ability);
        }
        else if (filter.fieldType == typeof(RPGEffect))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGEffect) localFieldValue == filter.Effect
                    : (RPGEffect) localFieldValue != filter.Effect);
        }
        else if (filter.fieldType == typeof(RPGNpc))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGNpc) localFieldValue == filter.NPC
                    : (RPGNpc) localFieldValue != filter.NPC);
        }
        else if (filter.fieldType == typeof(RPGStat))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGStat) localFieldValue == filter.Stat
                    : (RPGStat) localFieldValue != filter.Stat);
        }
        else if (filter.fieldType == typeof(RPGTreePoint))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGTreePoint) localFieldValue == filter.TreePoint
                    : (RPGTreePoint) localFieldValue != filter.TreePoint);
        }
        else if (filter.fieldType == typeof(RPGSpellbook))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGSpellbook) localFieldValue == filter.Spellbook
                    : (RPGSpellbook) localFieldValue != filter.Spellbook);
        }
        else if (filter.fieldType == typeof(RPGFaction))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGFaction) localFieldValue == filter.Faction
                    : (RPGFaction) localFieldValue != filter.Faction);
        }
        else if (filter.fieldType == typeof(RPGWeaponTemplate))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGWeaponTemplate) localFieldValue == filter.WeaponTemplate
                    : (RPGWeaponTemplate) localFieldValue != filter.WeaponTemplate);
        }
        else if (filter.fieldType == typeof(RPGItem))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGItem) localFieldValue == filter.Item
                    : (RPGItem) localFieldValue != filter.Item);
        }
        else if (filter.fieldType == typeof(RPGSkill))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGSkill) localFieldValue == filter.Skill
                    : (RPGSkill) localFieldValue != filter.Skill);
        }
        else if (filter.fieldType == typeof(RPGLevelsTemplate))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGLevelsTemplate) localFieldValue == filter.LevelTemplate
                    : (RPGLevelsTemplate) localFieldValue != filter.LevelTemplate);
        }
        else if (filter.fieldType == typeof(RPGRace))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGRace) localFieldValue == filter.Race
                    : (RPGRace) localFieldValue != filter.Race);
        }
        else if (filter.fieldType == typeof(RPGClass))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGClass) localFieldValue == filter.Class
                    : (RPGClass) localFieldValue != filter.Class);
        }
        else if (filter.fieldType == typeof(RPGLootTable))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGLootTable) localFieldValue == filter.LootTable
                    : (RPGLootTable) localFieldValue != filter.LootTable);
        }
        else if (filter.fieldType == typeof(RPGMerchantTable))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGMerchantTable) localFieldValue == filter.MerchantTable
                    : (RPGMerchantTable) localFieldValue != filter.MerchantTable);
        }
        else if (filter.fieldType == typeof(RPGCurrency))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGCurrency) localFieldValue == filter.Currency
                    : (RPGCurrency) localFieldValue != filter.Currency);
        }
        else if (filter.fieldType == typeof(RPGCraftingRecipe))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGCraftingRecipe) localFieldValue == filter.CraftingRecipe
                    : (RPGCraftingRecipe) localFieldValue != filter.CraftingRecipe);
        }
        else if (filter.fieldType == typeof(RPGCraftingStation))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGCraftingStation) localFieldValue == filter.CraftingStation
                    : (RPGCraftingStation) localFieldValue != filter.CraftingStation);
        }
        else if (filter.fieldType == typeof(RPGTalentTree))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGTalentTree) localFieldValue == filter.TalentTree
                    : (RPGTalentTree) localFieldValue != filter.TalentTree);
        }
        else if (filter.fieldType == typeof(RPGBonus))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGBonus) localFieldValue == filter.Bonus
                    : (RPGBonus) localFieldValue != filter.Bonus);
        }
        else if (filter.fieldType == typeof(RPGGearSet))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGGearSet) localFieldValue == filter.GearSet
                    : (RPGGearSet) localFieldValue != filter.GearSet);
        }
        else if (filter.fieldType == typeof(RPGEnchantment))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGEnchantment) localFieldValue == filter.Enchantment
                    : (RPGEnchantment) localFieldValue != filter.Enchantment);
        }
        else if (filter.fieldType == typeof(RPGTask))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGTask) localFieldValue == filter.Task
                    : (RPGTask) localFieldValue != filter.Task);
        }
        else if (filter.fieldType == typeof(RPGQuest))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGQuest) localFieldValue == filter.Quest
                    : (RPGQuest) localFieldValue != filter.Quest);
        }
        else if (filter.fieldType == typeof(RPGWorldPosition))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGWorldPosition) localFieldValue == filter.WorldPosition
                    : (RPGWorldPosition) localFieldValue != filter.WorldPosition);
        }
        else if (filter.fieldType == typeof(RPGResourceNode))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGResourceNode) localFieldValue == filter.ResourceNode
                    : (RPGResourceNode) localFieldValue != filter.ResourceNode);
        }
        else if (filter.fieldType == typeof(RPGGameScene))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGGameScene) localFieldValue == filter.GameScene
                    : (RPGGameScene) localFieldValue != filter.GameScene);
        }
        else if (filter.fieldType == typeof(RPGDialogue))
        {
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? (RPGDialogue) localFieldValue == filter.Dialogue
                    : (RPGDialogue) localFieldValue != filter.Dialogue);
        }
        else if (filter.fieldType.IsEnum)
        {
            int filterIndex = filter.enumIndex;
            Enum enumRefLocal = (Enum) localFieldValue;
            int localIndex = GetEnumValueIndexByName(localFieldValue.GetType().GetEnumValues(), enumRefLocal.ToString());
            requirementResults.Add(
                filter.entryReferenceConditionType == RPGBuilderEditorFilters.EntryReferenceConditionType.Equal
                    ? localIndex == filterIndex
                    : localIndex != filterIndex);
        }
        
    }
    

    private void HandleFiltersCheck(List<RPGBuilderEditorFilters.FilterEntryData> filters, object obj,
        List<bool> requirementResults)
    {

        bool debug = false;

        foreach (var filter in filters)
        {
            if (string.IsNullOrEmpty(filter.fieldName)) continue;
            var localField = obj.GetType().GetField(filter.fieldName);

            if (localField == null)
            {
                bool found = false;
                // FIELD NOT EXISTING IN MAIN CLASS
                foreach (RPGBuilderEditorFilters.EntryFieldList nestedCategory in entryFieldLists)
                {
                    foreach (RPGBuilderEditorFilters.EntryField field in nestedCategory.fieldList)
                    {
                        if (FilterScanObject(obj, field, filter, requirementResults))
                        {
                            found = true;
                            if (debug) Debug.Log("found nested: " + field.fieldName + " | " + field.fieldType);
                            break;
                        }
                    }

                    if (found) break;
                }
            }
            else
            {
                if (debug) Debug.Log("found: " + filter.fieldName + " | " + filter.fieldType);
                object localFieldValue = localField.GetValue(obj);
                HandleRequirementResults(filter, requirementResults, localFieldValue);
            }
        }
    }

    private bool FilterScanObject(object obj, RPGBuilderEditorFilters.EntryField fieldChecked,
    RPGBuilderEditorFilters.FilterEntryData filter, List<bool> requirementResults, int currentDepth = 0,
    int maxDepth = 10)
{
    bool debug = false;

    // if we hit max recursion depth, exit
    if (++currentDepth > maxDepth) return false;

    // exit if we dont have a good field filter
    if (string.IsNullOrEmpty(filter.fieldName)) return false;

    Type objType = obj.GetType();

    // if there is a namespace make sure its RPGBuilder
    if (!objType.IsClass || (objType.Namespace != null && !objType.Namespace.Contains("RPGBuilder"))) return false;

    if (debug) Debug.Log("scanning object: " + objType.Name);

    // search the fields for the current object
    foreach (FieldInfo field in objType.GetFields())
    {
        //if (field.Name == filter.fieldName && field.GetType() == filter.fieldType) {
        if (field.Name == filter.fieldName)
        {

            if (debug) Debug.Log("found: " + filter.fieldName + " | " + filter.fieldType);

            HandleRequirementResults(filter, requirementResults, field.GetValue(obj));
            return true;
        }
        else
        {

            // if this isnt what we are looking for we want to search the value of this field
            // we have two scenarios.  list or object.

            // get the value of the current field
            object fieldValue = field.GetValue(obj);

            // skip any system type fields as we do not need to recurse those
            if (fieldValue != null && fieldValue.GetType().IsClass &&
                (fieldValue.GetType().ToString().Contains("System.Collections.Generic.List") ||
                 (!fieldValue.GetType().ToString().Contains("UnityEngine.") &&
                  !fieldValue.GetType().ToString().Contains("System."))))
            {

                // we cant recurse if the object is null
                if (fieldValue == null) continue;

                if (debug) Debug.Log("fieldname: " + field.Name);

                // cast to list to see if it is a list
                IList objectList = fieldValue as IList;

                // if we have a list, loop each child instance and search recursively
                if (objectList != null)
                {
                    if (debug) Debug.Log("scanning list");

                    foreach (object childObj in objectList)
                    {
                        if (FilterScanObject(childObj, fieldChecked, filter, requirementResults, currentDepth,
                            maxDepth))
                        {
                            return true;
                        }
                    }
                }
                else
                {
                    // we just want to search this single object
                    return FilterScanObject(fieldValue, fieldChecked, filter, requirementResults, currentDepth,
                        maxDepth);
                }
            }
        }
    }

    return false;
}

 public static Dictionary<int, bool> cachedRequirementResults = null;
 
    private bool ElementMatchFilters(AssetType assetType, elementListDATA element, int index)
    {
 
        // create the cache if it doesnt exist
        if (cachedRequirementResults == null) cachedRequirementResults = new Dictionary<int, bool>();
        // if we have this element, return the cached result
        if (cachedRequirementResults.ContainsKey(element.ID)) {
            return cachedRequirementResults[element.ID];
        }
 
        List<bool> requirementResults =  new List<bool>();
        switch (assetType)
        {
            case AssetType.Ability:
                HandleFiltersCheck(editorFilters.abilityFilters, allAbilities[index], requirementResults);
                break;
            case AssetType.Effect:
                HandleFiltersCheck(editorFilters.effectFilters, allEffects[index], requirementResults);
                break;
            case AssetType.Item:
                HandleFiltersCheck(editorFilters.itemFilters, allItems[index], requirementResults);
                break;
            case AssetType.NPC:
                HandleFiltersCheck(editorFilters.NPCFilters, allNPCs[index], requirementResults);
                break;
            case AssetType.Stat:
                HandleFiltersCheck(editorFilters.statFilters, allStats[index], requirementResults);
                break;
            case AssetType.Skill:
                HandleFiltersCheck(editorFilters.skillFilters, allSkills[index], requirementResults);
                break;
            case AssetType.LevelTemplate:
                HandleFiltersCheck(editorFilters.levelTemplateFilters, allLevelsTemplate[index], requirementResults);
                break;
            case AssetType.Race:
                HandleFiltersCheck(editorFilters.raceFilters, allRaces[index], requirementResults);
                break;
            case AssetType.Class:
                HandleFiltersCheck(editorFilters.classFilters, allClasses[index], requirementResults);
                break;
            case AssetType.TalentTree:
                HandleFiltersCheck(editorFilters.talentTreeFilters, allTalentTrees[index], requirementResults);
                break;
            case AssetType.TreePoint:
                HandleFiltersCheck(editorFilters.talentPointFilters, allTreePoints[index], requirementResults);
                break;
            case AssetType.LootTable:
                HandleFiltersCheck(editorFilters.lootTablesFilters, allLootTables[index], requirementResults);
                break;
            case AssetType.WorldPosition:
                HandleFiltersCheck(editorFilters.worldPositionFilters, allWorldPositions[index], requirementResults);
                break;
            case AssetType.MerchantTable:
                HandleFiltersCheck(editorFilters.merchantTableFilters, allMerchantTables[index], requirementResults);
                break;
            case AssetType.Currency:
                HandleFiltersCheck(editorFilters.currencyFilters, allCurrencies[index], requirementResults);
                break;
            case AssetType.Task:
                HandleFiltersCheck(editorFilters.taskFilters, allTasks[index], requirementResults);
                break;
            case AssetType.Quest:
                HandleFiltersCheck(editorFilters.questFilters, allQuests[index], requirementResults);
                break;
            case AssetType.CraftingRecipe:
                HandleFiltersCheck(editorFilters.recipeFilters, allCraftingRecipes[index], requirementResults);
                break;
            case AssetType.CraftingStation:
                HandleFiltersCheck(editorFilters.craftingStationFilters, allCraftingStations[index], requirementResults);
                break;
            case AssetType.ResourceNode:
                HandleFiltersCheck(editorFilters.resourceNodeFilters, allResourceNodes[index], requirementResults);
                break;
            case AssetType.Bonus:
                HandleFiltersCheck(editorFilters.bonusFilters, allBonuses[index], requirementResults);
                break;
            case AssetType.GameScene:
                HandleFiltersCheck(editorFilters.gameSceneFilters, allGameScenes[index], requirementResults);
                break;
            case AssetType.GearSet:
                HandleFiltersCheck(editorFilters.gearsSetFilters, allGearSets[index], requirementResults);
                break;
            case AssetType.Enchantment:
                HandleFiltersCheck(editorFilters.enchantmentFilters, allEnchantments[index], requirementResults);
                break;
            case AssetType.Spellbook:
                HandleFiltersCheck(editorFilters.spellbookFilters, allSpellbooks[index], requirementResults);
                break;
            case AssetType.Faction:
                HandleFiltersCheck(editorFilters.factionFilters, allFactions[index], requirementResults);
                break;
            case AssetType.WeaponTemplate:
                HandleFiltersCheck(editorFilters.weaponTemplateFilters, allWeaponTemplates[index], requirementResults);
                break;
            case AssetType.Dialogue:
                HandleFiltersCheck(editorFilters.dialogueFilters, allDialogues[index], requirementResults);
                break;
            case AssetType.GameModifier:
                HandleFiltersCheck(editorFilters.gameModifierFilters, allGameModifiers[index], requirementResults);
                break;
            case AssetType.Species:
                HandleFiltersCheck(editorFilters.speciesFilters, allSpecies[index], requirementResults);
                break;
            case AssetType.Combo:
                HandleFiltersCheck(editorFilters.comboFilters, allCombos[index], requirementResults);
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(assetType), assetType, null);
        }
        
        // cache the result
        cachedRequirementResults.Add(element.ID, !requirementResults.Contains(false));
        
        return !requirementResults.Contains(false);
    }

    private bool EntryNameMatchSearchText(string entryName)
    {
        return string.IsNullOrEmpty(moduleSearchText) || entryName.ToLower().Contains(moduleSearchText.ToLower());
    }

    private void DrawElementList(List<elementListDATA> elementLIST, AssetType assetType)
    {
        if (elementLIST == null || showCategories || showSubCategories || currentlyViewedAssetType == AssetType.None) return;
        
        UpdateElementListData();

        float localViewWidth = elementListWidth;

        if (showFilters)
        {
            localViewWidth -= editorDATA.FilterWidthPercent;
        }

        float distanceFromTop = GetScreenHeight() * editorDATA.TopBarHeightPercent;
        float panelHeight = GetScreenHeight() - distanceFromTop;
        Rect searchRect = new Rect(0, distanceFromTop, localViewWidth, panelHeight);

        GUILayout.BeginArea(searchRect);
        if (cachedElementListScrollPosition != elementListScrollPosition && cachedElementListScrollPosition != Vector2.zero)
        {
            elementListScrollPosition = cachedElementListScrollPosition;
            cachedElementListScrollPosition = Vector2.zero;
        }

        elementListScrollPosition = GUILayout.BeginScrollView(elementListScrollPosition, false, false,
            GUILayout.Width(localViewWidth), GUILayout.Height(searchRect.height-20));

        if (filtersNeedChecking)
        {
            if (currentFilterList.Count == 0)
            {
                foreach (var t in elementLIST)
                {
                    if(!EntryNameMatchSearchText(t.name)) continue;
                    t.matchFilters = true;
                }
            }
            else
            {
                int curElementChecked = 0, maxElementsToCheck = elementLIST.Count;
                float progress;
                progress = elementLIST.Count > 0 ? (float)curElementChecked / (float)maxElementsToCheck : 0;
                EditorUtility.DisplayProgressBar("RPG Builder Filters",
                    "Building entry list: " + curElementChecked + " / " + maxElementsToCheck, progress);
                for (var index = 0; index < elementLIST.Count; index++)
                {
                    var element = elementLIST[index];
                    if (currentFilterList.Count == 0)
                    {
                        element.matchFilters = true;
                        continue;
                    }

                    element.matchFilters = ElementMatchFilters(assetType, elementLIST[index], index);
                    
                    if(!EntryNameMatchSearchText(element.name)) element.matchFilters = false;

                    curElementChecked++;
                    progress = (float)((float)curElementChecked / (float)maxElementsToCheck);
                    EditorUtility.DisplayProgressBar("RPG Builder Filters",
                        "Building entry list: " + curElementChecked + " / " + maxElementsToCheck, progress);
                }

                EditorUtility.ClearProgressBar();
            }

            targetFiltersNeedChecking = !filtersNeedChecking;
            updateFiltersNeedChecking = true;
        }
        else
        {
            if (currentFilterList.Count == 0)
            {
                foreach (var t in elementLIST)
                {
                    t.matchFilters = EntryNameMatchSearchText(t.name);
                }
            }
        }

        var cont = new GUIContent();
        float elementHeight = editorDATA.CategoriesY * getHeightModifier();
        float elementWidth = elementLIST.Count > 17 ? localViewWidth - 15 : localViewWidth;
        
        for (var i = 0; i < elementLIST.Count; i++)
        {
            if (!elementLIST[i].matchFilters) continue;
            var buttonStyle = skin.GetStyle("ElementListButton");
            bool selected = curViewElementIndex == i;
            if (selected)
            {
                buttonStyle = skin.GetStyle("ElementListButtonSelected");
                    
                switch (editorDATA.curEditorTheme)
                {
                    case RPGBuilderEditorDATA.ThemeTypes.Dark:
                        buttonStyle.normal.background = editorDATA.DarkThemeBackgroundHover;
                        buttonStyle.hover.background = editorDATA.DarkThemeBackgroundHover;
                        break;
                    case RPGBuilderEditorDATA.ThemeTypes.Light:
                        buttonStyle.normal.background = editorDATA.LightThemeBackgroundHover;
                        buttonStyle.hover.background = editorDATA.LightThemeBackgroundHover;
                        break;
                }
            }
            else
            {
                switch (editorDATA.curEditorTheme)
                {
                    case RPGBuilderEditorDATA.ThemeTypes.Dark:
                        buttonStyle.normal.background = editorDATA.DarkThemeBackground;
                        buttonStyle.hover.background = editorDATA.DarkThemeBackgroundHover;
                        break;
                    case RPGBuilderEditorDATA.ThemeTypes.Light:
                        buttonStyle.normal.background = editorDATA.LightThemeBackground;
                        buttonStyle.hover.background = editorDATA.LightThemeBackgroundHover;
                        break;
                }
            }
                

            var abnamestring = elementLIST[i].name;
            if (abnamestring.Length > 30)
            {
                abnamestring = abnamestring.Remove(29);
                abnamestring += "...";
            }

            if (elementLIST[i].texture != null)
                cont.image = elementLIST[i].texture;
            else if (elementLIST[i].showIcon) 
                cont.image = editorDATA.defaultElementIcon.texture;

            cont.text = "  " + abnamestring;

            if (GUILayout.Button(cont, buttonStyle, GUILayout.Width(elementWidth), GUILayout.Height(elementHeight)))
            {
                switch (assetType)
                {
                    case AssetType.Ability:
                        SelectAbility(i);
                        break;
                    case AssetType.Bonus:
                        SelectBonus(i);
                        break;
                    case AssetType.Class:
                        SelectClass(i);
                        break;
                    case AssetType.CraftingRecipe:
                        SelectCraftingRecipe(i);
                        break;
                    case AssetType.CraftingStation:
                        SelectCraftingStation(i);
                        break;
                    case AssetType.Currency:
                        SelectCurrency(i);
                        break;
                    case AssetType.Effect:
                        SelectEffect(i);
                        break;
                    case AssetType.Item:
                        SelectItem(i);
                        break;
                    case AssetType.LevelTemplate:
                        SelectLevelTemplate(i);
                        break;
                    case AssetType.LootTable:
                        SelectLootTable(i);
                        break;
                    case AssetType.MerchantTable:
                        SelectMerchantTable(i);
                        break;
                    case AssetType.NPC:
                        SelectNPC(i);
                        break;
                    case AssetType.Quest:
                        SelectQuest(i);
                        break;
                    case AssetType.Race:
                        SelectRace(i);
                        break;
                    case AssetType.ResourceNode:
                        SelectResourceNode(i);
                        break;
                    case AssetType.Skill:
                        SelectSkill(i);
                        break;
                    case AssetType.Stat:
                        SelectStat(i);
                        break;
                    case AssetType.TalentTree:
                        SelectTalentTree(i);
                        break;
                    case AssetType.Task:
                        SelectTask(i);
                        break;
                    case AssetType.TreePoint:
                        SelectTreePoint(i);
                        break;
                    case AssetType.WorldPosition:
                        SelectWorldPosition(i);
                        break;
                    case AssetType.GameScene:
                        SelectGameScene(i);
                        break;
                    case AssetType.GearSet:
                        SelectGearSet(i);
                        break;
                    case AssetType.Enchantment:
                        SelectEnchantment(i);
                        break;
                    case AssetType.Spellbook:
                        SelectSpellbook(i);
                        break;
                    case AssetType.Faction:
                        SelectFaction(i);
                        break;
                    case AssetType.WeaponTemplate:
                        SelectWeaponTemplate(i);
                        break;
                    case AssetType.Dialogue:
                        SelectDialogue(i);
                        break;
                    case AssetType.GameModifier:
                        SelectGameModifier(i);
                        break;
                    case AssetType.Species:
                        SelectSpecies(i);
                        break;
                    case AssetType.Combo:
                        SelectCombo(i);
                        break;
                }
            }
        }

        GUILayout.EndScrollView();
        GUILayout.EndArea();
    }

    private bool HandleModuleBanner(string BannerTitle, bool isShowing)
    {
        GUIStyle buttonOverlayStyle = skin.GetStyle("BannerButtonOverlay");
        Rect baseInfoRect = DrawModuleBanner(BannerTitle, isShowing);
        if (GUI.Button(baseInfoRect, "", buttonOverlayStyle))
        {
            return !isShowing;
        }
        return isShowing;
    }
    
    private bool HandleModuleBanner2(string BannerTitle, bool isShowing)
    {
        GUIStyle buttonOverlayStyle = skin.GetStyle("BannerButtonOverlay");
        Rect baseInfoRect = DrawModuleBanner2(BannerTitle, isShowing);
        if (GUI.Button(baseInfoRect, "", buttonOverlayStyle))
        {
            return !isShowing;
        }
        return isShowing;
    }

    private void StartHorizontalMargin(float space, bool beginVertical)
    {
        EditorGUILayout.BeginHorizontal();
        GUILayout.Space(space);
        if (beginVertical) EditorGUILayout.BeginVertical();
    }
    private void EndHorizontalMargin(float space, bool endVertical)
    {
        if (endVertical) EditorGUILayout.EndVertical();
        GUILayout.Space(space);
        EditorGUILayout.EndHorizontal();
    }

    private void DrawIDField(float smallFieldHeight, float fieldWidth, int id)
    {
        fieldWidth *= 2;
        EditorGUILayout.BeginHorizontal();
        EditorGUI.BeginDisabledGroup(true);
        EditorGUILayout.LabelField("ID:", GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        EditorGUILayout.IntField(id,GUILayout.Height(smallFieldHeight));
        EditorGUI.EndDisabledGroup();
        EditorGUILayout.EndHorizontal();
    }

    private Sprite DrawIconField(Sprite icon, float iconSize)
    {
        return (Sprite) EditorGUILayout.ObjectField(icon, typeof(Sprite), false, GUILayout.Width(iconSize), GUILayout.Height(iconSize));
    }

    private string DrawHorizontalTextField(string labelName, string tooltip, float smallFieldHeight, string content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.TextField(content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }

    private string DrawHorizontalTextField(string labelName, string tooltip, float smallFieldHeight, float width, string content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(width), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.TextField(content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    private string DrawHorizontalDescriptionField(string labelName, string tooltip, float smallFieldHeight, string content)
    {
        GUILayout.BeginHorizontal();
        EditorStyles.textArea.wordWrap = true;
        EditorStyles.textArea.clipping = TextClipping.Clip;
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.TextField(content, EditorStyles.textArea, GUILayout.Height(smallFieldHeight*5));
        EditorStyles.textArea.wordWrap = false;
        GUILayout.EndHorizontal();
        return content;
    }

    private string DrawFileNameField(string labelName, string tooltip, float smallFieldHeight, string content)
    {
        EditorGUILayout.BeginHorizontal();
        EditorGUI.BeginDisabledGroup(true);
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.TextField(content,GUILayout.Height(smallFieldHeight));
        EditorGUI.EndDisabledGroup();
        GUILayout.EndHorizontal();
        return content;
    }
    
    private int DrawHorizontalIntField(string labelName, string tooltip, float smallFieldHeight, int content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.IntField(content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    private int DrawHorizontalIntField(string labelName, string tooltip, float smallFieldHeight, float width, int content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(width), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.IntField(content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    
    private Color DrawHorizontalColorField(string labelName, string tooltip, float smallFieldHeight, Color content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.ColorField(content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    
    private Sprite DrawHorizontalSpriteField(string labelName, string tooltip, float smallFieldHeight, Sprite content, float spriteSize)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = (Sprite) EditorGUILayout.ObjectField(
            content, typeof(Sprite), false, GUILayout.Width(spriteSize), GUILayout.Height(spriteSize));
        GUILayout.EndHorizontal();
        return content;
    }
    
    private float DrawHorizontalFloatField(string labelName, string tooltip, float smallFieldHeight, float content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.FloatField(content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    
    private float DrawHorizontalFloatField(string labelName, string tooltip, float smallFieldHeight, float width, float content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(width), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.FloatField(content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    
    private bool DrawHorizontalToggle(string labelName, string tooltip, float smallFieldHeight, bool toggle)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        toggle = EditorGUILayout.Toggle(toggle, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return toggle;
    }
    
    private bool DrawHorizontalToggle(string labelName, string tooltip, float smallFieldHeight, float width, bool toggle)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(width), GUILayout.Height(smallFieldHeight));
        toggle = EditorGUILayout.Toggle(toggle, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return toggle;
    }
    
    private float DrawHorizontalSlider(string labelName, string tooltip, float smallFieldHeight, float content, float min, float max)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.Slider(content, min, max, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    
    private float DrawHorizontalSlider(string labelName, string tooltip, float smallFieldHeight, float width, float content, float min, float max)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(width), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.Slider(content, min, max, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    
    private Vector3 DrawHorizontalVector3(string labelName, string tooltip, float smallFieldHeight, Vector3 content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.Vector3Field("", content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }
    
    private Vector3 DrawHorizontalVector3(string labelName, string tooltip, float smallFieldHeight, float width, Vector3 content)
    {
        GUILayout.BeginHorizontal();
        if(!string.IsNullOrEmpty(labelName)) EditorGUILayout.LabelField(new GUIContent(labelName, tooltip), GUILayout.Width(width), GUILayout.Height(smallFieldHeight));
        content = EditorGUILayout.Vector3Field("", content, GUILayout.Height(smallFieldHeight));
        GUILayout.EndHorizontal();
        return content;
    }

    float getViewWidth()
    {
        if (showFilters)
        {
            return 1 - editorDATA.FilterWidthPercent;
        }

        return 1;
    }
    
    float getElementListWidth()
    {
        return GetScreenWidth() * editorDATA.ElementListWidthPercent;
    }
    Rect getViewRect()
    {
        float panelHeight = GetScreenHeight();
        return new Rect(elementListWidth, 0, viewWidth, panelHeight);
    }
    Rect getSettingsViewRect()
    {
        float panelHeight = GetScreenHeight() - (GetScreenHeight() * editorDATA.TopBarHeightPercent);
        return new Rect(0, 0, viewWidth, panelHeight);
    }
    float getButtonHeight()
    {
        return editorDATA.actionButtonsY * getHeightModifier();
    }
    float getContentWidth()
    {
        return editorDATA.fieldContentWidth * getWidthModifier();
    }
    float getSmallFieldHeight()
    {
        return editorDATA.viewSmallFieldHeight * getHeightModifier();
    }
    float getSmallButtonHeight()
    {
        return editorDATA.smallButtonHeight * getHeightModifier();
    }
    float getBigHorizontalSpace()
    {
        return 100 * getWidthModifier();
    }
    float getMiddleButtonSpace()
    {
        return viewWidth / 4;
    }
    float getMiddleButtonMaxWidth()
    {
        return viewWidth / 2;
    }

    private void UpdateViewData()
    {
        viewWidth = GetScreenWidth() * getViewWidth();
        viewWidth *= editorDATA.ViewWidthPercent;
        viewRect = getViewRect();
    }
    private void UpdateElementListData()
    {
        elementListWidth = getElementListWidth();
    }
    private void UpdateSettingsViewData()
    {
        viewWidth = GetScreenWidth() * 1;
        if (showCategories || showSubCategories)
        {
            viewWidth -= GetScreenWidth() * editorDATA.CategoryWidthPercentHover;
        }
        
        viewRect = getSettingsViewRect();
    }

    private void UpdateFieldData()
    {
        buttonHeight = getButtonHeight();
        contentWidth = getContentWidth();
        smallFieldHeight = getSmallFieldHeight();
        smallButtonHeight = getSmallButtonHeight();
        bigHorizontalSpace = getBigHorizontalSpace();
        middleButtonSpace = getMiddleButtonSpace();
        middleButtonMaxWidth = getMiddleButtonMaxWidth();
    }

    private void DrawAbilityView()
    {
        if (currentlyViewedAbility == null)
        {
            if (allAbilities.Count == 0)
            {
                CreateNew(AssetType.Ability);
                return;
            }

            currentlyViewedAbility = Instantiate(allAbilities[0]) as RPGAbility;
        }

        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(GetScreenHeight() - topSpace - 20));

        editorFilters.abilityModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.abilityModuleSection.showBaseInfo);

        if (editorFilters.abilityModuleSection.showBaseInfo)
        {
            GUILayout.Space(5);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedAbility.icon = DrawIconField(currentlyViewedAbility.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedAbility.ID);
            currentlyViewedAbility._name = DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedAbility._name);
            currentlyViewedAbility.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight, currentlyViewedAbility.displayName);
            currentlyViewedAbility._fileName = DrawFileNameField("File Name", "", smallFieldHeight, "RPG_ABILITY_" + currentlyViewedAbility._name);
            
            currentlyViewedAbility.learnedByDefault = DrawHorizontalToggle("Known", "Is this ability automatically known?", smallFieldHeight, currentlyViewedAbility.learnedByDefault);
            GUILayout.BeginHorizontal();
            GUILayout.Label("Ability Type", GUILayout.Width(editorDATA.labelFieldWidth), GUILayout.Height(smallFieldHeight));
            currentlyViewedAbility.abilityType =
                (RPGAbility.AbilityType) EditorGUILayout.EnumPopup(currentlyViewedAbility.abilityType, GUILayout.Height(smallFieldHeight));
            GUILayout.EndHorizontal();
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.abilityModuleSection.showRanks =
            HandleModuleBanner("RANKS", editorFilters.abilityModuleSection.showRanks);
        GUILayout.Space(10);

        if (editorFilters.abilityModuleSection.showRanks)
        {
            StartHorizontalMargin(bigHorizontalSpace, false);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("Add Rank", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
            {
                var newRankData = new RPGAbility.RPGAbilityRankData();
                currentlyViewedAbility.ranks.Add(newRankData);
            }

            if (currentlyViewedAbility.ranks.Count > 0)
            {
                GUILayout.Space(20);

                if (GUILayout.Button("Remove Rank", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedAbility.ranks.RemoveAt(currentlyViewedAbility.ranks.Count - 1);
                    return;
                }
            }

            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, false);

            GUILayout.Space(10);

            for (var i = 0; i < currentlyViewedAbility.ranks.Count; i++)
            {
                StartHorizontalMargin(bigHorizontalSpace, false);

                var rankNbr = i + 1;
                GUILayout.BeginHorizontal();
                if (GUILayout.Button("Rank: " + rankNbr, skin.GetStyle("AbilityRankButton"),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedAbility.ranks[i].ShowedInEditor = !currentlyViewedAbility.ranks[i].ShowedInEditor;
                    GUI.FocusControl(null);
                }

                if (i > 0)
                {
                    GUILayout.Space(5);
                    if (GUILayout.Button("Copy Above", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                        GUILayout.Height(smallButtonHeight)))
                    {
                        currentlyViewedAbility.copyData(currentlyViewedAbility.ranks[i],
                            currentlyViewedAbility.ranks[i - 1]);
                        GUI.FocusControl(null);
                    }
                }

                GUILayout.EndHorizontal();
                EndHorizontalMargin(bigHorizontalSpace, false);

                if (currentlyViewedAbility.ranks[i].ShowedInEditor)
                {
                    GUILayout.Space(10);
                    editorFilters.abilityModuleSection.showUnlockSettings =
                        HandleModuleBanner("TALENT TREE SETTINGS",
                            editorFilters.abilityModuleSection.showUnlockSettings);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showUnlockSettings)
                    {
                        StartHorizontalMargin(bigHorizontalSpace, false);
                        currentlyViewedAbility.ranks[i].unlockCost = DrawHorizontalIntField("Unlock Cost",
                            "The cost to unlock this ability inside your combat trees", smallFieldHeight,
                            currentlyViewedAbility.ranks[i].unlockCost);
                        EndHorizontalMargin(bigHorizontalSpace, false);
                        GUILayout.Space(10);
                    }

                    editorFilters.abilityModuleSection.showUseRequirements =
                        HandleModuleBanner("USE REQUIREMENTS", editorFilters.abilityModuleSection.showUseRequirements);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showUseRequirements)
                    {
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Requirement", skin.GetStyle("AddButton"),
                            GUILayout.ExpandWidth(true), GUILayout.MaxWidth(middleButtonMaxWidth),
                            GUILayout.Height(25)))
                        {
                            currentlyViewedAbility.ranks[i].useRequirements
                                .Add(new RequirementsManager.AbilityUseRequirementDATA());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        for (var a = 0; a < currentlyViewedAbility.ranks[i].useRequirements.Count; a++)
                        {
                            GUILayout.Space(10);
                            StartHorizontalMargin(bigHorizontalSpace, true);

                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();

                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedAbility.ranks[i].useRequirements.RemoveAt(a);
                                return;
                            }

                            EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                            currentlyViewedAbility.ranks[i].useRequirements[a].requirementType =
                                (RequirementsManager.AbilityUseRequirementType) EditorGUILayout.EnumPopup(
                                    currentlyViewedAbility.ranks[i].useRequirements[a].requirementType);
                            EditorGUILayout.EndHorizontal();

                            if (currentlyViewedAbility.ranks[i].useRequirements.Count > 0)
                            {
                                switch (currentlyViewedAbility.ranks[i].useRequirements[a].requirementType)
                                {
                                    case RequirementsManager.AbilityUseRequirementType.item:
                                    {
                                        currentlyViewedAbility.ranks[i].useRequirements[a].itemRequiredREF =
                                            (RPGItem) EditorGUILayout.ObjectField("Item:",
                                                RPGBuilderUtilities.GetItemFromIDEditor(
                                                    currentlyViewedAbility.ranks[i].useRequirements[a]
                                                        .itemRequiredID, allItems), typeof(RPGItem), false);
                                        
                                        currentlyViewedAbility.ranks[i].useRequirements[a].itemRequiredCount =
                                            DrawHorizontalIntField("Count:", "", smallFieldHeight, currentlyViewedAbility.ranks[i].useRequirements[a].itemRequiredCount);

                                        currentlyViewedAbility.ranks[i].useRequirements[a].consumeItem =
                                            DrawHorizontalToggle("Consumed", "", smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].useRequirements[a].consumeItem);

                                        currentlyViewedAbility.ranks[i].useRequirements[a].itemRequiredID =
                                            currentlyViewedAbility.ranks[i].useRequirements[a].itemRequiredREF != null
                                                ? currentlyViewedAbility.ranks[i].useRequirements[a].itemRequiredREF.ID
                                                : -1;
                                        break;
                                    }
                                    case RequirementsManager.AbilityUseRequirementType.statCost:
                                    {
                                        currentlyViewedAbility.ranks[i].useRequirements[a].statCostREF =
                                            (RPGStat) EditorGUILayout.ObjectField("Stat:",
                                                RPGBuilderUtilities.GetStatFromIDEditor(
                                                    currentlyViewedAbility.ranks[i].useRequirements[a].statCostID,
                                                    allStats), typeof(RPGStat), false);

                                        currentlyViewedAbility.ranks[i].useRequirements[a].useCost =
                                            DrawHorizontalIntField("Cost:", "", smallFieldHeight, currentlyViewedAbility.ranks[i].useRequirements[a].useCost);
                                        
                                        currentlyViewedAbility.ranks[i].useRequirements[a].costType =
                                            (RPGAbility.COST_TYPES) EditorGUILayout.EnumPopup(
                                                new GUIContent("Cost Type",
                                                    "How does the player pay to use this ability?"),
                                                currentlyViewedAbility.ranks[i].useRequirements[a].costType);

                                        
                                        currentlyViewedAbility.ranks[i].useRequirements[a].statCostID =
                                            currentlyViewedAbility.ranks[i].useRequirements[a].statCostREF != null
                                                ? currentlyViewedAbility.ranks[i].useRequirements[a].statCostREF.ID
                                                : -1;
                                        break;
                                    }
                                    case RequirementsManager.AbilityUseRequirementType.weaponTypeEquipped:
                                    {
                                        var currentWeaponTypeIndex = getIndexFromName("WeaponType", currentlyViewedAbility.ranks[i].useRequirements[a].weaponRequired);
                                        var tempIndex2 = EditorGUILayout.Popup("Weapon Type", currentWeaponTypeIndex, itemSettings.weaponTypeList.ToArray());
                                        if (itemSettings.weaponTypeList.Count > 0)
                                            currentlyViewedAbility.ranks[i].useRequirements[a].weaponRequired = itemSettings.weaponTypeList[tempIndex2];
                                        break;
                                    }
                                    case RequirementsManager.AbilityUseRequirementType.inCombat:
                                    {
                                        currentlyViewedAbility.ranks[i].useRequirements[a].inCombat =
                                            DrawHorizontalToggle("In Combat", "", smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].useRequirements[a].inCombat);
                                        break;
                                    }
                                    case RequirementsManager.AbilityUseRequirementType.Stealthed:
                                    {
                                        currentlyViewedAbility.ranks[i].useRequirements[a].stealthed =
                                            DrawHorizontalToggle("Stealth", "", smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].useRequirements[a].stealthed);
                                        break;
                                    }
                                }
                                GUILayout.Space(10);
                            }

                            EndHorizontalMargin(bigHorizontalSpace, true);
                        }

                        GUILayout.Space(10);
                    }

                    editorFilters.abilityModuleSection.showEffectsRequired =
                        HandleModuleBanner("EFFECTS REQUIRED", editorFilters.abilityModuleSection.showEffectsRequired);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showEffectsRequired)
                    {
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Effect", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                            GUILayout.MaxWidth(middleButtonMaxWidth),
                            GUILayout.Height(25)))
                        {
                            currentlyViewedAbility.ranks[i].effectsRequirements
                                .Add(new RPGAbility.USE_REQUIREMENT_EFFECTS());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        for (var a = 0; a < currentlyViewedAbility.ranks[i].effectsRequirements.Count; a++)
                        {
                            GUILayout.Space(10);
                            StartHorizontalMargin(bigHorizontalSpace, true);

                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();
                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedAbility.ranks[i].effectsRequirements.RemoveAt(a);
                                return;
                            }

                            var effectName = "";
                            if (currentlyViewedAbility.ranks[i].effectsRequirements[a].effectRequiredREF != null)
                                effectName = currentlyViewedAbility.ranks[i].effectsRequirements[a].effectRequiredREF._name;
                            EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                            EditorGUILayout.EndHorizontal();

                            EditorGUILayout.BeginHorizontal();
                            EditorGUILayout.LabelField("Unit Checked", GUILayout.Width(editorDATA.labelFieldWidth));
                            currentlyViewedAbility.ranks[i].effectsRequirements[a].target =
                                (RPGCombatDATA.TARGET_TYPE) EditorGUILayout.EnumPopup(
                                    currentlyViewedAbility.ranks[i].effectsRequirements[a].target);
                            GUILayout.Space(10);

                            EditorGUILayout.EndHorizontal();

                            EditorGUILayout.BeginHorizontal();
                            EditorGUILayout.LabelField("Effect", GUILayout.Width(editorDATA.labelFieldWidth));
                            currentlyViewedAbility.ranks[i].effectsRequirements[a].effectRequiredREF =
                                (RPGEffect) EditorGUILayout.ObjectField(
                                    RPGBuilderUtilities.GetEffectFromIDEditor(
                                        currentlyViewedAbility.ranks[i].effectsRequirements[a].effectRequiredID,
                                        allEffects),
                                    typeof(RPGEffect), false, GUILayout.ExpandWidth(true));
                            EditorGUILayout.EndHorizontal();

                            currentlyViewedAbility.ranks[i].effectsRequirements[a].effectRequiredID =
                                currentlyViewedAbility.ranks[i].effectsRequirements[a].effectRequiredREF != null
                                    ? currentlyViewedAbility.ranks[i].effectsRequirements[a].effectRequiredREF.ID
                                    : -1;

                            currentlyViewedAbility.ranks[i].effectsRequirements[a].consumeEffect =
                                DrawHorizontalToggle("Consume Effect?", "", smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].effectsRequirements[a].consumeEffect);

                            EndHorizontalMargin(bigHorizontalSpace, true);
                            GUILayout.Space(10);
                        }

                        GUILayout.Space(10);
                    }

                    editorFilters.abilityModuleSection.showActivation =
                        HandleModuleBanner("ACTIVATION SETTINGS", editorFilters.abilityModuleSection.showActivation);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showActivation)
                    {
                        StartHorizontalMargin(bigHorizontalSpace, true);
                        currentlyViewedAbility.ranks[i].activationType =
                            (RPGAbility.AbilityActivationType) EditorGUILayout.EnumPopup(
                                new GUIContent("Activation type", ""),currentlyViewedAbility.ranks[i].activationType);

                        switch (currentlyViewedAbility.ranks[i].activationType)
                        {
                            case RPGAbility.AbilityActivationType.Casted:
                                currentlyViewedAbility.ranks[i].castTime = DrawHorizontalFloatField("Cast Time", "Duration to cast the ability",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].castTime);
                                currentlyViewedAbility.ranks[i].castBarVisible = DrawHorizontalToggle("Cast Bar Visible?",
                                    "Should this ability display the cast bar during cast time?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].castBarVisible);
                                currentlyViewedAbility.ranks[i].castInRun = DrawHorizontalToggle("Move and cast?", "Can this ability be casted while moving?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].castInRun);
                                
                                currentlyViewedAbility.ranks[i].faceCursorWhileCasting = DrawHorizontalToggle("Face Cursor?",
                                    "TOP DOWN ONLY - Should the character face the cursor during the cast?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].faceCursorWhileCasting);
                                
                                currentlyViewedAbility.ranks[i].faceCursorWhenOnCastStart = DrawHorizontalToggle("Face Cursor On Start?",
                                    "TOP DOWN ONLY - Should the character face the cursor when the cast starts?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].faceCursorWhenOnCastStart);
                                
                                currentlyViewedAbility.ranks[i].faceCursorWhenOnCastEnd = DrawHorizontalToggle("Face Cursor On End?",
                                    "TOP DOWN ONLY - Should the character face the cursor when the cast ends?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].faceCursorWhenOnCastEnd);
                                
                                currentlyViewedAbility.ranks[i].animationTriggered = DrawHorizontalToggle("Animation Triggered?", "Is the effect triggered by an animation event?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].animationTriggered);
                                currentlyViewedAbility.ranks[i].comboStarsAfterCastComplete = DrawHorizontalToggle("Combo After Cast?",
                                    "If this ability starts a combo, should the combo start only after the cast is completed?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].comboStarsAfterCastComplete);
                                break;
                            case RPGAbility.AbilityActivationType.Channeled:
                                currentlyViewedAbility.ranks[i].channelTime = DrawHorizontalFloatField("Channel Time", "The duration of the channel",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].channelTime);
                                currentlyViewedAbility.ranks[i].castInRun = DrawHorizontalToggle("Move and channel?", "Can this ability be channelled while moving?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].castInRun);
                                break;
                            case RPGAbility.AbilityActivationType.Charged:

                                break;
                        }

                        currentlyViewedAbility.ranks[i].canBeUsedStunned = DrawHorizontalToggle("Stunned and use?", "Can this ability be used while being stunned?",
                            smallFieldHeight, currentlyViewedAbility.ranks[i].canBeUsedStunned);
                        currentlyViewedAbility.ranks[i].cancelStealth = DrawHorizontalToggle("Cancel Stealth?", "",
                            smallFieldHeight, currentlyViewedAbility.ranks[i].cancelStealth);
                        
                        currentlyViewedAbility.ranks[i].standTimeDuration = DrawHorizontalFloatField("Stand Time", "How long should the caster be locked in place when using this ability?",
                            smallFieldHeight, currentlyViewedAbility.ranks[i].standTimeDuration);

                        if (currentlyViewedAbility.ranks[i].standTimeDuration > 0)
                        {
                            currentlyViewedAbility.ranks[i].canRotateInStandTime = DrawHorizontalToggle("Mob Rotate In Stand Time?", "Can the NPC rotate while in stand time?",
                                smallFieldHeight, currentlyViewedAbility.ranks[i].canRotateInStandTime);
                        }

                        currentlyViewedAbility.ranks[i].castSpeedSlowAmount = DrawHorizontalFloatField("Slow Amount", "How much should the caster be slowed while casting this ability?",
                            smallFieldHeight, currentlyViewedAbility.ranks[i].castSpeedSlowAmount);
                        
                        if (currentlyViewedAbility.ranks[i].castSpeedSlowAmount > 0)
                        {
                            currentlyViewedAbility.ranks[i].castSpeedSlowTime = DrawHorizontalFloatField("Slow Duration", "How long should the caster be slowed?",
                                smallFieldHeight, currentlyViewedAbility.ranks[i].castSpeedSlowTime);
                            
                            currentlyViewedAbility.ranks[i].castSpeedSlowRate = DrawHorizontalFloatField("Slow Rate", "How fast should the movement speed be reduced?",
                                smallFieldHeight, currentlyViewedAbility.ranks[i].castSpeedSlowRate);
                        }

                        EndHorizontalMargin(bigHorizontalSpace, true);
                        GUILayout.Space(10);
                    }

                    editorFilters.abilityModuleSection.showAbilityType =
                        HandleModuleBanner("ABILITY TYPE", editorFilters.abilityModuleSection.showAbilityType);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showAbilityType)
                    {
                        StartHorizontalMargin(bigHorizontalSpace, true);
                        currentlyViewedAbility.ranks[i].targetType =
                            (RPGAbility.TARGET_TYPES) EditorGUILayout.EnumPopup(
                                new GUIContent("Ability Mechanic", "What type of ability is it?"),currentlyViewedAbility.ranks[i].targetType);

                        switch (currentlyViewedAbility.ranks[i].targetType)
                        {
                            case RPGAbility.TARGET_TYPES.CONE:
                                currentlyViewedAbility.ranks[i].minRange = DrawHorizontalFloatField("Range",
                                    "The distance at which this cone hits",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].minRange);
                                currentlyViewedAbility.ranks[i].coneDegree = DrawHorizontalFloatField("Angle",
                                    "The angle of the cone",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].coneDegree);
                                currentlyViewedAbility.ranks[i].ConeHitCount = DrawHorizontalIntField("Hits",
                                    "How many times does this ability hit?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].ConeHitCount);
                                if (currentlyViewedAbility.ranks[i].ConeHitCount > 1)
                                {
                                    currentlyViewedAbility.ranks[i].ConeHitInterval = DrawHorizontalFloatField(
                                        "Hit Interval", "How much time between each hit?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].ConeHitInterval);
                                }

                                break;
                            case RPGAbility.TARGET_TYPES.AOE:
                                currentlyViewedAbility.ranks[i].AOERadius = DrawHorizontalFloatField("Radius",
                                    "The radius of the AoE",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].AOERadius);
                                currentlyViewedAbility.ranks[i].AOEHitCount = DrawHorizontalIntField("Hits",
                                    "How many times does this ability hit?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].AOEHitCount);
                                if (currentlyViewedAbility.ranks[i].AOEHitCount > 1)
                                {
                                    currentlyViewedAbility.ranks[i].AOEHitInterval = DrawHorizontalFloatField(
                                        "Hit Interval", "How much time between each hit?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].AOEHitInterval);
                                }

                                break;
                            case RPGAbility.TARGET_TYPES.LINEAR:
                                currentlyViewedAbility.ranks[i].linearWidth = DrawHorizontalFloatField("Width",
                                    "How wide is the linear area?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].linearWidth);
                                currentlyViewedAbility.ranks[i].linearLength = DrawHorizontalFloatField("Length",
                                    "How long is the linear area?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].linearLength);
                                currentlyViewedAbility.ranks[i].linearHeight = DrawHorizontalFloatField("Height",
                                    "How high is the linear area?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].linearHeight);
                                currentlyViewedAbility.ranks[i].ConeHitCount = DrawHorizontalIntField("Hits",
                                    "How many times does this ability hit?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].ConeHitCount);
                                if (currentlyViewedAbility.ranks[i].ConeHitCount > 1)
                                {
                                    currentlyViewedAbility.ranks[i].ConeHitInterval = DrawHorizontalFloatField(
                                        "Hit Interval", "How much time between each hit?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].ConeHitInterval);
                                }

                                break;
                            case RPGAbility.TARGET_TYPES.PROJECTILE:
                            {
                                currentlyViewedAbility.ranks[i].projectileEffect =
                                    (GameObject) EditorGUILayout.ObjectField("Projectile Prefab",
                                        currentlyViewedAbility.ranks[i].projectileEffect, typeof(GameObject), false);

                                currentlyViewedAbility.ranks[i].projectileUseNodeSocket = DrawHorizontalToggle(
                                    "Use Socket?",
                                    "Is the projectile spawned at a node Socket?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileUseNodeSocket);
                                if (currentlyViewedAbility.ranks[i].projectileUseNodeSocket)
                                {
                                    var socketIndex = getIndexFromName("NodeSocket",
                                        currentlyViewedAbility.ranks[i].projectileSocketName);
                                    var tempSocketIndex = EditorGUILayout.Popup("Socket Name", socketIndex,
                                        combatSettings.nodeSocketNames.ToArray());
                                    if (combatSettings.nodeSocketNames.Count > 0)
                                        currentlyViewedAbility.ranks[i].projectileSocketName =
                                            combatSettings.nodeSocketNames[tempSocketIndex];
                                    
                                    currentlyViewedAbility.ranks[i].projectileParentedToCaster = DrawHorizontalToggle(
                                        "Attach to Socket?",
                                        "Is the projectile parented to the socket?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].projectileParentedToCaster);
                                }
                                else
                                {
                                    currentlyViewedAbility.ranks[i].effectPositionOffset = DrawHorizontalVector3("Projectile Position Offset", "",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].effectPositionOffset);
                                    currentlyViewedAbility.ranks[i].projectileParentedToCaster = DrawHorizontalToggle(
                                        "Attach to Caster?",
                                        "Is the projectile parented to the caster?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].projectileParentedToCaster);
                                }
                                
                                
                                currentlyViewedAbility.ranks[i].hitEffect =
                                    (GameObject) EditorGUILayout.ObjectField("Hit Prefab",
                                        currentlyViewedAbility.ranks[i].hitEffect, typeof(GameObject), false);
                                currentlyViewedAbility.ranks[i].hitEffectUseSocket = DrawHorizontalToggle(
                                    "Hit Use Socket?",
                                    "Is the hit effect spawned at a node Socket?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].hitEffectUseSocket);
                                if (currentlyViewedAbility.ranks[i].hitEffectUseSocket)
                                {
                                    var socketIndex = getIndexFromName("NodeSocket",
                                        currentlyViewedAbility.ranks[i].hitEffectSocketName);
                                    var tempSocketIndex = EditorGUILayout.Popup("Socket Name", socketIndex,
                                        combatSettings.nodeSocketNames.ToArray());
                                    if (combatSettings.nodeSocketNames.Count > 0)
                                        currentlyViewedAbility.ranks[i].hitEffectSocketName =
                                            combatSettings.nodeSocketNames[tempSocketIndex];
                                    
                                    currentlyViewedAbility.ranks[i].hitAttachedToNode = DrawHorizontalToggle(
                                        "Attach to Socket?",
                                        "Is the hit effect parented to the socket?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].hitAttachedToNode);
                                }
                                else
                                {
                                    currentlyViewedAbility.ranks[i].hitEffectPositionOffset = DrawHorizontalVector3("Hit Position Offset", "",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].hitEffectPositionOffset);
                                    currentlyViewedAbility.ranks[i].hitAttachedToNode = DrawHorizontalToggle(
                                        "Attach to Node?",
                                        "Is the hit effect parented to the node hit?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].hitAttachedToNode);
                                }

                                currentlyViewedAbility.ranks[i].hitEffectDuration =
                                    DrawHorizontalFloatField("Hit Effect Duration",
                                        "",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].hitEffectDuration);

                                
                                currentlyViewedAbility.ranks[i].projectileSound =
                                    (AudioClip) EditorGUILayout.ObjectField(
                                        "Projectile Audio Clip", currentlyViewedAbility.ranks[i].projectileSound,
                                        typeof(AudioClip),
                                        false, GUILayout.Height(15));
                                currentlyViewedAbility.ranks[i].projectileSoundParentedToEffect = DrawHorizontalToggle(
                                    "Attach Sound to Projectile?",
                                    "Is the audio clip attached on the projectile prefab?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileSoundParentedToEffect);
                                
                                
                                currentlyViewedAbility.ranks[i].useCustomCollision = DrawHorizontalToggle(
                                    "Blink Collision System?",
                                    "Is this projectile using rigidbody + collider or the blink custom collision system? Blink collisions are better but only for small sized projectiles",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].useCustomCollision);
                                if (!currentlyViewedAbility.ranks[i].useCustomCollision)
                                {
                                    currentlyViewedAbility.ranks[i].projectileColliderType =
                                        (RPGNpc.NPCColliderType) EditorGUILayout.EnumPopup(
                                            new GUIContent("Collider Type", ""),
                                            currentlyViewedAbility.ranks[i].projectileColliderType,
                                            GUILayout.Height(smallFieldHeight));

                                    switch (currentlyViewedAbility.ranks[i].projectileColliderType)
                                    {
                                        case RPGNpc.NPCColliderType.Capsule:
                                            currentlyViewedAbility.ranks[i].colliderRadius = DrawHorizontalFloatField(
                                                "Collider Radius", "",
                                                smallFieldHeight, currentlyViewedAbility.ranks[i].colliderRadius);
                                            currentlyViewedAbility.ranks[i].colliderHeight = DrawHorizontalFloatField(
                                                "Collider Height", "",
                                                smallFieldHeight, currentlyViewedAbility.ranks[i].colliderHeight);
                                            currentlyViewedAbility.ranks[i].colliderCenter = DrawHorizontalVector3(
                                                "Collider Center", "",
                                                smallFieldHeight, currentlyViewedAbility.ranks[i].colliderCenter);
                                            break;
                                        case RPGNpc.NPCColliderType.Sphere:
                                            currentlyViewedAbility.ranks[i].colliderRadius = DrawHorizontalFloatField(
                                                "Collider Radius", "",
                                                smallFieldHeight, currentlyViewedAbility.ranks[i].colliderRadius);
                                            currentlyViewedAbility.ranks[i].colliderCenter = DrawHorizontalVector3(
                                                "Collider Center", "",
                                                smallFieldHeight, currentlyViewedAbility.ranks[i].colliderCenter);
                                            break;
                                        case RPGNpc.NPCColliderType.Box:
                                            currentlyViewedAbility.ranks[i].colliderCenter = DrawHorizontalVector3(
                                                "Collider Center", "",
                                                smallFieldHeight, currentlyViewedAbility.ranks[i].colliderCenter);
                                            currentlyViewedAbility.ranks[i].colliderSize = DrawHorizontalVector3(
                                                "Collider Size", "",
                                                smallFieldHeight, currentlyViewedAbility.ranks[i].colliderSize);
                                            break;
                                    }
                                }

                                currentlyViewedAbility.ranks[i].projectileSpeed = DrawHorizontalFloatField("Speed",
                                    "How fast does the projectile move?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileSpeed);
                                currentlyViewedAbility.ranks[i].projectileDistance = DrawHorizontalFloatField(
                                    "Distance", "How far away can the projectile go?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileDistance);
                                currentlyViewedAbility.ranks[i].projectileAngleSpread = DrawHorizontalFloatField(
                                    "Angle Spread", "Does the projectiles have an angle spread?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileAngleSpread);
                                currentlyViewedAbility.ranks[i].projectileCount = DrawHorizontalIntField("Counts",
                                    "How many projectiles should be fired?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileCount);
                                currentlyViewedAbility.ranks[i].projectileDelay = DrawHorizontalFloatField("Delay",
                                    "Is there a delay before each projectile?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileDelay);
                                currentlyViewedAbility.ranks[i].projectileDuration = DrawHorizontalFloatField("Duration",
                                    "The total duration of the projectile",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileDuration);

                                currentlyViewedAbility.ranks[i].isProjectileComeBack = DrawHorizontalToggle(
                                    "Come Back To caster?",
                                    "Does the projectile come back to its caster after a certain time?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].isProjectileComeBack);
                                if (currentlyViewedAbility.ranks[i].isProjectileComeBack)
                                {
                                    currentlyViewedAbility.ranks[i].projectileComeBackTime = DrawHorizontalFloatField(
                                        "Come Back Time",
                                        "After how long does the projectile comes back to the caster?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].projectileComeBackTime);
                                    currentlyViewedAbility.ranks[i].projectileComeBackSpeed = DrawHorizontalFloatField(
                                        "Come Back Speed", "How fast does the projectile comes back to the caster?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].projectileComeBackSpeed);
                                }

                                currentlyViewedAbility.ranks[i].isProjectileNearbyUnit = DrawHorizontalToggle(
                                    "Chain Effect?", "Does the projectile chain to nearby targets after the first hit?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].isProjectileNearbyUnit);
                                if (currentlyViewedAbility.ranks[i].isProjectileNearbyUnit)
                                {
                                    currentlyViewedAbility.ranks[i].projectileNearbyUnitDistanceMax =
                                        DrawHorizontalFloatField("Chain Distance Max",
                                            "How far away can nearby units be hit from?",
                                            smallFieldHeight,
                                            currentlyViewedAbility.ranks[i].projectileNearbyUnitDistanceMax);
                                    currentlyViewedAbility.ranks[i].projectileNearbyUnitMaxHit =
                                        DrawHorizontalFloatField("Chain Hit Max",
                                            "How many times maximum can nearby units be hit after the initial hit?",
                                            smallFieldHeight,
                                            currentlyViewedAbility.ranks[i].projectileNearbyUnitMaxHit);
                                }
                                
                                currentlyViewedAbility.ranks[i].projectileAffectedByGravity = DrawHorizontalToggle(
                                    "Gravity?",
                                    "Is the projectile affected by Gravity?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileAffectedByGravity);

                                currentlyViewedAbility.ranks[i].projectileDestroyedByEnvironment = DrawHorizontalToggle(
                                    "Destroyed by Environment?",
                                    "Is the projectile destroyed by the environment?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileDestroyedByEnvironment);

                                currentlyViewedAbility.ranks[i].projectileShootOnClickPosition = DrawHorizontalToggle(
                                    "Shoot At Click Pos?",
                                    "TOP DOWN ONLY - Is the projectile shot at the initial click position?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileShootOnClickPosition);
                                    break;
                            }
                            case RPGAbility.TARGET_TYPES.GROUND:
                            
                                currentlyViewedAbility.ranks[i].groundVisualEffect = 
                                    (GameObject) EditorGUILayout.ObjectField("Ground Effect Prefab",
                                        currentlyViewedAbility.ranks[i].groundVisualEffect, typeof(GameObject), false);
                                currentlyViewedAbility.ranks[i].effectPositionOffset = DrawHorizontalVector3("Ground Position Offset", "",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].effectPositionOffset);
                                currentlyViewedAbility.ranks[i].groundVisualEffectDuration =
                                    DrawHorizontalFloatField("Ground Effect Duration", "",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundVisualEffectDuration);
                                
                                currentlyViewedAbility.ranks[i].groundRadius =
                                    DrawHorizontalFloatField("Radius", "The radius",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundRadius);
                                currentlyViewedAbility.ranks[i].groundRange =
                                    DrawHorizontalFloatField("Range",
                                        "The maximum range at which the ground ability can be casted from the character",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundRange);
                                currentlyViewedAbility.ranks[i].groundHitTime =
                                    DrawHorizontalFloatField("Delay", "The delay before the ability hits the ground",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundHitTime);
                                currentlyViewedAbility.ranks[i].groundHitCount =
                                    DrawHorizontalIntField("Hits", "How many times does this ability hits",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundHitCount);
                                currentlyViewedAbility.ranks[i].groundHitInterval =
                                    DrawHorizontalFloatField("Hit Interval", "How much time between each hit?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundHitInterval);
                                break;
                            case RPGAbility.TARGET_TYPES.GROUND_LEAP:
                                currentlyViewedAbility.ranks[i].groundRadius =
                                    DrawHorizontalFloatField("Radius", "The radius",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundRadius);
                                currentlyViewedAbility.ranks[i].groundRange =
                                    DrawHorizontalFloatField("Range",
                                        "The maximum range at which the ground ability can be casted from the character",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundRange);
                                currentlyViewedAbility.ranks[i].groundHitTime =
                                    DrawHorizontalFloatField("Delay", "The delay before the ability hits the ground",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundHitTime);
                                currentlyViewedAbility.ranks[i].groundHitCount =
                                    DrawHorizontalIntField("Hits", "How many times does this ability hits",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundHitCount);
                                currentlyViewedAbility.ranks[i].groundHitInterval =
                                    DrawHorizontalFloatField("Hit Interval", "How much time between each hit?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundHitInterval);
                                currentlyViewedAbility.ranks[i].groundLeapDuration =
                                    DrawHorizontalFloatField("Leap Duration", "How long should the leap last?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundLeapDuration);
                                currentlyViewedAbility.ranks[i].groundLeapHeight =
                                    DrawHorizontalFloatField("Leap Height", "How high should the leap be?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundLeapHeight);
                                currentlyViewedAbility.ranks[i].groundLeapSpeed =
                                    DrawHorizontalFloatField("Leap Speed", "The speed of the leap",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].groundLeapSpeed);

                                currentlyViewedAbility.ranks[i].extraAbilityExecuted =
                                    (RPGAbility) EditorGUILayout.ObjectField(
                                        new GUIContent("Leap Ability", "Extra ability triggered by the leap"),
                                        currentlyViewedAbility.ranks[i].extraAbilityExecuted, typeof(RPGAbility),
                                        false, GUILayout.ExpandWidth(true));

                                currentlyViewedAbility.ranks[i].extraAbilityExecutedActivationType =
                                    (RPGCombatDATA.CombatVisualActivationType) EditorGUILayout.EnumPopup(
                                        new GUIContent("Activation Type", "When is the leap ability triggered"),
                                        currentlyViewedAbility.ranks[i].extraAbilityExecutedActivationType,
                                        GUILayout.ExpandWidth(true));
                                break;
                            case RPGAbility.TARGET_TYPES.TARGET_PROJECTILE:
                                currentlyViewedAbility.ranks[i].projectileEffect =
                                    (GameObject) EditorGUILayout.ObjectField("Projectile Prefab",
                                        currentlyViewedAbility.ranks[i].projectileEffect, typeof(GameObject), false);
                                
                                currentlyViewedAbility.ranks[i].projectileUseNodeSocket = DrawHorizontalToggle(
                                    "Use Socket?",
                                    "Is the projectile spawned at a node Socket?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileUseNodeSocket);
                                if (currentlyViewedAbility.ranks[i].projectileUseNodeSocket)
                                {
                                    var socketIndex = getIndexFromName("NodeSocket",
                                        currentlyViewedAbility.ranks[i].projectileSocketName);
                                    var tempSocketIndex = EditorGUILayout.Popup("Socket Name", socketIndex,
                                        combatSettings.nodeSocketNames.ToArray());
                                    if (combatSettings.nodeSocketNames.Count > 0)
                                        currentlyViewedAbility.ranks[i].projectileSocketName =
                                            combatSettings.nodeSocketNames[tempSocketIndex];
                                    
                                    currentlyViewedAbility.ranks[i].projectileParentedToCaster = DrawHorizontalToggle(
                                        "Attach to Socket?",
                                        "Is the projectile parented to the socket?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].projectileParentedToCaster);
                                }
                                else
                                {
                                    currentlyViewedAbility.ranks[i].effectPositionOffset = DrawHorizontalVector3("Projectile Position Offset", "",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].effectPositionOffset);
                                    currentlyViewedAbility.ranks[i].projectileParentedToCaster = DrawHorizontalToggle(
                                        "Attach to Caster?",
                                        "Is the projectile parented to the caster?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].projectileParentedToCaster);
                                }
                                
                                currentlyViewedAbility.ranks[i].projectileTargetUseNodeSocket = DrawHorizontalToggle(
                                    "Use Target Socket?",
                                    "Is the projectile guided to a target's socket?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileTargetUseNodeSocket);
                                if (currentlyViewedAbility.ranks[i].projectileTargetUseNodeSocket)
                                {
                                    var socketIndex = getIndexFromName("NodeSocket",
                                        currentlyViewedAbility.ranks[i].projectileTargetSocketName);
                                    var tempSocketIndex = EditorGUILayout.Popup("Socket Name", socketIndex,
                                        combatSettings.nodeSocketNames.ToArray());
                                    if (combatSettings.nodeSocketNames.Count > 0)
                                        currentlyViewedAbility.ranks[i].projectileTargetSocketName =
                                            combatSettings.nodeSocketNames[tempSocketIndex];
                                }
                                
                                
                                currentlyViewedAbility.ranks[i].projectileSound =
                                    (AudioClip) EditorGUILayout.ObjectField(
                                        "Projectile Audio Clip", currentlyViewedAbility.ranks[i].projectileSound,
                                        typeof(AudioClip),
                                        false, GUILayout.Height(15));
                                currentlyViewedAbility.ranks[i].projectileSoundParentedToEffect = DrawHorizontalToggle(
                                    "Attach Sound to Projectile?",
                                    "Is the audio clip attached on the projectile prefab?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileSoundParentedToEffect);
                                
                                    currentlyViewedAbility.ranks[i].projectileColliderType =
                                        (RPGNpc.NPCColliderType) EditorGUILayout.EnumPopup(
                                            new GUIContent("Collider Type", ""),
                                            currentlyViewedAbility.ranks[i].projectileColliderType,
                                            GUILayout.Height(smallFieldHeight));

                                currentlyViewedAbility.ranks[i].useCustomCollision = false;
                                switch (currentlyViewedAbility.ranks[i].projectileColliderType)
                                {
                                    case RPGNpc.NPCColliderType.Capsule:
                                        currentlyViewedAbility.ranks[i].colliderRadius = DrawHorizontalFloatField(
                                            "Collider Radius", "",
                                            smallFieldHeight, currentlyViewedAbility.ranks[i].colliderRadius);
                                        currentlyViewedAbility.ranks[i].colliderHeight = DrawHorizontalFloatField(
                                            "Collider Height", "",
                                            smallFieldHeight, currentlyViewedAbility.ranks[i].colliderHeight);
                                        currentlyViewedAbility.ranks[i].colliderCenter = DrawHorizontalVector3(
                                            "Collider Center", "",
                                            smallFieldHeight, currentlyViewedAbility.ranks[i].colliderCenter);
                                        break;
                                    case RPGNpc.NPCColliderType.Sphere:
                                        currentlyViewedAbility.ranks[i].colliderRadius = DrawHorizontalFloatField(
                                            "Collider Radius", "",
                                            smallFieldHeight, currentlyViewedAbility.ranks[i].colliderRadius);
                                        currentlyViewedAbility.ranks[i].colliderCenter = DrawHorizontalVector3(
                                            "Collider Center", "",
                                            smallFieldHeight, currentlyViewedAbility.ranks[i].colliderCenter);
                                        break;
                                    case RPGNpc.NPCColliderType.Box:
                                        currentlyViewedAbility.ranks[i].colliderCenter = DrawHorizontalVector3(
                                            "Collider Center", "",
                                            smallFieldHeight, currentlyViewedAbility.ranks[i].colliderCenter);
                                        currentlyViewedAbility.ranks[i].colliderSize = DrawHorizontalVector3(
                                            "Collider Size", "",
                                            smallFieldHeight, currentlyViewedAbility.ranks[i].colliderSize);
                                        break;
                                }

                                currentlyViewedAbility.ranks[i].mustLookAtTarget =
                                    DrawHorizontalToggle("Must Face Target?",
                                        "Should the caster be facing the target?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].mustLookAtTarget);
                                currentlyViewedAbility.ranks[i].minRange =
                                    DrawHorizontalFloatField("Min. Range",
                                        "Minimum range from the target to use the ability",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].minRange);
                                currentlyViewedAbility.ranks[i].maxRange =
                                    DrawHorizontalFloatField("Max. Range",
                                        "Maximum range from the target to use the ability",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].maxRange);
                                currentlyViewedAbility.ranks[i].projectileSpeed =
                                    DrawHorizontalFloatField("Speed", "How fast does the projectile move?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].projectileSpeed);
                                currentlyViewedAbility.ranks[i].projectileCount =
                                    DrawHorizontalIntField("Counts", "How many projectiles should be fired?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].projectileCount);
                                currentlyViewedAbility.ranks[i].projectileDelay =
                                    DrawHorizontalFloatField("Delay", "Is there a delay before each projectile?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].projectileDelay);
                                
                                currentlyViewedAbility.ranks[i].projectileAffectedByGravity = DrawHorizontalToggle(
                                    "Gravity?",
                                    "Is the projectile affected by Gravity?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].projectileAffectedByGravity);
                                
                                currentlyViewedAbility.ranks[i].projectileDestroyedByEnvironment =
                                    DrawHorizontalToggle("Destroyed by Environment?",
                                        "Is the projectile destroyed by the environment?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].projectileDestroyedByEnvironment);
                                break;
                            case RPGAbility.TARGET_TYPES.TARGET_INSTANT:
                                
                                currentlyViewedAbility.ranks[i].hitEffect =
                                    (GameObject) EditorGUILayout.ObjectField("Hit Prefab",
                                        currentlyViewedAbility.ranks[i].hitEffect, typeof(GameObject), false);
                                currentlyViewedAbility.ranks[i].hitEffectUseSocket = DrawHorizontalToggle(
                                    "Hit Use Socket?",
                                    "Is the hit effect spawned at a node Socket?",
                                    smallFieldHeight, currentlyViewedAbility.ranks[i].hitEffectUseSocket);
                                if (currentlyViewedAbility.ranks[i].hitEffectUseSocket)
                                {
                                    var socketIndex = getIndexFromName("NodeSocket",
                                        currentlyViewedAbility.ranks[i].hitEffectSocketName);
                                    var tempSocketIndex = EditorGUILayout.Popup("Socket Name", socketIndex,
                                        combatSettings.nodeSocketNames.ToArray());
                                    if (combatSettings.nodeSocketNames.Count > 0)
                                        currentlyViewedAbility.ranks[i].hitEffectSocketName =
                                            combatSettings.nodeSocketNames[tempSocketIndex];
                                    
                                    currentlyViewedAbility.ranks[i].hitAttachedToNode = DrawHorizontalToggle(
                                        "Attach to Socket?",
                                        "Is the hit effect parented to the socket?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].hitAttachedToNode);
                                }
                                else
                                {
                                    currentlyViewedAbility.ranks[i].hitEffectPositionOffset = DrawHorizontalVector3("Hit Position Offset", "",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].hitEffectPositionOffset);
                                    currentlyViewedAbility.ranks[i].hitAttachedToNode = DrawHorizontalToggle(
                                        "Attach to Node?",
                                        "Is the hit effect parented to the node hit?",
                                        smallFieldHeight, currentlyViewedAbility.ranks[i].hitAttachedToNode);
                                }

                                currentlyViewedAbility.ranks[i].hitEffectDuration =
                                    DrawHorizontalFloatField("Hit Effect Duration",
                                        "",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].hitEffectDuration);
                                
                                currentlyViewedAbility.ranks[i].mustLookAtTarget =
                                    DrawHorizontalToggle("Must Face Target?",
                                        "Should the caster be facing the target?",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].mustLookAtTarget);
                                currentlyViewedAbility.ranks[i].minRange =
                                    DrawHorizontalFloatField("Min. Range",
                                        "Minimum range from the target to use the ability",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].minRange);
                                currentlyViewedAbility.ranks[i].maxRange =
                                    DrawHorizontalFloatField("Max. Range",
                                        "Maximum range from the target to use the ability",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].maxRange);
                                break;
                        }

                        if (currentlyViewedAbility.ranks[i].targetType != RPGAbility.TARGET_TYPES.SELF
                            && currentlyViewedAbility.ranks[i].targetType != RPGAbility.TARGET_TYPES.TARGET_INSTANT
                            && currentlyViewedAbility.ranks[i].targetType != RPGAbility.TARGET_TYPES.TARGET_PROJECTILE
                        )
                        {
                            currentlyViewedAbility.ranks[i].MaxUnitHit =
                                DrawHorizontalIntField("Max Hits",
                                    "The maximum amount of units that can be hit by this ability",
                                    smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].MaxUnitHit);
                        }

                        currentlyViewedAbility.ranks[i].isToggle = DrawHorizontalToggle("Is Toggle?", "",
                            smallFieldHeight, currentlyViewedAbility.ranks[i].isToggle);
                        if (currentlyViewedAbility.ranks[i].isToggle)
                        {
                            currentlyViewedAbility.ranks[i].toggledTriggerInterval =
                                DrawHorizontalFloatField("Toggle Interval",
                                    "",
                                    smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].toggledTriggerInterval);
                            currentlyViewedAbility.ranks[i].isToggleCostOnTrigger = DrawHorizontalToggle("Cost Pulse?", "",
                                smallFieldHeight, currentlyViewedAbility.ranks[i].isToggleCostOnTrigger);
                        }
                        EndHorizontalMargin(bigHorizontalSpace, true);
                        
                        if (currentlyViewedAbility.ranks[i].targetType != RPGAbility.TARGET_TYPES.SELF)
                        {

                            GUILayout.Space(10);
                            editorFilters.abilityModuleSection.showHitSettings =
                                HandleModuleBanner("HIT SETTINGS", editorFilters.abilityModuleSection.showHitSettings);
                            GUILayout.Space(10);

                            if (editorFilters.abilityModuleSection.showHitSettings)
                            {
                                StartHorizontalMargin(middleButtonSpace, false);
                                if (GUILayout.Button("+ Add Hit Setting", skin.GetStyle("AddButton"),
                                    GUILayout.ExpandWidth(true), GUILayout.Height(25)))
                                {
                                    currentlyViewedAbility.ranks[i].HitSettings.Add(new RPGAbility.HIT_SETTINGS());
                                }

                                EndHorizontalMargin(middleButtonSpace, false);
                                GUILayout.Space(10);

                                for (var a = 0; a < currentlyViewedAbility.ranks[i].HitSettings.Count; a++)
                                {
                                    StartHorizontalMargin(bigHorizontalSpace, true);
                                    var requirementNumber = a + 1;
                                    EditorGUILayout.BeginHorizontal();

                                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                        GUILayout.Height(20)))
                                    {
                                        currentlyViewedAbility.ranks[i].HitSettings.RemoveAt(a);
                                        return;
                                    }

                                    EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                                    currentlyViewedAbility.ranks[i].HitSettings[a].alignment =
                                        (RPGCombatDATA.ALIGNMENT_TYPE) EditorGUILayout.EnumPopup(
                                            currentlyViewedAbility.ranks[i].HitSettings[a].alignment);
                                    GUILayout.Space(10);

                                    EditorGUILayout.EndHorizontal();
                                    EditorGUILayout.BeginVertical();

                                    if (currentlyViewedAbility.ranks[i].HitSettings.Count > 0)
                                    {
                                        currentlyViewedAbility.ranks[i].HitSettings[a].hitPlayer =
                                            DrawHorizontalToggle("Can Hit Player?",
                                                "Can this ability hit the Player Character?",
                                                smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].HitSettings[a].hitPlayer);
                                        currentlyViewedAbility.ranks[i].HitSettings[a].hitSelf =
                                            DrawHorizontalToggle("Can Hit Self?",
                                                "Can this ability hit the caster?",
                                                smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].HitSettings[a].hitSelf);
                                        currentlyViewedAbility.ranks[i].HitSettings[a].hitAlly =
                                            DrawHorizontalToggle("Can Hit Ally?",
                                                "Can this ability hit the allied Units?",
                                                smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].HitSettings[a].hitAlly);
                                        currentlyViewedAbility.ranks[i].HitSettings[a].hitNeutral =
                                            DrawHorizontalToggle("Can Hit Neutral?",
                                                "Can this ability hit the neutral Units?",
                                                smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].HitSettings[a].hitNeutral);
                                        currentlyViewedAbility.ranks[i].HitSettings[a].hitEnemy =
                                            DrawHorizontalToggle("Can Hit Enemy?",
                                                "Can this ability hit the enemy Units?",
                                                smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].HitSettings[a].hitEnemy);
                                        currentlyViewedAbility.ranks[i].HitSettings[a].hitPet =
                                            DrawHorizontalToggle("Can Hit Pet?",
                                                "Can this ability hit the a pet from the caster?",
                                                smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].HitSettings[a].hitPet);
                                        currentlyViewedAbility.ranks[i].HitSettings[a].hitOwner =
                                            DrawHorizontalToggle("Can Hit Owner?",
                                                "Can this ability hit the owner, when casted by a pet?",
                                                smallFieldHeight,
                                                currentlyViewedAbility.ranks[i].HitSettings[a].hitOwner);
                                    }
                                    EditorGUILayout.EndVertical();

                                    EndHorizontalMargin(bigHorizontalSpace, true);
                                    GUILayout.Space(10);
                                }
                            }
                        }
                        else
                        {
                            GUILayout.Space(10);
                        }
                    }

                    editorFilters.abilityModuleSection.showCooldowns =
                        HandleModuleBanner("COOLDOWN SETTINGS", editorFilters.abilityModuleSection.showCooldowns);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showCooldowns)
                    {
                        StartHorizontalMargin(bigHorizontalSpace, true);
                        currentlyViewedAbility.ranks[i].cooldown =
                            DrawHorizontalFloatField("Cooldown",
                                "How long should the ability be on cooldown after being used",
                                smallFieldHeight,
                                currentlyViewedAbility.ranks[i].cooldown);

                        currentlyViewedAbility.ranks[i].isGCD = EditorGUILayout.Toggle(
                            new GUIContent("Start GCD?", "Should this ability start the Global Cooldown?"),
                            currentlyViewedAbility.ranks[i].isGCD);
                        currentlyViewedAbility.ranks[i].CanUseDuringGCD = EditorGUILayout.Toggle(
                            new GUIContent("Can use While GCD?",
                                "Can this ability be casted during the Global Cooldown?"),
                            currentlyViewedAbility.ranks[i].CanUseDuringGCD);

                        currentlyViewedAbility.ranks[i].startCDOnActivate =
                            DrawHorizontalToggle("CD On Activate", "Is the cooldown started on activation?",
                                smallFieldHeight,
                                currentlyViewedAbility.ranks[i].startCDOnActivate);

                        currentlyViewedAbility.ranks[i].isSharingCooldown = EditorGUILayout.Toggle(
                            new GUIContent("Shared Cooldown?", "Is this ability cooldown triggered by other abilities with the same tag?"),
                            currentlyViewedAbility.ranks[i].isSharingCooldown);
                        if (currentlyViewedAbility.ranks[i].isSharingCooldown)
                        {
                            var curAbCDTag = getIndexFromName("AbilityCooldownTag",
                                currentlyViewedAbility.ranks[i].cooldownTag);
                            var tempIndex1 = EditorGUILayout.Popup("Tag", curAbCDTag,
                                combatSettings.AbilityCooldownTagList.ToArray());
                            if (combatSettings.AbilityCooldownTagList.Count > 0)
                                currentlyViewedAbility.ranks[i].cooldownTag =
                                    combatSettings.AbilityCooldownTagList[tempIndex1];
                        }

                        EndHorizontalMargin(bigHorizontalSpace, true);
                        GUILayout.Space(10);
                    }

                    if (currentlyViewedAbility.ranks[i].targetType != RPGAbility.TARGET_TYPES.SELF)
                    {
                        editorFilters.abilityModuleSection.showCasterEffectsApplied =
                            HandleModuleBanner("CASTER EFFECTS APPLIED",
                                editorFilters.abilityModuleSection.showCasterEffectsApplied);
                        GUILayout.Space(10);

                        if (editorFilters.abilityModuleSection.showCasterEffectsApplied)
                        {
                            StartHorizontalMargin(middleButtonSpace, false);
                            if (GUILayout.Button("+ Add Effect", skin.GetStyle("AddButton"),
                                GUILayout.ExpandWidth(true),
                                GUILayout.Height(25)))
                            {
                                currentlyViewedAbility.ranks[i].casterEffectsApplied
                                    .Add(new RPGAbility.AbilityEffectsApplied());
                            }

                            EndHorizontalMargin(middleButtonSpace, false);

                            for (var a = 0; a < currentlyViewedAbility.ranks[i].casterEffectsApplied.Count; a++)
                            {
                                GUILayout.Space(10);
                                StartHorizontalMargin(bigHorizontalSpace, true);
                                var requirementNumber = a + 1;
                                EditorGUILayout.BeginHorizontal();
                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                    GUILayout.Height(20)))
                                {
                                    currentlyViewedAbility.ranks[i].casterEffectsApplied.RemoveAt(a);
                                    return;
                                }

                                var effectName = "";
                                if (currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectREF != null)
                                    effectName = currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectREF._name;
                                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                                EditorGUILayout.EndHorizontal();

                                currentlyViewedAbility.ranks[i].casterEffectsApplied[a].target =
                                    RPGCombatDATA.TARGET_TYPE.Caster;

                                currentlyViewedAbility.ranks[i].casterEffectsApplied[a].chance =
                                    DrawHorizontalSlider("Chance", "",
                                        smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].casterEffectsApplied[a].chance, 0f, 100f);

                                currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectREF =
                                    (RPGEffect) EditorGUILayout.ObjectField("Effect",
                                        RPGBuilderUtilities.GetEffectFromIDEditor(
                                            currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectID, allEffects),
                                        typeof(RPGEffect), false);

                                var effectRankField = currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectRank + 1;
                                if (effectRankField == 0) effectRankField = 1;

                                if (currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectREF != null)
                                {
                                    currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectID =
                                        currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectREF.ID;

                                    if (effectRankField > currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectREF
                                        .ranks.Count)
                                        effectRankField = currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectREF
                                            .ranks.Count;
                                }
                                else
                                {
                                    currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectID = -1;
                                }

                                effectRankField = DrawHorizontalIntField("Effect Rank", "", smallFieldHeight,
                                    effectRankField);
                                currentlyViewedAbility.ranks[i].casterEffectsApplied[a].effectRank = effectRankField - 1;

                                currentlyViewedAbility.ranks[i].casterEffectsApplied[a].delay =
                                    DrawHorizontalFloatField("Delay", "", smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].casterEffectsApplied[a].delay);

                                EndHorizontalMargin(bigHorizontalSpace, true);
                                GUILayout.Space(10);
                            }

                            GUILayout.Space(10);
                        }
                    }

                    editorFilters.abilityModuleSection.showEffectsApplied =
                        HandleModuleBanner("EFFECTS APPLIED", editorFilters.abilityModuleSection.showEffectsApplied);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showEffectsApplied)
                    {
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Effect", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                            GUILayout.Height(25)))
                        {
                            currentlyViewedAbility.ranks[i].effectsApplied
                                .Add(new RPGAbility.AbilityEffectsApplied());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        for (var a = 0; a < currentlyViewedAbility.ranks[i].effectsApplied.Count; a++)
                        {
                            GUILayout.Space(10);
                            StartHorizontalMargin(bigHorizontalSpace, true);
                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();
                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedAbility.ranks[i].effectsApplied.RemoveAt(a);
                                return;
                            }

                            var effectName = "";
                            if (currentlyViewedAbility.ranks[i].effectsApplied[a].effectREF != null)
                                effectName = currentlyViewedAbility.ranks[i].effectsApplied[a].effectREF._name;
                            EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                            EditorGUILayout.EndHorizontal();

                            currentlyViewedAbility.ranks[i].effectsApplied[a].target =
                                (RPGCombatDATA.TARGET_TYPE) EditorGUILayout.EnumPopup("Unit Hit",
                                    currentlyViewedAbility.ranks[i].effectsApplied[a].target);

                            currentlyViewedAbility.ranks[i].effectsApplied[a].chance =
                                DrawHorizontalSlider("Chance", "",
                                    smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].effectsApplied[a].chance, 0f, 100f);

                            currentlyViewedAbility.ranks[i].effectsApplied[a].effectREF =
                                (RPGEffect) EditorGUILayout.ObjectField("Effect",
                                    RPGBuilderUtilities.GetEffectFromIDEditor(
                                        currentlyViewedAbility.ranks[i].effectsApplied[a].effectID, allEffects),
                                    typeof(RPGEffect), false);

                            var effectRankField = currentlyViewedAbility.ranks[i].effectsApplied[a].effectRank + 1;
                            if (effectRankField == 0) effectRankField = 1;

                            if (currentlyViewedAbility.ranks[i].effectsApplied[a].effectREF != null)
                            {
                                currentlyViewedAbility.ranks[i].effectsApplied[a].effectID =
                                    currentlyViewedAbility.ranks[i].effectsApplied[a].effectREF.ID;

                                if (effectRankField > currentlyViewedAbility.ranks[i].effectsApplied[a].effectREF
                                    .ranks.Count)
                                    effectRankField = currentlyViewedAbility.ranks[i].effectsApplied[a].effectREF
                                        .ranks.Count;
                            }
                            else
                            {
                                currentlyViewedAbility.ranks[i].effectsApplied[a].effectID = -1;
                            }

                            effectRankField = DrawHorizontalIntField("Effect Rank", "", smallFieldHeight, effectRankField);
                            currentlyViewedAbility.ranks[i].effectsApplied[a].effectRank = effectRankField - 1;
                            
                            currentlyViewedAbility.ranks[i].effectsApplied[a].delay =
                                DrawHorizontalFloatField("Delay", "", smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].effectsApplied[a].delay);

                            currentlyViewedAbility.ranks[i].effectsApplied[a].isSpread =
                                DrawHorizontalToggle("Spread to nearby Units?", "", smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].effectsApplied[a].isSpread);
                            if (currentlyViewedAbility.ranks[i].effectsApplied[a].isSpread)
                            {
                                currentlyViewedAbility.ranks[i].effectsApplied[a].spreadUnitMax =
                                    DrawHorizontalIntField("Max Unit", "", smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].effectsApplied[a].spreadUnitMax);
                                currentlyViewedAbility.ranks[i].effectsApplied[a].spreadDistanceMax =
                                    DrawHorizontalFloatField("Max Spread Distance", "", smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].effectsApplied[a].spreadDistanceMax);
                            }

                            EndHorizontalMargin(bigHorizontalSpace, true);
                            GUILayout.Space(10);
                        }

                        GUILayout.Space(10);
                    }

                    editorFilters.abilityModuleSection.showConditionalEffect =
                        HandleModuleBanner("CONDITIONAL EFFECTS",
                            editorFilters.abilityModuleSection.showConditionalEffect);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showConditionalEffect)
                    {

                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Condition", skin.GetStyle("AddButton"),
                            GUILayout.ExpandWidth(true), GUILayout.Height(25)))
                        {
                            currentlyViewedAbility.ranks[i].conditionalEffects
                                .Add(new RPGAbility.ConditionalEffectsData());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        for (var a = 0; a < currentlyViewedAbility.ranks[i].conditionalEffects.Count; a++)
                        {
                            GUILayout.Space(10);
                            StartHorizontalMargin(bigHorizontalSpace, true);
                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();
                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedAbility.ranks[i].conditionalEffects.RemoveAt(a);
                                return;
                            }

                            EditorGUILayout.EndHorizontal();

                            EditorGUILayout.LabelField("Required Conditions:");
                            GUILayout.Space(5);

                            currentlyViewedAbility.ranks[i].conditionalEffects[a].requiredTargetType =
                                (RPGCombatDATA.TARGET_TYPE) EditorGUILayout.EnumPopup("Required On:",
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].requiredTargetType,
                                    GUILayout.ExpandWidth(true));

                            currentlyViewedAbility.ranks[i].conditionalEffects[a].effectRequiredREF =
                                (RPGEffect) EditorGUILayout.ObjectField("Effect Required:",
                                    RPGBuilderUtilities.GetEffectFromIDEditor(
                                        currentlyViewedAbility.ranks[i].conditionalEffects[a].effectRequiredID,
                                        allEffects), typeof(RPGEffect), false,
                                    GUILayout.ExpandWidth(true));
                            
                            currentlyViewedAbility.ranks[i].conditionalEffects[a].consumeRequiredEffect =
                                DrawHorizontalToggle("Consume Effect?", "", smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].consumeRequiredEffect);

                                currentlyViewedAbility.ranks[i].conditionalEffects[a].effectRequiredID =
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].effectRequiredREF != null
                                        ? currentlyViewedAbility.ranks[i].conditionalEffects[a].effectRequiredREF.ID
                                        : -1;

                            currentlyViewedAbility.ranks[i].conditionalEffects[a].statREF =
                                (RPGStat) EditorGUILayout.ObjectField("Stat Required:",
                                    RPGBuilderUtilities.GetStatFromIDEditor(
                                        currentlyViewedAbility.ranks[i].conditionalEffects[a].statID,
                                        allStats), typeof(RPGStat), false,
                                    GUILayout.ExpandWidth(true));

                            currentlyViewedAbility.ranks[i].conditionalEffects[a].statID =
                                currentlyViewedAbility.ranks[i].conditionalEffects[a].statREF != null
                                    ? currentlyViewedAbility.ranks[i].conditionalEffects[a].statREF.ID
                                    : -1;

                            currentlyViewedAbility.ranks[i].conditionalEffects[a].value =
                                DrawHorizontalFloatField("Stat Value", "", smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].value);
                            
                            currentlyViewedAbility.ranks[i].conditionalEffects[a].valueType =
                                (RPGStat.VitalityActionsValueType) EditorGUILayout.EnumPopup("Value Type:",
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].valueType,
                                    GUILayout.ExpandWidth(true));
                            
                            currentlyViewedAbility.ranks[i].conditionalEffects[a].isPercent =
                                DrawHorizontalToggle("Is Percent?", "", smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].isPercent);
                            GUILayout.Space(10);

                            EditorGUILayout.LabelField("Triggered Actions when conditions are met:");
                            GUILayout.Space(5);
                            
                            currentlyViewedAbility.ranks[i].conditionalEffects[a].targetType =
                                (RPGCombatDATA.TARGET_TYPE) EditorGUILayout.EnumPopup("Applied On:",
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].targetType,
                                    GUILayout.ExpandWidth(true));

                            currentlyViewedAbility.ranks[i].conditionalEffects[a].effectREF =
                                (RPGEffect) EditorGUILayout.ObjectField("Effect:",
                                    RPGBuilderUtilities.GetEffectFromIDEditor(
                                        currentlyViewedAbility.ranks[i].conditionalEffects[a].effectID,
                                        allEffects), typeof(RPGEffect), false,
                                    GUILayout.ExpandWidth(true));

                            var effectRankField = currentlyViewedAbility.ranks[i].conditionalEffects[a].effectRank + 1;
                            if (effectRankField == 0) effectRankField = 1;

                            if (currentlyViewedAbility.ranks[i].conditionalEffects[a].effectREF != null)
                            {
                                currentlyViewedAbility.ranks[i].conditionalEffects[a].effectID =
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].effectREF.ID;
                                
                                if (effectRankField > currentlyViewedAbility.ranks[i].conditionalEffects[a].effectREF
                                    .ranks.Count)
                                    effectRankField = currentlyViewedAbility.ranks[i].conditionalEffects[a].effectREF
                                        .ranks.Count;
                            }
                            else
                            {
                                currentlyViewedAbility.ranks[i].conditionalEffects[a].effectID = -1;
                            }

                            effectRankField =
                                DrawHorizontalIntField("Effect Rank", "", smallFieldHeight, effectRankField);
                            currentlyViewedAbility.ranks[i].conditionalEffects[a].effectRank = effectRankField - 1;

                            currentlyViewedAbility.ranks[i].conditionalEffects[a].isSpread =
                                DrawHorizontalToggle("Spread to nearby Units?", "", smallFieldHeight,
                                    currentlyViewedAbility.ranks[i].conditionalEffects[a].isSpread);
                            if (currentlyViewedAbility.ranks[i].conditionalEffects[a].isSpread)
                            {
                                currentlyViewedAbility.ranks[i].conditionalEffects[a].spreadUnitMax =
                                    DrawHorizontalIntField("Max Unit", "", smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].conditionalEffects[a].spreadUnitMax);
                                currentlyViewedAbility.ranks[i].conditionalEffects[a].spreadDistanceMax =
                                    DrawHorizontalFloatField("Max Spread Distance", "", smallFieldHeight,
                                        currentlyViewedAbility.ranks[i].conditionalEffects[a].spreadDistanceMax);
                            }
                            EndHorizontalMargin(bigHorizontalSpace, true);
                        }

                        GUILayout.Space(10);
                    }

                    editorFilters.abilityModuleSection.showTags =
                        HandleModuleBanner("TAGS SETTINGS", editorFilters.abilityModuleSection.showTags);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showTags)
                    {
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Tag", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                            GUILayout.Height(25)))
                        {
                            currentlyViewedAbility.ranks[i].tagsData.Add(new RPGAbility.AbilityTagsData());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        for (var a = 0; a < currentlyViewedAbility.ranks[i].tagsData.Count; a++)
                        {
                            GUILayout.Space(10);
                            StartHorizontalMargin(bigHorizontalSpace, true);
                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();
                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedAbility.ranks[i].tagsData.RemoveAt(a);
                                return;
                            }

                            EditorGUILayout.LabelField("Tag:" + requirementNumber + ":");
                            EditorGUILayout.EndHorizontal();
                            EditorGUILayout.BeginHorizontal();
                            EditorGUILayout.LabelField("Tag:", GUILayout.Width(editorDATA.labelFieldWidth));
                            currentlyViewedAbility.ranks[i].tagsData[a].tag =
                                (RPGAbility.ABILITY_TAGS) EditorGUILayout.EnumPopup(currentlyViewedAbility.ranks[i]
                                    .tagsData[a]
                                    .tag);
                            EditorGUILayout.EndHorizontal();
                            if (currentlyViewedAbility.ranks[i].tagsData[a].tag ==
                                RPGAbility.ABILITY_TAGS.shapeshifting ||
                                currentlyViewedAbility.ranks[i].tagsData[a].tag ==
                                RPGAbility.ABILITY_TAGS.stealth)
                            {
                                currentlyViewedAbility.ranks[i].tagsData[a].effectID =
                                    DrawRPGDataEntryField(currentlyViewedAbility.ranks[i].tagsData[a].effectID,
                                        "Effect", "Effect");
                            }

                            EndHorizontalMargin(bigHorizontalSpace, true);
                        }

                        GUILayout.Space(10);
                    }

                    editorFilters.abilityModuleSection.showVisualEffects =
                        HandleModuleBanner("VISUAL EFFECTS", editorFilters.abilityModuleSection.showVisualEffects);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showVisualEffects)
                    {
                        currentlyViewedAbility.ranks[i].visualEffects =
                            DrawVisualEffectsList(currentlyViewedAbility.ranks[i].visualEffects);
                    }
                    
                    editorFilters.abilityModuleSection.showVisualAnimations =
                        HandleModuleBanner("VISUAL ANIMATIONS", editorFilters.abilityModuleSection.showVisualAnimations);
                    GUILayout.Space(10);

                    if (editorFilters.abilityModuleSection.showVisualAnimations)
                    {
                        currentlyViewedAbility.ranks[i].visualAnimations =
                            DrawVisualAnimationsList(currentlyViewedAbility.ranks[i].visualAnimations);
                    }
                    GUILayout.Space(30);
                }
                GUILayout.Space(10);
            }
        }

        GUILayout.Space(30);

        EditorGUILayout.EndScrollView();
    }

    private List<RPGCombatDATA.CombatVisualEffect> DrawVisualEffectsList(List<RPGCombatDATA.CombatVisualEffect> visualEffects)
    {
        StartHorizontalMargin(middleButtonSpace, false);
        if (GUILayout.Button("+ Add Visual Effect", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(25)))
        {
            visualEffects.Add(new RPGCombatDATA.CombatVisualEffect());
        }

        EndHorizontalMargin(middleButtonSpace, false);

        for (var a = 0; a < visualEffects.Count; a++)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            var requirementNumber = a + 1;
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                GUILayout.Height(20)))
            {
                visualEffects.RemoveAt(a);
                return visualEffects;
            }

            EditorGUILayout.LabelField("Visual:" + requirementNumber + ":");
            EditorGUILayout.EndHorizontal();
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Activate On", GUILayout.Width(editorDATA.labelFieldWidth));
            visualEffects[a].activationType =
                (RPGCombatDATA.CombatVisualActivationType) EditorGUILayout.EnumPopup(
                    visualEffects[a].activationType);
            GUILayout.Space(10);
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(
                new GUIContent("Prefab",
                    "The game object representation of this ability"),
                GUILayout.Width(editorDATA.labelFieldWidth));
            visualEffects[a].EffectGO =
                (GameObject) EditorGUILayout.ObjectField(
                    visualEffects[a].EffectGO,
                    typeof(GameObject), false);
            EditorGUILayout.EndHorizontal();

            visualEffects[a].UseNodeSocket =
                DrawHorizontalToggle("Use Node Socket?", "", smallFieldHeight,
                    visualEffects[a].UseNodeSocket);
            if (visualEffects[a].UseNodeSocket)
            {
                var socketIndex = getIndexFromName("NodeSocket",
                    visualEffects[a].SocketName);
                var tempSocketIndex = EditorGUILayout.Popup("Socket Name", socketIndex,
                    combatSettings.nodeSocketNames.ToArray());
                if (combatSettings.nodeSocketNames.Count > 0)
                    visualEffects[a].SocketName =
                        combatSettings.nodeSocketNames[tempSocketIndex];

                visualEffects[a].ParentedToCaster =
                    DrawHorizontalToggle("Attach to socket?", "", smallFieldHeight,
                        visualEffects[a].ParentedToCaster);
            }
            else
            {
                visualEffects[a].positionOffset =
                    DrawHorizontalVector3("Position Offset", "", smallFieldHeight,
                        visualEffects[a].positionOffset);

                visualEffects[a].ParentedToCaster =
                    DrawHorizontalToggle("Attach to caster?", "", smallFieldHeight,
                        visualEffects[a].ParentedToCaster);
            }

            visualEffects[a].effectScale =
                DrawHorizontalVector3("Effect Scale", "", smallFieldHeight,
                    visualEffects[a].effectScale);

            visualEffects[a].Sound =
                (AudioClip) EditorGUILayout.ObjectField("Audio Clip",
                    visualEffects[a].Sound,
                    typeof(AudioClip), false);
            visualEffects[a].SoundParentedToEffect =
                DrawHorizontalToggle("Attach Sound To Effect?", "", smallFieldHeight,
                    visualEffects[a].SoundParentedToEffect);
            visualEffects[a].duration =
                DrawHorizontalFloatField("Duration", "", smallFieldHeight,
                    visualEffects[a].duration);
            visualEffects[a].delay =
                DrawHorizontalFloatField("Delay", "", smallFieldHeight,
                    visualEffects[a].delay);
            
            visualEffects[a].isDestroyedOnDeath =
                DrawHorizontalToggle("Destroyed On Death?", "Is this combat visual destroyed if the caster dies?", smallFieldHeight,
                    visualEffects[a].isDestroyedOnDeath);
            visualEffects[a].isDestroyedOnStun =
                DrawHorizontalToggle("Destroyed On Stun?", "Is this combat visual destroyed if the caster is stunned?", smallFieldHeight,
                    visualEffects[a].isDestroyedOnStun);
            visualEffects[a].isDestroyedOnStealth =
                DrawHorizontalToggle("Destroyed On Stealth?", "Is this combat visual destroyed if the caster stealth?", smallFieldHeight,
                    visualEffects[a].isDestroyedOnStealth);
            visualEffects[a].isDestroyedOnStealthEnd =
                DrawHorizontalToggle("Destroyed On Stealth End?", "Is this combat visual destroyed if the caster go out of stealth?", smallFieldHeight,
                    visualEffects[a].isDestroyedOnStealthEnd);

            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        GUILayout.Space(10);
        return visualEffects; 
    }
    
    private List<RPGCombatDATA.CombatVisualAnimation> DrawVisualAnimationsList(List<RPGCombatDATA.CombatVisualAnimation> visualAnimations)
    {
        StartHorizontalMargin(middleButtonSpace, false);
        if (GUILayout.Button("+ Add Visual Animation", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(25)))
        {
            visualAnimations.Add(new RPGCombatDATA.CombatVisualAnimation());
        }

        EndHorizontalMargin(middleButtonSpace, false);

        for (var a = 0; a < visualAnimations.Count; a++)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            var requirementNumber = a + 1;
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                GUILayout.Height(20)))
            {
                visualAnimations.RemoveAt(a);
                return visualAnimations;
            }

            EditorGUILayout.LabelField("Visual:" + requirementNumber + ":");
            EditorGUILayout.EndHorizontal();
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Activate On", GUILayout.Width(editorDATA.labelFieldWidth));
            visualAnimations[a].activationType =
                (RPGCombatDATA.CombatVisualActivationType) EditorGUILayout.EnumPopup(
                    visualAnimations[a].activationType);
            GUILayout.Space(10);
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Type", GUILayout.Width(editorDATA.labelFieldWidth));
            visualAnimations[a].parameterType =
                (RPGCombatDATA.CombatVisualAnimationParameterType) EditorGUILayout.EnumPopup(
                    visualAnimations[a].parameterType);
            GUILayout.Space(10);
            EditorGUILayout.EndHorizontal();

            visualAnimations[a].animationParameter = DrawHorizontalTextField("Parameter Name", "", smallFieldHeight,
                visualAnimations[a].animationParameter);

            switch (visualAnimations[a].parameterType)
            {
                case RPGCombatDATA.CombatVisualAnimationParameterType.Bool:
                    visualAnimations[a].boolValue =
                        DrawHorizontalToggle("Bool", "", smallFieldHeight, visualAnimations[a].boolValue);
                    visualAnimations[a].duration =
                        DrawHorizontalFloatField("Duration", "", smallFieldHeight,
                            visualAnimations[a].duration);
                    break;
                case RPGCombatDATA.CombatVisualAnimationParameterType.Int:
                    visualAnimations[a].intValue =
                        DrawHorizontalIntField("Value", "", smallFieldHeight, visualAnimations[a].intValue);
                    break;
                case RPGCombatDATA.CombatVisualAnimationParameterType.Float:
                    visualAnimations[a].floatValue =
                        DrawHorizontalFloatField("Value", "", smallFieldHeight, visualAnimations[a].floatValue);
                    break;
            }
            
            visualAnimations[a].delay =
                DrawHorizontalFloatField("Delay", "", smallFieldHeight,
                    visualAnimations[a].delay);
                    
                    
            visualAnimations[a].showWeapons =
                DrawHorizontalToggle("Show Weapons?", "", smallFieldHeight,
                    visualAnimations[a].showWeapons);
            if (visualAnimations[a].showWeapons)
            {
                visualAnimations[a].showWeaponDuration =
                    DrawHorizontalFloatField("Weapons Duration", "", smallFieldHeight,
                        visualAnimations[a].showWeaponDuration);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        return visualAnimations;
    }

    private void DrawCraftingRecipeView()
    {
        if (currentlyViewedCraftingRecipe == null)
        {
            if (allCraftingRecipes.Count == 0)
            {
                CreateNew(AssetType.CraftingRecipe);
                return;
            }

            currentlyViewedCraftingRecipe = Instantiate(allCraftingRecipes[0]) as RPGCraftingRecipe;
        }
        
        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.craftingRecipeModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.craftingRecipeModuleSection.showBaseInfo);
        if (editorFilters.craftingRecipeModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedCraftingRecipe.icon = DrawIconField(currentlyViewedCraftingRecipe.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedCraftingRecipe.ID);
            currentlyViewedCraftingRecipe._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedCraftingRecipe._name);
            currentlyViewedCraftingRecipe.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedCraftingRecipe.displayName);
            currentlyViewedCraftingRecipe._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_CRAFTING_RECIPE_" + currentlyViewedCraftingRecipe._name);

            currentlyViewedCraftingRecipe.learnedByDefault =
                DrawHorizontalToggle("Known Automatically", "", smallFieldHeight,
                    currentlyViewedCraftingRecipe.learnedByDefault);

            currentlyViewedCraftingRecipe.craftingSkillREF = (RPGSkill) EditorGUILayout.ObjectField("Skill",
                RPGBuilderUtilities.GetSkillFromIDEditor(currentlyViewedCraftingRecipe.craftingSkillID,
                    allSkills), typeof(RPGSkill), false);

            currentlyViewedCraftingRecipe.craftingSkillID = currentlyViewedCraftingRecipe.craftingSkillREF != null
                ? currentlyViewedCraftingRecipe.craftingSkillREF.ID
                : -1;

            currentlyViewedCraftingRecipe.craftingStationREF =
                (RPGCraftingStation) EditorGUILayout.ObjectField("Station",
                    RPGBuilderUtilities.GetCraftingStationFromIDEditor(
                        currentlyViewedCraftingRecipe.craftingStationID, allCraftingStations),
                    typeof(RPGCraftingStation), false);

            currentlyViewedCraftingRecipe.craftingStationID = currentlyViewedCraftingRecipe.craftingStationREF != null
                ? currentlyViewedCraftingRecipe.craftingStationREF.ID
                : -1;

            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.craftingRecipeModuleSection.showRanks =
            HandleModuleBanner("RANKS", editorFilters.craftingRecipeModuleSection.showRanks);
        if (editorFilters.craftingRecipeModuleSection.showRanks)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("+ Add Rank", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
            {
                var newRankDataElement = new RPGCraftingRecipe.RPGCraftingRecipeRankData();
                currentlyViewedCraftingRecipe.ranks.Add(newRankDataElement);
            }

            if (currentlyViewedCraftingRecipe.ranks.Count > 0)
            {
                GUILayout.Space(20);
                if (GUILayout.Button("- Remove Rank", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedCraftingRecipe.ranks
                        .RemoveAt(currentlyViewedCraftingRecipe.ranks
                            .Count - 1);
                    return;
                }
            }

            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, false);

            GUILayout.Space(10);

            for (var i = 0; i < currentlyViewedCraftingRecipe.ranks.Count; i++)
            {
                StartHorizontalMargin(bigHorizontalSpace, false);

                var rankNbr = i + 1;
                GUILayout.BeginHorizontal();
                if (GUILayout.Button("Rank: " + rankNbr, skin.GetStyle("AbilityRankButton"),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedCraftingRecipe.ranks[i].ShowedInEditor =
                        !currentlyViewedCraftingRecipe.ranks[i].ShowedInEditor;
                    GUI.FocusControl(null);
                }

                if (i > 0)
                {
                    GUILayout.Space(5);
                    if (GUILayout.Button("Copy Above", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                        GUILayout.Height(smallButtonHeight)))
                    {
                        currentlyViewedCraftingRecipe.copyData(currentlyViewedCraftingRecipe.ranks[i],
                            currentlyViewedCraftingRecipe.ranks[i - 1]);
                        GUI.FocusControl(null);
                    }
                }

                GUILayout.EndHorizontal();
                EndHorizontalMargin(bigHorizontalSpace, false);

                if (currentlyViewedCraftingRecipe.ranks[i].ShowedInEditor)
                {
                    GUILayout.Space(10);
                    editorFilters.craftingRecipeModuleSection.showTalentTreeSettings =
                        HandleModuleBanner("TALENT TREE SETTINGS",
                            editorFilters.craftingRecipeModuleSection.showTalentTreeSettings);
                    if (editorFilters.craftingRecipeModuleSection.showTalentTreeSettings)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(bigHorizontalSpace, true);
                        currentlyViewedCraftingRecipe.ranks[i].unlockCost = DrawHorizontalIntField("Unlock Cost",
                            "Cost in point inside the crafting tree", smallFieldHeight,
                            currentlyViewedCraftingRecipe.ranks[i].unlockCost);
                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }

                    GUILayout.Space(10);
                    editorFilters.craftingRecipeModuleSection.showSettings =
                        HandleModuleBanner("SETTINGS", editorFilters.craftingRecipeModuleSection.showSettings);
                    if (editorFilters.craftingRecipeModuleSection.showSettings)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(bigHorizontalSpace, true);
                        currentlyViewedCraftingRecipe.ranks[i].Experience = DrawHorizontalIntField("Experience", "",
                            smallFieldHeight,
                            currentlyViewedCraftingRecipe.ranks[i].Experience);
                        currentlyViewedCraftingRecipe.ranks[i].craftTime = DrawHorizontalFloatField("Craft Duration",
                            "", smallFieldHeight,
                            currentlyViewedCraftingRecipe.ranks[i].craftTime);
                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }

                    GUILayout.Space(10);
                    editorFilters.craftingRecipeModuleSection.showCraftedItems =
                        HandleModuleBanner("CRAFTED ITEMS", editorFilters.craftingRecipeModuleSection.showCraftedItems);
                    if (editorFilters.craftingRecipeModuleSection.showCraftedItems)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"),
                            GUILayout.ExpandWidth(true), GUILayout.MaxWidth(middleButtonMaxWidth),
                            GUILayout.Height(25)))
                        {
                            currentlyViewedCraftingRecipe.ranks[i].allCraftedItems
                                .Add(new RPGCraftingRecipe.CraftedItemsDATA());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        StartHorizontalMargin(bigHorizontalSpace, true);
                        for (var a = 0; a < currentlyViewedCraftingRecipe.ranks[i].allCraftedItems.Count; a++)
                        {
                            GUILayout.Space(10);
                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();
                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedCraftingRecipe.ranks[i].allCraftedItems.RemoveAt(a);
                                return;
                            }

                            var effectName = "";
                            if (currentlyViewedCraftingRecipe.ranks
                                    [i]
                                .allCraftedItems[a].craftedItemREF != null)
                                effectName = currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a]
                                    .craftedItemREF._name;
                            EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                            EditorGUILayout.EndHorizontal();
                            currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].craftedItemREF =
                                (RPGItem) EditorGUILayout.ObjectField("Item",
                                    RPGBuilderUtilities.GetItemFromIDEditor(
                                        currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].craftedItemID,
                                        allItems), typeof(RPGItem), false);

                            currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].craftedItemID =
                                currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].craftedItemREF != null
                                    ? currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].craftedItemREF.ID
                                    : -1;

                            currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].chance =
                                DrawHorizontalSlider("Chance:", "", smallFieldHeight,
                                    currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].chance, 0f, 100f);

                            currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].count =
                                DrawHorizontalIntField("Count:", "", smallFieldHeight,
                                    currentlyViewedCraftingRecipe.ranks[i].allCraftedItems[a].count);
                        }

                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }

                    GUILayout.Space(10);
                    editorFilters.craftingRecipeModuleSection.showComponentsRequired =
                        HandleModuleBanner("COMPONENTS REQUIRED",
                            editorFilters.craftingRecipeModuleSection.showComponentsRequired);
                    if (editorFilters.craftingRecipeModuleSection.showComponentsRequired)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"),
                            GUILayout.ExpandWidth(true), GUILayout.MaxWidth(middleButtonMaxWidth),
                            GUILayout.Height(25)))
                        {
                            currentlyViewedCraftingRecipe.ranks[i].allComponents
                                .Add(new RPGCraftingRecipe.ComponentsRequired());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        StartHorizontalMargin(bigHorizontalSpace, true);
                        for (var a = 0; a < currentlyViewedCraftingRecipe.ranks[i].allComponents.Count; a++)
                        {
                            GUILayout.Space(10);
                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();
                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedCraftingRecipe.ranks[i].allComponents.RemoveAt(a);
                                return;
                            }

                            var effectName = "";
                            if (currentlyViewedCraftingRecipe.ranks
                                    [i]
                                .allComponents[a].componentItemREF != null)
                                effectName = currentlyViewedCraftingRecipe.ranks[i].allComponents[a]
                                    .componentItemREF._name;
                            EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                            EditorGUILayout.EndHorizontal();
                            currentlyViewedCraftingRecipe.ranks[i].allComponents[a].componentItemREF =
                                (RPGItem) EditorGUILayout.ObjectField("Item",
                                    RPGBuilderUtilities.GetItemFromIDEditor(
                                        currentlyViewedCraftingRecipe.ranks[i].allComponents[a].componentItemID,
                                        allItems), typeof(RPGItem), false);

                            currentlyViewedCraftingRecipe.ranks[i].allComponents[a].componentItemID =
                                currentlyViewedCraftingRecipe.ranks[i].allComponents[a].componentItemREF != null
                                    ? currentlyViewedCraftingRecipe.ranks[i].allComponents[a].componentItemREF.ID
                                    : -1;

                            currentlyViewedCraftingRecipe.ranks[i].allComponents[a].count =
                                DrawHorizontalIntField("Count:", "", smallFieldHeight,
                                    currentlyViewedCraftingRecipe.ranks[i].allComponents[a].count);
                        }

                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }
                    GUILayout.Space(30);
                }
                GUILayout.Space(10);
            }
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawBonusView()
    {
        if (currentlyViewedBonus == null)
        {
            if (allBonuses.Count == 0)
            {
                CreateNew(AssetType.Bonus);
                return;
            }

            currentlyViewedBonus = Instantiate(allBonuses[0]) as RPGBonus;
        }
        
        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.bonusModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.bonusModuleSection.showBaseInfo);
        if (editorFilters.bonusModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedBonus.icon = DrawIconField(currentlyViewedBonus.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedBonus.ID);
            currentlyViewedBonus._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedBonus._name);
            currentlyViewedBonus.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedBonus.displayName);
            currentlyViewedBonus._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_BONUS_" + currentlyViewedBonus._name);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }


        GUILayout.Space(10);
        editorFilters.bonusModuleSection.showRanks =
            HandleModuleBanner("RANKS", editorFilters.bonusModuleSection.showRanks);
        if (editorFilters.bonusModuleSection.showRanks)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("+ Add Rank", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                var newRankDataElement = new RPGBonus.RPGBonusRankDATA();
                currentlyViewedBonus.ranks.Add(newRankDataElement);
            }

            if (currentlyViewedBonus.ranks.Count > 0)
            {
                GUILayout.Space(20);
                if (GUILayout.Button("- Remove Rank", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedBonus.ranks.RemoveAt(currentlyViewedBonus.ranks.Count - 1);
                    return;
                }
            }

            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, false);

            GUILayout.Space(10);

            for (var i = 0; i < currentlyViewedBonus.ranks.Count; i++)
            {
                StartHorizontalMargin(bigHorizontalSpace, false);

                var rankNbr = i + 1;
                GUILayout.BeginHorizontal();
                if (GUILayout.Button("Rank: " + rankNbr, skin.GetStyle("AbilityRankButton"),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedBonus.ranks[i].ShowedInEditor =
                        !currentlyViewedBonus.ranks[i].ShowedInEditor;
                    GUI.FocusControl(null);
                }

                if (i > 0)
                {
                    GUILayout.Space(5);
                    if (GUILayout.Button("Copy Above", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                        GUILayout.Height(smallButtonHeight)))
                    {
                        currentlyViewedBonus.copyData(currentlyViewedBonus.ranks[i],
                            currentlyViewedBonus.ranks[i - 1]);
                        GUI.FocusControl(null);
                    }
                }

                GUILayout.EndHorizontal();
                EndHorizontalMargin(bigHorizontalSpace, false);

                if (currentlyViewedBonus.ranks[i].ShowedInEditor)
                {
                    GUILayout.Space(10);
                    editorFilters.bonusModuleSection.showTalentTreeSettings =
                        HandleModuleBanner("TALENT TREE SETTINGS",
                            editorFilters.bonusModuleSection.showTalentTreeSettings);
                    if (editorFilters.bonusModuleSection.showTalentTreeSettings)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(bigHorizontalSpace, true);
                        currentlyViewedBonus.ranks[i].unlockCost = DrawHorizontalIntField("Unlock Cost",
                            "Cost in point inside the crafting tree", smallFieldHeight,
                            currentlyViewedBonus.ranks[i].unlockCost);
                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }

                    GUILayout.Space(10);
                    editorFilters.bonusModuleSection.showRequirements =
                        HandleModuleBanner("REQUIREMENTS", editorFilters.bonusModuleSection.showRequirements);
                    if (editorFilters.bonusModuleSection.showRequirements)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Requirement", skin.GetStyle("AddButton"),
                            GUILayout.MaxWidth(middleButtonMaxWidth),
                            GUILayout.Height(25)))
                        {
                            currentlyViewedBonus.ranks[i].activeRequirements
                                .Add(new RequirementsManager.BonusRequirementDATA());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        StartHorizontalMargin(bigHorizontalSpace, true);
                        for (var a = 0; a < currentlyViewedBonus.ranks[i].activeRequirements.Count; a++)
                        {
                            GUILayout.Space(10);
                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();

                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedBonus.ranks[i]
                                    .activeRequirements.RemoveAt(a);
                                return;
                            }

                            GUILayout.Space(10);
                            EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                            currentlyViewedBonus.ranks[i]
                                    .activeRequirements[a].requirementType =
                                (RequirementsManager.BonusRequirementType) EditorGUILayout.EnumPopup(
                                    currentlyViewedBonus.ranks[i]
                                        .activeRequirements[a].requirementType);

                            EditorGUILayout.EndHorizontal();
                            EditorGUILayout.BeginVertical();

                            if (currentlyViewedBonus.ranks[i]
                                .activeRequirements.Count > 0)
                            {
                                switch (currentlyViewedBonus.ranks[i]
                                    .activeRequirements[a].requirementType)
                                {
                                    case RequirementsManager.BonusRequirementType.statState:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].statStateRequired =
                                            (RequirementsManager.StatStateType) EditorGUILayout.EnumPopup(
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .statStateRequired);
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].statREF =
                                            (RPGStat) EditorGUILayout.ObjectField("Stat:",
                                                RPGBuilderUtilities.GetStatFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a].statID,
                                                    allStats), typeof(RPGStat), false);
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].statValue =
                                            EditorGUILayout.IntField("Amount:",
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].statValue);

                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a].statREF != null)
                                        {
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].statID =
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].statREF.ID;


                                            if (!currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].statREF
                                                .isPercentStat)
                                            {
                                                currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .isStatValuePercent =
                                                    EditorGUILayout.Toggle(
                                                        new GUIContent("Is Percent?",
                                                            "Is the Stat Value a percentage?"),
                                                        currentlyViewedBonus.ranks[i]
                                                            .activeRequirements[a]
                                                            .isStatValuePercent);
                                            }
                                            else
                                            {
                                                currentlyViewedBonus.ranks[i].activeRequirements[a].isStatValuePercent =
                                                    false;
                                            }
                                        }
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].statID = -1;

                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType
                                        .weaponTypeEquipped:
                                    {
                                        var currentWeaponTypeIndex = getIndexFromName("WeaponType",
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].weaponRequired);
                                        var tempIndex2 = 0;
                                        tempIndex2 = EditorGUILayout.Popup("Weapon Type", currentWeaponTypeIndex,
                                            itemSettings.weaponTypeList.ToArray());
                                        if (itemSettings.weaponTypeList.Count > 0)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].weaponRequired =
                                                itemSettings.weaponTypeList[tempIndex2];
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.pointSpent:
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].pointSpentValue =
                                            EditorGUILayout.IntField(
                                                new GUIContent("Points Spent",
                                                    "How many points should already be spent in this tree for this bonus to be active?"),
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .pointSpentValue);
                                        break;
                                    case RequirementsManager.BonusRequirementType.classLevel:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].classRequiredREF =
                                            (RPGClass) EditorGUILayout.ObjectField(
                                                new GUIContent("Class",
                                                    "The class required for this bonus to be active"),
                                                RPGBuilderUtilities.GetClassFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .classRequiredID, allClasses), typeof(RPGClass), false);
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].classLevelValue =
                                            EditorGUILayout.IntField(
                                                new GUIContent("Level", "The class level required"),
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .classLevelValue);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .classRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].classRequiredID
                                                = currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .classRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .classRequiredID = -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType._class:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].classRequiredREF =
                                            (RPGClass) EditorGUILayout.ObjectField(
                                                new GUIContent("Class",
                                                    "The class required for this bonus to be active"),
                                                RPGBuilderUtilities.GetClassFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .classRequiredID, allClasses), typeof(RPGClass), false);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .classRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].classRequiredID
                                                = currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .classRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .classRequiredID = -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.skillLevel:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].skillRequiredREF =
                                            (RPGSkill) EditorGUILayout.ObjectField(
                                                new GUIContent("Skill",
                                                    "The skill required for this bonus to be active"),
                                                RPGBuilderUtilities.GetSkillFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .skillRequiredID, allSkills), typeof(RPGSkill), false);
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].skillLevelValue =
                                            EditorGUILayout.IntField(
                                                new GUIContent("Level", "The skill level required"),
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .skillLevelValue);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .skillRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].skillRequiredID
                                                = currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .skillRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .skillRequiredID = -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.itemOwned:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].itemRequiredREF =
                                            (RPGItem) EditorGUILayout.ObjectField(
                                                new GUIContent("Item", "The item required"),
                                                RPGBuilderUtilities.GetItemFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .itemRequiredID, allItems), typeof(RPGItem), false);
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].itemEquipped =
                                            EditorGUILayout.Toggle(
                                                new GUIContent("Equipped?", "Does the item needs to be equipped?"),
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .itemEquipped);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .itemRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].itemRequiredID =
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .itemRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].itemRequiredID =
                                                -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.abilityKnown:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].abilityRequiredREF =
                                            (RPGAbility) EditorGUILayout.ObjectField(
                                                new GUIContent("Ability",
                                                    "The ability required to be known for this bonus to be active"),
                                                RPGBuilderUtilities.GetAbilityFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .abilityRequiredID, allAbilities), typeof(RPGAbility), false);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .abilityRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .abilityRequiredID = currentlyViewedBonus.ranks[i]

                                                .activeRequirements[a].abilityRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .abilityRequiredID = -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.recipeKnown:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].recipeRequiredREF =
                                            (RPGCraftingRecipe) EditorGUILayout.ObjectField(
                                                new GUIContent("Recipe",
                                                    "The crafting recipe required to be known for this bonus to be active"),
                                                RPGBuilderUtilities.GetCraftingRecipeFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .craftingRecipeRequiredID, allCraftingRecipes),
                                                typeof(RPGCraftingRecipe), false);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .recipeRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .craftingRecipeRequiredID = currentlyViewedBonus.ranks[i]

                                                .activeRequirements[a].recipeRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .craftingRecipeRequiredID = -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType
                                        .resourceNodeKnown:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .resourceNodeRequiredREF =
                                            (RPGResourceNode) EditorGUILayout.ObjectField(
                                                new GUIContent("Resource Node",
                                                    "The resource node required to be known for this bonus to be active"),
                                                RPGBuilderUtilities.GetResourceNodeFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .resourceNodeRequiredID, allResourceNodes),
                                                typeof(RPGResourceNode), false);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .resourceNodeRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .resourceNodeRequiredID = currentlyViewedBonus.ranks[i]

                                                .activeRequirements[a].resourceNodeRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .resourceNodeRequiredID = -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.race:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].raceRequiredREF =
                                            (RPGRace) EditorGUILayout.ObjectField(
                                                new GUIContent("Race", "The race required"),
                                                RPGBuilderUtilities.GetRaceFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .raceRequiredID, allRaces), typeof(RPGRace), false);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .raceRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].raceRequiredID =
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .raceRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].raceRequiredID =
                                                -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.questState:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].questRequiredREF =
                                            (RPGQuest) EditorGUILayout.ObjectField(
                                                new GUIContent("Quest",
                                                    "The quest required for this bonus to be active"),
                                                RPGBuilderUtilities.GetQuestFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .questRequiredID, allQuests), typeof(RPGQuest), false);
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].questStateRequired =
                                            (QuestManager.questState) EditorGUILayout.EnumPopup(
                                                new GUIContent("State", "The required state of the quest"),
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .questStateRequired);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .questRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].questRequiredID
                                                = currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .questRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .questRequiredID = -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.npcKilled:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].npcRequiredREF =
                                            (RPGNpc) EditorGUILayout.ObjectField(
                                                new GUIContent("NPC", "The NPC required to be killed"),
                                                RPGBuilderUtilities.GetNPCFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .npcRequiredID, allNPCs), typeof(RPGNpc), false);
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].npcKillsRequired =
                                            EditorGUILayout.IntField(
                                                new GUIContent("Kills",
                                                    "How many times this NPC should have been killed for the bonus to be active"),
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .npcKillsRequired);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .npcRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].npcRequiredID =
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .npcRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].npcRequiredID =
                                                -1;
                                        break;
                                    }
                                    case RequirementsManager.BonusRequirementType.weaponTemplateLevel:
                                    {
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].weaponTemplateRequiredREF =
                                            (RPGWeaponTemplate) EditorGUILayout.ObjectField(
                                                new GUIContent("Weapon Template",
                                                    "The weapon template required for this bonus to be active"),
                                                RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(
                                                    currentlyViewedBonus.ranks[i]
                                                        .activeRequirements[a]
                                                        .weaponTemplateRequiredID, allWeaponTemplates),
                                                typeof(RPGWeaponTemplate), false);
                                        currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a].weaponTemplateLevelValue =
                                            EditorGUILayout.IntField(
                                                new GUIContent("Level", "The skill level required"),
                                                currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .weaponTemplateLevelValue);
                                        if (currentlyViewedBonus.ranks[i]
                                            .activeRequirements[a]
                                            .weaponTemplateRequiredREF != null)
                                            currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a].weaponTemplateRequiredID
                                                = currentlyViewedBonus.ranks[i]
                                                    .activeRequirements[a]
                                                    .weaponTemplateRequiredREF.ID;
                                        else
                                            currentlyViewedBonus.ranks[i]
                                                .activeRequirements[a]
                                                .weaponTemplateRequiredID = -1;
                                        break;
                                    }
                                }
                            }

                            EditorGUILayout.EndVertical();
                        }
                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }

                    GUILayout.Space(10);
                    editorFilters.bonusModuleSection.showBonuses =
                        HandleModuleBanner("BONUSES", editorFilters.bonusModuleSection.showBonuses);
                    if (editorFilters.bonusModuleSection.showBonuses)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(middleButtonSpace, false);
                            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"),
                                GUILayout.ExpandWidth(true),
                                GUILayout.MaxWidth(middleButtonMaxWidth),
                                GUILayout.Height(25)))
                            {
                                currentlyViewedBonus.ranks[i].statEffectsData
                                    .Add(new RPGEffect.STAT_EFFECTS_DATA());
                            }

                            EndHorizontalMargin(middleButtonSpace, false);

                            StartHorizontalMargin(bigHorizontalSpace, true);
                            for (var a = 0; a < currentlyViewedBonus.ranks[i].statEffectsData.Count; a++)
                            {
                                GUILayout.Space(10);
                                StartHorizontalMargin(bigHorizontalSpace, true);
                                var requirementNumber = a + 1;
                                EditorGUILayout.BeginHorizontal();
                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                    GUILayout.Height(20)))
                                {
                                    currentlyViewedBonus.ranks[i].statEffectsData.RemoveAt(a);
                                    return;
                                }

                                var statName = "";
                                if (currentlyViewedBonus.ranks[i].statEffectsData[a].statREF != null)
                                    statName = currentlyViewedBonus.ranks[i].statEffectsData[a].statREF
                                        .displayName;
                                EditorGUILayout.LabelField("" + requirementNumber + ": " + statName);
                                EditorGUILayout.EndHorizontal();
                                
                                currentlyViewedBonus.ranks[i].statEffectsData[a].statID =
                                    DrawRPGDataEntryField(currentlyViewedBonus.ranks[i].statEffectsData[a].statID,
                                        "Stat", "Stat");
                                currentlyViewedBonus.ranks[i].statEffectsData[a].statEffectModification =
                                    DrawHorizontalFloatField("Value",
                                        "",
                                        smallFieldHeight,
                                        currentlyViewedBonus.ranks[i].statEffectsData[a].statEffectModification);

                                if (currentlyViewedBonus.ranks[i].statEffectsData[a].statID != -1)
                                {
                                    RPGStat statREF = RPGBuilderUtilities.GetStatFromIDEditor(
                                        currentlyViewedBonus.ranks[i].statEffectsData[a].statID, allStats);
                                    if (!statREF.isPercentStat)
                                    {
                                        currentlyViewedBonus.ranks[i].statEffectsData[a].isPercent =
                                            DrawHorizontalToggle("Is Percent?",
                                                "",
                                                smallFieldHeight,
                                                currentlyViewedBonus.ranks[i].statEffectsData[a].isPercent);
                                    }
                                    else
                                    {
                                        currentlyViewedBonus.ranks[i].statEffectsData[a].isPercent = false;
                                    }
                                }

                                EndHorizontalMargin(bigHorizontalSpace, true);
                                GUILayout.Space(10);
                            }
                        
                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }
                }
                GUILayout.Space(20);
            }
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }


    private void DrawCraftingStationView()
    {
        if (currentlyViewedCraftingStation == null)
        {
            if (allCraftingStations.Count == 0)
            {
                CreateNew(AssetType.CraftingStation);
                return;
            }

            currentlyViewedCraftingStation = Instantiate(allCraftingStations[0]) as RPGCraftingStation;
        }
        
        UpdateViewData();
        UpdateFieldData();
        
        ScriptableObject scriptableObj = currentlyViewedCraftingStation;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.craftingStationModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.craftingStationModuleSection.showBaseInfo);
        if (editorFilters.craftingStationModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedCraftingStation.icon = DrawIconField(currentlyViewedCraftingStation.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedCraftingStation.ID);
            currentlyViewedCraftingStation._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedCraftingStation._name);
            currentlyViewedCraftingStation.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedCraftingStation.displayName);
            currentlyViewedCraftingStation._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_CRAFTING_STATION_" + currentlyViewedCraftingStation._name);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.craftingStationModuleSection.showSkills =
            HandleModuleBanner("SKILLS", editorFilters.craftingStationModuleSection.showSkills);
        if (editorFilters.craftingStationModuleSection.showSkills)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Skill", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedCraftingStation.craftSkills.Add(new RPGCraftingStation.CraftSkillsDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("craftSkills");
            currentlyViewedCraftingStation.craftSkills =
                GetTargetObjectOfProperty(ThisList2) as List<RPGCraftingStation.CraftSkillsDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedCraftingStation.craftSkills.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedCraftingStation.craftSkills.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedCraftingStation.craftSkills[a].craftSkillREF != null)
                    effectName = currentlyViewedCraftingStation.craftSkills[a].craftSkillREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedCraftingStation.craftSkills[a].craftSkillREF =
                    (RPGSkill) EditorGUILayout.ObjectField("Skill",
                        RPGBuilderUtilities.GetSkillFromIDEditor(
                            currentlyViewedCraftingStation.craftSkills[a].craftSkillID, allSkills),
                        typeof(RPGSkill), false);

                currentlyViewedCraftingStation.craftSkills[a].craftSkillID =
                    currentlyViewedCraftingStation.craftSkills[a].craftSkillREF != null
                        ? currentlyViewedCraftingStation.craftSkills[a].craftSkillREF.ID
                        : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }


    private int getRealNodeIndex(int tempAbIndex)
    {
        for (var i = 0; i < currentlyViewedTalentTree.nodeList.Count; i++)
            if (tempNodeLIst[tempAbIndex] == currentlyViewedTalentTree.nodeList[i])
                return i;
        return -1;
    }

    private void DrawGearSetView()
    {
        if (currentlyViewedGearSet == null)
        {
            if (allGearSets.Count == 0)
            {
                CreateNew(AssetType.GearSet);
                return;
            }

            currentlyViewedGearSet = Instantiate(allGearSets[0]) as RPGGearSet;
        }
        UpdateViewData();
        UpdateFieldData();
        
        ScriptableObject scriptableObj = currentlyViewedGearSet;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.gearSetModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.gearSetModuleSection.showBaseInfo);
        if (editorFilters.gearSetModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedGearSet.ID);
            currentlyViewedGearSet._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedGearSet._name);
            currentlyViewedGearSet.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedGearSet.displayName);
            currentlyViewedGearSet._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_GEAR_SET_" + currentlyViewedGearSet._name);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.merchantTableModuleSection.showItems =
            HandleModuleBanner("ITEMS", editorFilters.merchantTableModuleSection.showItems);
        if (editorFilters.merchantTableModuleSection.showItems)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedGearSet.itemsInSet.Add(new RPGGearSet.itemInSet());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("itemsInSet");
            currentlyViewedGearSet.itemsInSet =
                GetTargetObjectOfProperty(ThisList2) as List<RPGGearSet.itemInSet>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedGearSet.itemsInSet.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedGearSet.itemsInSet.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedGearSet.itemsInSet[a].itemREF != null)
                    effectName = currentlyViewedGearSet.itemsInSet[a].itemREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedGearSet.itemsInSet[a].itemREF =
                    (RPGItem) EditorGUILayout.ObjectField("Item",
                        RPGBuilderUtilities.GetItemFromIDEditor(
                            currentlyViewedGearSet.itemsInSet[a].itemID, allItems), typeof(RPGItem), false);

                currentlyViewedGearSet.itemsInSet[a].itemID = currentlyViewedGearSet.itemsInSet[a].itemREF != null
                    ? currentlyViewedGearSet.itemsInSet[a].itemREF.ID
                    : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.gearSetModuleSection.showTiers =
            HandleModuleBanner("TIERS", editorFilters.gearSetModuleSection.showTiers);
        if (editorFilters.gearSetModuleSection.showTiers)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Tier", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedGearSet.gearSetTiers.Add(new RPGGearSet.GearSetTier());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList3 = serialObj.FindProperty("gearSetTiers");
            currentlyViewedGearSet.gearSetTiers =
                GetTargetObjectOfProperty(ThisList3) as List<RPGGearSet.GearSetTier>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedGearSet.gearSetTiers.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedGearSet.gearSetTiers.RemoveAt(a);
                    return;
                }

                EditorGUILayout.LabelField("Tier " + requirementNumber + ": ");
                EditorGUILayout.EndHorizontal();

                currentlyViewedGearSet.gearSetTiers[a].equippedAmount = DrawHorizontalIntField("Equipped Amt", "",
                    smallFieldHeight,
                    currentlyViewedGearSet.gearSetTiers[a].equippedAmount);

                for (var t = 0; t < currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats.Count; t++)
                {
                    var statNumber = t + 1;
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats.RemoveAt(t);
                        return;
                    }

                    var effectName = "";
                    if (currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statREF != null)
                        effectName = currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statREF
                            ._name;
                    EditorGUILayout.LabelField("" + statNumber + ": " + effectName);
                    EditorGUILayout.EndHorizontal();

                    currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statREF =
                        (RPGStat) EditorGUILayout.ObjectField("Stat",
                            RPGBuilderUtilities.GetStatFromIDEditor(
                                currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statID,
                                allStats), typeof(RPGStat), false);

                    currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].amount = DrawHorizontalFloatField(
                        "Amount", "",
                        smallFieldHeight,
                        currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].amount);

                    if (currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statREF != null)
                    {
                        currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statID =
                            currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statREF.ID;

                        if (!currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statREF.isPercentStat)
                        {
                            currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].isPercent = DrawHorizontalToggle(
                                "Is Percent?", "",
                                smallFieldHeight,
                                currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].isPercent);
                        }
                        else
                        {
                            currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].isPercent = false;
                        }
                    }
                    else
                        currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats[t].statID = -1;
                }

                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace - 50, false);
                if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedGearSet.gearSetTiers[a].gearSetTierStats
                        .Add(new RPGGearSet.GearSetTier.GearSetTierStat());
                }
                EndHorizontalMargin(middleButtonSpace - 50, false);

                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace - 50, false);
                GUILayout.Box(editorDATA.gearSetsSeparator, skin.GetStyle("CustomImage"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(15));
                EndHorizontalMargin(middleButtonSpace - 50, false);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawEnchantmentView()
    {
        if (currentlyViewedEnchantment == null)
        {
            if (allEnchantments.Count == 0)
            {
                CreateNew(AssetType.Enchantment);
                return;
            }

            currentlyViewedEnchantment = Instantiate(allEnchantments[0]) as RPGEnchantment;
        }
        
        UpdateViewData();
        UpdateFieldData();
        
        ScriptableObject scriptableObj = currentlyViewedEnchantment;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.enchantmentModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.enchantmentModuleSection.showBaseInfo);
        if (editorFilters.enchantmentModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedEnchantment.ID);
            currentlyViewedEnchantment._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedEnchantment._name);
            currentlyViewedEnchantment.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedEnchantment.displayName);
            currentlyViewedEnchantment._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_ENCHANTMENT_" + currentlyViewedEnchantment._name);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.enchantmentModuleSection.showRequirements =
            HandleModuleBanner("REQUIREMENTS", editorFilters.enchantmentModuleSection.showRequirements);
        if (editorFilters.enchantmentModuleSection.showRequirements)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Requirement", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedEnchantment.applyRequirements.Add(new RPGEnchantment.ApplyRequirements());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("applyRequirements");
            currentlyViewedEnchantment.applyRequirements = GetTargetObjectOfProperty(ThisList2) as List<RPGEnchantment.ApplyRequirements>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedEnchantment.applyRequirements.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedEnchantment.applyRequirements.RemoveAt(a);
                    return;
                }

                EditorGUILayout.LabelField("" + requirementNumber + ": ");
                EditorGUILayout.EndHorizontal();
                currentlyViewedEnchantment.applyRequirements[a].type =
                    (RPGEnchantment.ApplyRequirementType) EditorGUILayout.EnumPopup("Type:",
                        currentlyViewedEnchantment.applyRequirements[a].type, GUILayout.Height(15));

                switch (currentlyViewedEnchantment.applyRequirements[a].type)
                {
                    case RPGEnchantment.ApplyRequirementType.ItemType:
                        var index1 = getIndexFromName("ItemType",
                            currentlyViewedEnchantment.applyRequirements[a].itemType);
                        var tempIndex1 = 0;
                        tempIndex1 = EditorGUILayout.Popup("Item Type", index1, itemSettings.itemTypeList.ToArray());
                        if (itemSettings.itemTypeList.Count > 0)
                            currentlyViewedEnchantment.applyRequirements[a].itemType =
                                itemSettings.itemTypeList[tempIndex1];
                        break;
                    case RPGEnchantment.ApplyRequirementType.ItemRarity:
                        var index2 = getIndexFromName("ItemRarity",
                            currentlyViewedEnchantment.applyRequirements[a].itemRarity);
                        var tempIndex2 = 0;
                        tempIndex2 = EditorGUILayout.Popup("Item Rarity", index2, itemSettings.itemRarityList.ToArray());
                        if (itemSettings.itemRarityList.Count > 0)
                            currentlyViewedEnchantment.applyRequirements[a].itemRarity =
                                itemSettings.itemRarityList[tempIndex2];
                        break;
                    case RPGEnchantment.ApplyRequirementType.ArmorType:
                        var index3 = getIndexFromName("ArmorType",
                            currentlyViewedEnchantment.applyRequirements[a].armorType);
                        var tempIndex3 = 0;
                        tempIndex3 = EditorGUILayout.Popup("Armor Type", index3, itemSettings.armorTypeList.ToArray());
                        if (itemSettings.armorTypeList.Count > 0)
                            currentlyViewedEnchantment.applyRequirements[a].armorType =
                                itemSettings.armorTypeList[tempIndex3];
                        break;
                    case RPGEnchantment.ApplyRequirementType.ArmorSlot:
                        var index4 = getIndexFromName("ArmorSlots",
                            currentlyViewedEnchantment.applyRequirements[a].armorSlot);
                        var tempIndex4 = 0;
                        tempIndex4 = EditorGUILayout.Popup("Armor Slot", index4, itemSettings.armorSlotsList.ToArray());
                        if (itemSettings.armorSlotsList.Count > 0)
                            currentlyViewedEnchantment.applyRequirements[a].armorSlot =
                                itemSettings.armorSlotsList[tempIndex4];
                        break;
                    case RPGEnchantment.ApplyRequirementType.WeaponType:
                        var index5 = getIndexFromName("WeaponType",
                            currentlyViewedEnchantment.applyRequirements[a].weaponType);
                        var tempIndex5 = 0;
                        tempIndex5 = EditorGUILayout.Popup("Weapon Type", index5, itemSettings.weaponTypeList.ToArray());
                        if (itemSettings.weaponTypeList.Count > 0)
                            currentlyViewedEnchantment.applyRequirements[a].weaponType =
                                itemSettings.weaponTypeList[tempIndex5];
                        break;
                    case RPGEnchantment.ApplyRequirementType.WeaponSlot:
                        var index6 = getIndexFromName("SlotType",
                            currentlyViewedEnchantment.applyRequirements[a].weaponSlot);
                        var tempIndex6 = 0;
                        tempIndex6 = EditorGUILayout.Popup("Weapon Slot", index6, itemSettings.slotTypeList.ToArray());
                        if (itemSettings.slotTypeList.Count > 0)
                            currentlyViewedEnchantment.applyRequirements[a].weaponSlot =
                                itemSettings.slotTypeList[tempIndex6];
                        break;
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.enchantmentModuleSection.showTiers =
            HandleModuleBanner("TIERS", editorFilters.enchantmentModuleSection.showTiers);
        if (editorFilters.enchantmentModuleSection.showTiers)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Tier", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedEnchantment.enchantmentTiers.Add(new RPGEnchantment.EnchantmentTier());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList3 = serialObj.FindProperty("enchantmentTiers");
            currentlyViewedEnchantment.enchantmentTiers =
                GetTargetObjectOfProperty(ThisList3) as List<RPGEnchantment.EnchantmentTier>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedEnchantment.enchantmentTiers.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedEnchantment.enchantmentTiers.RemoveAt(a);
                    return;
                }

                EditorGUILayout.LabelField("Tier " + requirementNumber + ": ");
                EditorGUILayout.EndHorizontal();

                currentlyViewedEnchantment.enchantmentTiers[a].successRate =
                    DrawHorizontalSlider("Success Rate", "",
                        smallFieldHeight,
                        currentlyViewedEnchantment.enchantmentTiers[a].successRate, 0f, 100f);

                currentlyViewedEnchantment.enchantmentTiers[a].enchantTime = DrawHorizontalFloatField("Enchanting Time",
                    "",
                    smallFieldHeight,
                    currentlyViewedEnchantment.enchantmentTiers[a].enchantTime);

                GUILayout.Space(5);
                EditorGUILayout.LabelField("Skill Settings:");
                currentlyViewedEnchantment.enchantmentTiers[a].skillREF =
                    (RPGSkill) EditorGUILayout.ObjectField("Skill",
                        RPGBuilderUtilities.GetSkillFromIDEditor(
                            currentlyViewedEnchantment.enchantmentTiers[a].skillID,
                            allSkills), typeof(RPGSkill), false);

                currentlyViewedEnchantment.enchantmentTiers[a].skillXPAmount = DrawHorizontalIntField("Skill EXP", "",
                    smallFieldHeight,
                    currentlyViewedEnchantment.enchantmentTiers[a].skillXPAmount);

                currentlyViewedEnchantment.enchantmentTiers[a].skillID =
                    currentlyViewedEnchantment.enchantmentTiers[a].skillREF != null
                        ? currentlyViewedEnchantment.enchantmentTiers[a].skillREF.ID
                        : -1;

                GUILayout.Space(5);
                EditorGUILayout.LabelField("Visual:");
                currentlyViewedEnchantment.enchantmentTiers[a].enchantingParticle =
                    (GameObject) EditorGUILayout.ObjectField("Particle",
                        currentlyViewedEnchantment.enchantmentTiers[a].enchantingParticle, typeof(GameObject), false);

                GUILayout.Space(10);

                EditorGUILayout.LabelField("Currency Cost:");
                for (var t = 0; t < currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts.Count; t++)
                {
                    var statNumber = t + 1;
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts.RemoveAt(t);
                        return;
                    }

                    var effectName = "";
                    if (currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].costCurrencyREF != null)
                        effectName = currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].costCurrencyREF
                            ._name;
                    EditorGUILayout.LabelField("" + statNumber + ": " + effectName);
                    EditorGUILayout.EndHorizontal();

                    currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].costCurrencyREF =
                        (RPGCurrency) EditorGUILayout.ObjectField("Currency",
                            RPGBuilderUtilities.GetCurrencyFromIDEditor(
                                currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].currencyID,
                                allCurrencies), typeof(RPGCurrency), false);

                    currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].amount = DrawHorizontalIntField(
                        "Amount", "",
                        smallFieldHeight,
                        currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].amount);

                    currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].currencyID =
                        currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].costCurrencyREF != null
                            ? currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts[t].costCurrencyREF.ID
                            : -1;

                    GUILayout.Space(10);
                }

                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace - 50, false);
                if (GUILayout.Button("+ Add Currency Cost", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedEnchantment.enchantmentTiers[a].currencyCosts.Add(new RPGEnchantment.CurrencyCost());
                }

                EndHorizontalMargin(middleButtonSpace - 50, false);

                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace - 50, false);
                GUILayout.Box(editorDATA.smallSeparator, skin.GetStyle("CustomImage"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(15));
                EndHorizontalMargin(middleButtonSpace - 50, false);

                EditorGUILayout.LabelField("Item Cost:");
                for (var t = 0; t < currentlyViewedEnchantment.enchantmentTiers[a].itemCosts.Count; t++)
                {
                    var statNumber = t + 1;
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        currentlyViewedEnchantment.enchantmentTiers[a].itemCosts.RemoveAt(t);
                        return;
                    }

                    var effectName = "";
                    if (currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemREF != null)
                        effectName = currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemREF._name;
                    EditorGUILayout.LabelField("" + statNumber + ": " + effectName);
                    EditorGUILayout.EndHorizontal();
                    currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemREF =
                        (RPGItem) EditorGUILayout.ObjectField("Item",
                            RPGBuilderUtilities.GetItemFromIDEditor(
                                currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemID,
                                allItems), typeof(RPGItem), false);

                    currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemCount = DrawHorizontalIntField(
                        "Count", "",
                        smallFieldHeight,
                        currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemCount);

                    currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemID =
                        currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemREF != null
                            ? currentlyViewedEnchantment.enchantmentTiers[a].itemCosts[t].itemREF.ID
                            : -1;

                    GUILayout.Space(15);
                }

                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace - 50, false);
                if (GUILayout.Button("+ Add Item Cost", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedEnchantment.enchantmentTiers[a].itemCosts.Add(new RPGEnchantment.ItemCost());
                }

                EndHorizontalMargin(middleButtonSpace - 50, false);

                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace - 50, false);
                GUILayout.Box(editorDATA.smallSeparator, skin.GetStyle("CustomImage"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(15));
                EndHorizontalMargin(middleButtonSpace - 50, false);

                EditorGUILayout.LabelField("Stat Bonuses:");
                for (var t = 0; t < currentlyViewedEnchantment.enchantmentTiers[a].stats.Count; t++)
                {
                    var statNumber = t + 1;
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        currentlyViewedEnchantment.enchantmentTiers[a].stats.RemoveAt(t);
                        return;
                    }

                    var effectName = "";
                    if (currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statREF != null)
                        effectName = currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statREF
                            ._name;
                    EditorGUILayout.LabelField("" + statNumber + ": " + effectName);
                    EditorGUILayout.EndHorizontal();
                    currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statREF =
                        (RPGStat) EditorGUILayout.ObjectField("Stat",
                            RPGBuilderUtilities.GetStatFromIDEditor(
                                currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statID,
                                allStats), typeof(RPGStat), false);

                    currentlyViewedEnchantment.enchantmentTiers[a].stats[t].amount = DrawHorizontalFloatField(
                        "Amount", "",
                        smallFieldHeight,
                        currentlyViewedEnchantment.enchantmentTiers[a].stats[t].amount);

                    if (currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statREF != null)
                    {
                        currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statID =
                            currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statREF.ID;

                        if (!currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statREF.isPercentStat)
                        {
                            currentlyViewedEnchantment.enchantmentTiers[a].stats[t].isPercent = DrawHorizontalToggle(
                                "Is Percent?", "",
                                smallFieldHeight,
                                currentlyViewedEnchantment.enchantmentTiers[a].stats[t].isPercent);
                        }
                        else
                        {
                            currentlyViewedEnchantment.enchantmentTiers[a].stats[t].isPercent = false;
                        }
                    }
                    else
                        currentlyViewedEnchantment.enchantmentTiers[a].stats[t].statID = -1;

                    GUILayout.Space(15);
                }

                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace - 50, false);
                if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedEnchantment.enchantmentTiers[a].stats.Add(new RPGEnchantment.TierStat());
                }

                EndHorizontalMargin(middleButtonSpace - 50, false);

                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace - 50, false);
                GUILayout.Box(editorDATA.gearSetsSeparator, skin.GetStyle("CustomImage"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(15));
                EndHorizontalMargin(middleButtonSpace - 50, false);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private List<RPGTalentTree.Node_DATA> tempNodeLIst = new List<RPGTalentTree.Node_DATA>();


    private void HandleTalentTreesTempNodeList()
    {
        tempNodeLIst.Clear();
        if (!editorFilters.talentTreeModuleSection.showNodes)
        {
            return;
        }
        var tempSearchText2 = "";
        if (!string.IsNullOrEmpty(curCraftingTreeSearchText))
            tempSearchText2 = curCraftingTreeSearchText.ToLower();

        foreach (var t in currentlyViewedTalentTree.nodeList)
        {
            var nodeIsNull = false;
            var nodeName2 = "";

            switch (t.nodeType)
            {
                case RPGTalentTree.TalentTreeNodeType.ability:
                    nodeIsNull = t.abilityID == -1;
                    nodeName2 = "";
                    var abREF = RPGBuilderUtilities.GetAbilityFromIDEditor(
                        t.abilityID, allAbilities);
                    if (!nodeIsNull && abREF != null)
                    {
                        nodeName2 = abREF._name;
                        nodeName2 = nodeName2.ToLower();
                    }

                    break;
                case RPGTalentTree.TalentTreeNodeType.recipe:
                    nodeIsNull = t.recipeID == -1;
                    nodeName2 = "";
                    var recipeREF =
                        RPGBuilderUtilities.GetCraftingRecipeFromIDEditor(
                            t.recipeID, allCraftingRecipes);
                    if (!nodeIsNull && recipeREF != null)
                    {
                        nodeName2 = recipeREF._name;
                        nodeName2 = nodeName2.ToLower();
                    }

                    break;
                case RPGTalentTree.TalentTreeNodeType.resourceNode:
                    nodeIsNull = t.resourceNodeID == -1;
                    nodeName2 = "";
                    var resourceREF = RPGBuilderUtilities.GetResourceNodeFromIDEditor(
                        t.resourceNodeID, allResourceNodes);
                    if (!nodeIsNull && resourceREF != null)
                    {
                        nodeName2 = resourceREF._name;
                        nodeName2 = nodeName2.ToLower();
                    }

                    break;
                case RPGTalentTree.TalentTreeNodeType.bonus:
                    nodeIsNull = t.bonusID == -1;
                    nodeName2 = "";
                    var bonusREF =
                        RPGBuilderUtilities.GetBonusFromIDEditor(
                            t.bonusID, allBonuses);
                    if (!nodeIsNull && bonusREF != null)
                    {
                        nodeName2 = bonusREF._name;
                        nodeName2 = nodeName2.ToLower();
                    }

                    break;
            }

            if (string.IsNullOrEmpty(curCraftingTreeSearchText) || nodeName2.Contains(tempSearchText2))
            {
                tempNodeLIst.Add(t);
            }
        }
    }

    private void DrawTalentTreeView()
    {
        if (currentlyViewedTalentTree == null)
        {
            if (allTalentTrees.Count == 0)
            {
                CreateNew(AssetType.TalentTree);
                return;
            }

            currentlyViewedTalentTree = Instantiate(allTalentTrees[0]) as RPGTalentTree;
        }
        
        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.talentTreeModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.talentTreeModuleSection.showBaseInfo);
        if (editorFilters.talentTreeModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedTalentTree.icon = DrawIconField(currentlyViewedTalentTree.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedTalentTree.ID);
            currentlyViewedTalentTree._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedTalentTree._name);
            currentlyViewedTalentTree.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedTalentTree.displayName);
            currentlyViewedTalentTree._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_TALENT_TREE_" + currentlyViewedTalentTree._name);

            currentlyViewedTalentTree.treePointAcceptedREF = (RPGTreePoint) EditorGUILayout.ObjectField("Point Type",
                RPGBuilderUtilities.GetTreePointFromIDEditor(currentlyViewedTalentTree.treePointAcceptedID,
                    allTreePoints), typeof(RPGTreePoint), false, GUILayout.Height(15));

            currentlyViewedTalentTree.treePointAcceptedID = currentlyViewedTalentTree.treePointAcceptedREF != null
                ? currentlyViewedTalentTree.treePointAcceptedREF.ID
                : -1;

            currentlyViewedTalentTree.TiersAmount =
                DrawHorizontalIntField("Tier Amount", "",
                    smallFieldHeight,
                    currentlyViewedTalentTree.TiersAmount);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        HandleTalentTreesTempNodeList();

        GUILayout.Space(10);
        editorFilters.talentTreeModuleSection.showNodes =
            HandleModuleBanner("NODES", editorFilters.talentTreeModuleSection.showNodes);
        if (editorFilters.talentTreeModuleSection.showNodes)
        {
            ScriptableObject scriptableObj = currentlyViewedTalentTree;
            var serialObj = new SerializedObject(scriptableObj);
            var ThisList = serialObj.FindProperty("nodeList");

            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Node", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedTalentTree.nodeList.Add(new RPGTalentTree.Node_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);
            GUILayout.Space(10);

            StartHorizontalMargin(middleButtonSpace - 50, false);
            curCraftingTreeSearchText = GUILayout.TextArea(curCraftingTreeSearchText,
                skin.GetStyle("SearchBarSmall"), GUILayout.MinWidth(150), GUILayout.ExpandWidth(true),
                GUILayout.Height(30));
            GUILayout.Box(editorDATA.searchIcon, GUILayout.Width(30), GUILayout.Height(30));
            EndHorizontalMargin(middleButtonSpace - 50, false);
            GUILayout.Space(10);

            currentlyViewedTalentTree.nodeList = GetTargetObjectOfProperty(ThisList) as List<RPGTalentTree.Node_DATA>;

            for (var i = 0; i < tempNodeLIst.Count; i++)
            {
                var realAbTreeIndex = getRealNodeIndex(i);
                var abName = "";
                var abIcon = editorDATA.abilityNullSprite;
                switch (currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType)
                {
                    case RPGTalentTree.TalentTreeNodeType.ability:
                    {
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID = -1;
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID = -1;
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID = -1;
                        if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID != -1)
                        {
                            var abilityREF = RPGBuilderUtilities.GetAbilityFromIDEditor(
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID, allAbilities);
                            if (abilityREF != null)
                            {
                                abName = abilityREF._name;
                                if (abilityREF.icon != null)
                                    abIcon = abilityREF.icon.texture;
                            }
                        }
                        else
                        {
                            abName = "EMPTY NODE";
                        }

                        break;
                    }
                    case RPGTalentTree.TalentTreeNodeType.bonus:
                    {
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID = -1;
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID = -1;
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID = -1;
                        if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID != -1)
                        {
                            var bonusREF = RPGBuilderUtilities.GetBonusFromIDEditor(
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID, allBonuses);
                            if (bonusREF != null)
                            {
                                abName = bonusREF._name;
                                if (bonusREF.icon != null)
                                    abIcon = bonusREF.icon.texture;
                            }
                        }
                        else
                        {
                            abName = "EMPTY NODE";
                        }

                        break;
                    }
                    case RPGTalentTree.TalentTreeNodeType.recipe:
                    {
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID = -1;
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID = -1;
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID = -1;
                        if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID != -1)
                        {
                            var recipeREF = RPGBuilderUtilities.GetCraftingRecipeFromIDEditor(
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID,
                                allCraftingRecipes);

                            if (recipeREF != null)
                            {
                                abName = recipeREF._name;
                                if (recipeREF.icon != null)
                                    abIcon = recipeREF.icon.texture;
                            }
                        }
                        else
                        {
                            abName = "EMPTY NODE";
                        }

                        break;
                    }
                    case RPGTalentTree.TalentTreeNodeType.resourceNode:
                    {
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID = -1;
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID = -1;
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID = -1;
                        if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID != -1)
                        {
                            var resourceNodeREF = RPGBuilderUtilities.GetResourceNodeFromIDEditor(
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID,
                                allResourceNodes);

                            if (resourceNodeREF != null)
                            {
                                abName = resourceNodeREF._name;
                                if (resourceNodeREF.icon != null)
                                    abIcon = resourceNodeREF.icon.texture;
                            }
                        }
                        else
                        {
                            abName = "EMPTY NODE";
                        }

                        break;
                    }
                }

                StartHorizontalMargin(bigHorizontalSpace, true);
                EditorGUILayout.BeginHorizontal();

                EditorGUILayout.BeginVertical();
                GUILayout.Space(25);
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(30),
                    GUILayout.Height(30)))
                {
                    currentlyViewedTalentTree.nodeList.RemoveAt(realAbTreeIndex);
                    return;
                }

                GUILayout.Space(20);
                EditorGUILayout.EndVertical();

                GUILayout.Box(abIcon, GUILayout.Width(70), GUILayout.Height(70));

                EditorGUILayout.BeginVertical();

                GUILayout.Label(abName, skin.GetStyle("TalentTreeNodeTitle"), GUILayout.Height(30));

                GUILayout.BeginHorizontal();
                GUILayout.Label(new GUIContent("Type", "What type of node is it?"), GUILayout.Height(15));
                currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType =
                    (RPGTalentTree.TalentTreeNodeType) EditorGUILayout.EnumPopup(
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType, GUILayout.Height(15));
                GUILayout.Space(10);
                GUILayout.Label(new GUIContent("Tier", "What tier is this ability part of?"), GUILayout.Height(15));
                currentlyViewedTalentTree.nodeList[realAbTreeIndex].Tier =
                    EditorGUILayout.IntField(currentlyViewedTalentTree.nodeList[realAbTreeIndex].Tier);
                GUILayout.Space(10);
                GUILayout.Label(new GUIContent("Slot", "The slot of the ability in its tier. FROM 1 to 7"),
                    GUILayout.Height(15));
                currentlyViewedTalentTree.nodeList[realAbTreeIndex].Row =
                    EditorGUILayout.IntField(currentlyViewedTalentTree.nodeList[realAbTreeIndex].Row);
                GUILayout.EndHorizontal();

                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.ability)
                {
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityREF =
                        (RPGAbility) EditorGUILayout.ObjectField(
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityREF,
                            typeof(RPGAbility), false, GUILayout.Height(27));
                    if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityREF != null)
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID =
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityREF.ID;
                    else
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID = -1;
                }
                else if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                         RPGTalentTree.TalentTreeNodeType.bonus)
                {
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusREF =
                        (RPGBonus) EditorGUILayout.ObjectField(
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusREF, typeof(RPGBonus),
                            false, GUILayout.Height(27));
                    if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusREF != null)
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID =
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusREF.ID;
                    else
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID = -1;
                }
                else if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                         RPGTalentTree.TalentTreeNodeType.recipe)
                {
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeREF =
                        (RPGCraftingRecipe) EditorGUILayout.ObjectField(
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeREF,
                            typeof(RPGCraftingRecipe), false, GUILayout.Height(27));
                    if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeREF != null)
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID =
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeREF.ID;
                    else
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID = -1;
                }
                else if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                         RPGTalentTree.TalentTreeNodeType.resourceNode)
                {
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeREF =
                        (RPGResourceNode) EditorGUILayout.ObjectField(
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeREF,
                            typeof(RPGResourceNode), false, GUILayout.Height(27));
                    if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeREF != null)
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID =
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeREF.ID;
                    else
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID = -1;
                }

                GUILayout.EndVertical();


                GUILayout.Space(8);
                EditorGUILayout.EndHorizontal();
                GUILayout.Space(10);
                EditorGUILayout.BeginHorizontal();

                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.ability &&
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID == -1
                    || currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.recipe &&
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID == -1
                    || currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.resourceNode &&
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID == -1
                    || currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.bonus &&
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID == -1)
                    EditorGUI.BeginDisabledGroup(true);
                GUILayout.Label("REQUIREMENTS:", skin.GetStyle("CenteredLabel"), GUILayout.Width(150),
                    GUILayout.Height(20));
                GUILayout.Space(20);
                if (GUILayout.Button("+", skin.GetStyle("AddButtonSmall"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements
                        .Add(new RequirementsManager.RequirementDATA());
                }

                EditorGUILayout.EndHorizontal();
                GUILayout.Space(15);

                for (var a = 0; a < currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements.Count; a++)
                {
                    var requirementNumber = a + 1;
                    EditorGUILayout.BeginHorizontal();

                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements.RemoveAt(a);
                        return;
                    }

                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a].requirementType =
                        (RequirementsManager.RequirementType) EditorGUILayout.EnumPopup(
                            currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                .requirementType);
                    EditorGUILayout.EndHorizontal();

                    EditorGUILayout.BeginVertical();

                    if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements.Count > 0)
                    {
                        switch (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                            .requirementType)
                        {
                            case RequirementsManager.RequirementType.pointSpent:
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .pointSpentValue = EditorGUILayout.IntField(
                                    new GUIContent("Points Spent",
                                        "How many points should already be spent in this tree for this bonus to be active?"),
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .pointSpentValue);
                                break;
                            case RequirementsManager.RequirementType.classLevel:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .classRequiredREF = (RPGClass) EditorGUILayout.ObjectField(
                                    new GUIContent("Class", "The class required for this bonus to be active"),
                                    RPGBuilderUtilities.GetClassFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .classRequiredID, allClasses), typeof(RPGClass), false);
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .classLevelValue = EditorGUILayout.IntField(
                                    new GUIContent("Level", "The class level required"),
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .classLevelValue);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .classRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .classRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].classRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .classRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType._class:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .classRequiredREF = (RPGClass) EditorGUILayout.ObjectField(
                                    new GUIContent("Class", "The class required for this bonus to be active"),
                                    RPGBuilderUtilities.GetClassFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .classRequiredID, allClasses), typeof(RPGClass), false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .classRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .classRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].classRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .classRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.skillLevel:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .skillRequiredREF = (RPGSkill) EditorGUILayout.ObjectField(
                                    new GUIContent("Skill", "The skill required for this bonus to be active"),
                                    RPGBuilderUtilities.GetSkillFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .skillRequiredID, allSkills), typeof(RPGSkill), false);
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .skillLevelValue = EditorGUILayout.IntField(
                                    new GUIContent("Level", "The skill level required"),
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .skillLevelValue);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .skillRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .skillRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].skillRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .skillRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.itemOwned:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .itemRequiredREF = (RPGItem) EditorGUILayout.ObjectField(
                                    new GUIContent("Item", "The item required"),
                                    RPGBuilderUtilities.GetItemFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .itemRequiredID, allItems), typeof(RPGItem), false);
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .itemRequiredCount = EditorGUILayout.IntField(
                                    new GUIContent("Count", "The amount of items required"),
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .itemRequiredCount);
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a].consumeItem
                                    = EditorGUILayout.Toggle(
                                        new GUIContent("Consumed?", "Is this item consumed?"),
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .consumeItem);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .itemRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .itemRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].itemRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .itemRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.abilityKnown:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .abilityRequiredREF = (RPGAbility) EditorGUILayout.ObjectField(
                                    new GUIContent("Ability",
                                        "The ability required to be known for this bonus to be active"),
                                    RPGBuilderUtilities.GetAbilityFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .abilityRequiredID, allAbilities), typeof(RPGAbility), false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .abilityRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .abilityRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].abilityRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .abilityRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.recipeKnown:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .recipeRequiredREF = (RPGCraftingRecipe) EditorGUILayout.ObjectField(
                                    new GUIContent("Recipe",
                                        "The crafting recipe required to be known for this bonus to be active"),
                                    RPGBuilderUtilities.GetCraftingRecipeFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .craftingRecipeRequiredID, allCraftingRecipes),
                                    typeof(RPGCraftingRecipe), false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .recipeRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .craftingRecipeRequiredID = currentlyViewedTalentTree
                                        .nodeList[realAbTreeIndex].requirements[a].recipeRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .craftingRecipeRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.resourceNodeKnown:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .resourceNodeRequiredREF = (RPGResourceNode) EditorGUILayout.ObjectField(
                                    new GUIContent("Resource Node",
                                        "The resource node required to be known for this bonus to be active"),
                                    RPGBuilderUtilities.GetResourceNodeFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .resourceNodeRequiredID, allResourceNodes), typeof(RPGResourceNode),
                                    false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .resourceNodeRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .resourceNodeRequiredID = currentlyViewedTalentTree
                                        .nodeList[realAbTreeIndex].requirements[a].resourceNodeRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .resourceNodeRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.bonusKnown:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .bonusRequiredREF = (RPGBonus) EditorGUILayout.ObjectField(
                                    new GUIContent("Bonus",
                                        "The bonus required to be known for this bonus to be active"),
                                    RPGBuilderUtilities.GetBonusFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .bonusRequiredID, allBonuses), typeof(RPGBonus), false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .bonusRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .bonusRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].bonusRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .bonusRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.race:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .raceRequiredREF = (RPGRace) EditorGUILayout.ObjectField(
                                    new GUIContent("Race", "The race required"),
                                    RPGBuilderUtilities.GetRaceFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .raceRequiredID, allRaces), typeof(RPGRace), false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .raceRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .raceRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].raceRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .raceRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.questState:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .questRequiredREF = (RPGQuest) EditorGUILayout.ObjectField(
                                    new GUIContent("Quest", "The quest required for this bonus to be active"),
                                    RPGBuilderUtilities.GetQuestFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .questRequiredID, allQuests), typeof(RPGQuest), false);
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .questStateRequired = (QuestManager.questState) EditorGUILayout.EnumPopup(
                                    new GUIContent("State", "The required state of the quest"),
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .questStateRequired);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .questRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .questRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].questRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .questRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.npcKilled:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .npcRequiredREF = (RPGNpc) EditorGUILayout.ObjectField(
                                    new GUIContent("NPC", "The NPC required to be killed"),
                                    RPGBuilderUtilities.GetNPCFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .npcRequiredID, allNPCs), typeof(RPGNpc), false);
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .npcKillsRequired = EditorGUILayout.IntField(
                                    new GUIContent("Kills",
                                        "How many times this NPC should have been killed for the bonus to be active"),
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .npcKillsRequired);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .npcRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .npcRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].npcRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .npcRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.abilityNotKnown:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .abilityRequiredREF = (RPGAbility) EditorGUILayout.ObjectField(
                                    new GUIContent("Ability",
                                        "The ability required to not be known for this bonus to be active"),
                                    RPGBuilderUtilities.GetAbilityFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .abilityRequiredID, allAbilities), typeof(RPGAbility), false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .abilityRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .abilityRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].abilityRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .abilityRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.recipeNotKnown:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .recipeRequiredREF = (RPGCraftingRecipe) EditorGUILayout.ObjectField(
                                    new GUIContent("Recipe",
                                        "The crafting recipe required to not be known for this bonus to be active"),
                                    RPGBuilderUtilities.GetCraftingRecipeFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .craftingRecipeRequiredID, allCraftingRecipes),
                                    typeof(RPGCraftingRecipe), false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .recipeRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .craftingRecipeRequiredID = currentlyViewedTalentTree
                                        .nodeList[realAbTreeIndex].requirements[a].recipeRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .craftingRecipeRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.resourceNodeNotKnown:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .resourceNodeRequiredREF = (RPGResourceNode) EditorGUILayout.ObjectField(
                                    new GUIContent("Resource Node",
                                        "The resource node required to not be known for this bonus to be active"),
                                    RPGBuilderUtilities.GetResourceNodeFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .resourceNodeRequiredID, allResourceNodes), typeof(RPGResourceNode),
                                    false);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .resourceNodeRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .resourceNodeRequiredID = currentlyViewedTalentTree
                                        .nodeList[realAbTreeIndex].requirements[a].resourceNodeRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .resourceNodeRequiredID = -1;
                                break;
                            }
                            case RequirementsManager.RequirementType.weaponTemplateLevel:
                            {
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .weaponTemplateRequiredREF = (RPGWeaponTemplate) EditorGUILayout.ObjectField(
                                    new GUIContent("Weapon Template",
                                        "The weapon Template required for this bonus to be active"),
                                    RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(
                                        currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                            .weaponTemplateRequiredID, allWeaponTemplates), typeof(RPGWeaponTemplate),
                                    false);
                                currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .weaponTemplateLevelValue = EditorGUILayout.IntField(
                                    new GUIContent("Level", "The weapon template level required"),
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .weaponTemplateLevelValue);
                                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                    .weaponTemplateRequiredREF != null)
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .weaponTemplateRequiredID = currentlyViewedTalentTree.nodeList[realAbTreeIndex]
                                        .requirements[a].weaponTemplateRequiredREF.ID;
                                else
                                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].requirements[a]
                                        .weaponTemplateRequiredID = -1;
                                break;
                            }
                        }
                    }

                    EditorGUILayout.EndVertical();

                    GUILayout.Space(10);
                }

                EndHorizontalMargin(bigHorizontalSpace, true);

                if (currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.ability &&
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].abilityID == -1
                    || currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.recipe &&
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].recipeID == -1
                    || currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.resourceNode &&
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].resourceNodeID == -1
                    || currentlyViewedTalentTree.nodeList[realAbTreeIndex].nodeType ==
                    RPGTalentTree.TalentTreeNodeType.bonus &&
                    currentlyViewedTalentTree.nodeList[realAbTreeIndex].bonusID == -1)
                    EditorGUI.EndDisabledGroup();
                GUILayout.Space(15);
            }

            if (tempNodeLIst.Count > 3)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace, false);
                if (GUILayout.Button("+ Add Node", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedTalentTree.nodeList.Add(new RPGTalentTree.Node_DATA());
                }

                EndHorizontalMargin(middleButtonSpace, false);
            }

            serialObj.ApplyModifiedProperties();
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }


    private void DrawTreePointView()
    {
        if (currentlyViewedTreePoint == null)
        {
            if (allTreePoints.Count == 0)
            {
                CreateNew(AssetType.TreePoint);
                return;
            }

            currentlyViewedTreePoint = Instantiate(allTreePoints[0]) as RPGTreePoint;
        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedTreePoint;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.treePointModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.treePointModuleSection.showBaseInfo);
        if (editorFilters.treePointModuleSection.showBaseInfo)
        {
            GUILayout.Space(5);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedTreePoint.icon = DrawIconField(currentlyViewedTreePoint.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedTreePoint.ID);
            currentlyViewedTreePoint._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedTreePoint._name);
            currentlyViewedTreePoint._displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedTreePoint._displayName);
            currentlyViewedTreePoint._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_TREE_POINT_" + currentlyViewedTreePoint._name);
            currentlyViewedTreePoint.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedTreePoint.description);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.treePointModuleSection.showSetup =
            HandleModuleBanner("SETUP SETTINGS", editorFilters.treePointModuleSection.showSetup);
        if (editorFilters.treePointModuleSection.showSetup)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedTreePoint.startAmount =
                DrawHorizontalIntField("Starts At",
                    "The amount of points given when creating the character",
                    smallFieldHeight,
                    currentlyViewedTreePoint.startAmount);
            currentlyViewedTreePoint.maxPoints =
                DrawHorizontalIntField("Max",
                    "Maximum amount of this point type that the character can have",
                    smallFieldHeight,
                    currentlyViewedTreePoint.maxPoints);
            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        GUILayout.Space(10);
        editorFilters.treePointModuleSection.showGainRequirements =
            HandleModuleBanner("GAIN REQUIREMENTS", editorFilters.treePointModuleSection.showGainRequirements);
        if (editorFilters.treePointModuleSection.showGainRequirements)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Requirement", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedTreePoint.gainPointRequirements.Add(new RPGTreePoint.GainRequirements());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList = serialObj.FindProperty("gainPointRequirements");
            currentlyViewedTreePoint.gainPointRequirements =
                GetTargetObjectOfProperty(ThisList) as List<RPGTreePoint.GainRequirements>;

            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedTreePoint.gainPointRequirements.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedTreePoint.gainPointRequirements.RemoveAt(a);
                    return;
                }
                GUILayout.Space(10);
                EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                currentlyViewedTreePoint.gainPointRequirements[a].gainType =
                    (RPGTreePoint.TreePointGainRequirementTypes) EditorGUILayout.EnumPopup(currentlyViewedTreePoint.gainPointRequirements[a].gainType);

                EditorGUILayout.EndHorizontal();


                if (currentlyViewedTreePoint.gainPointRequirements.Count > 0)
                {
                    switch (currentlyViewedTreePoint.gainPointRequirements[a].gainType)
                    {
                        case RPGTreePoint.TreePointGainRequirementTypes.classLevelUp:
                            currentlyViewedTreePoint.gainPointRequirements[a].classRequiredREF =
                                (RPGClass) EditorGUILayout.ObjectField(
                                    new GUIContent("Class", "The class required to level up"),
                                    RPGBuilderUtilities.GetClassFromIDEditor(
                                        currentlyViewedTreePoint.gainPointRequirements[a].classRequiredID,
                                        allClasses), typeof(RPGClass), false);

                            currentlyViewedTreePoint.gainPointRequirements[a].classRequiredID =
                                currentlyViewedTreePoint.gainPointRequirements[a].classRequiredREF != null
                                    ? currentlyViewedTreePoint.gainPointRequirements[a].classRequiredREF.ID
                                    : -1;
                            break;
                        case RPGTreePoint.TreePointGainRequirementTypes.itemGained:
                            currentlyViewedTreePoint.gainPointRequirements[a].itemRequiredREF =
                                (RPGItem) EditorGUILayout.ObjectField(
                                    new GUIContent("Item", "The item required"),
                                    RPGBuilderUtilities.GetItemFromIDEditor(
                                        currentlyViewedTreePoint.gainPointRequirements[a].itemRequiredID,
                                        allItems), typeof(RPGItem), false);

                            currentlyViewedTreePoint.gainPointRequirements[a].itemRequiredID =
                                currentlyViewedTreePoint.gainPointRequirements[a].itemRequiredREF != null
                                    ? currentlyViewedTreePoint.gainPointRequirements[a].itemRequiredREF.ID
                                    : -1;

                            currentlyViewedTreePoint.gainPointRequirements[a].itemRequiredCount =
                                DrawHorizontalIntField("Stacks", "How many of this items is required?",
                                    smallFieldHeight,
                                    currentlyViewedTreePoint.gainPointRequirements[a].itemRequiredCount);
                            break;
                        case RPGTreePoint.TreePointGainRequirementTypes.npcKilled:
                            currentlyViewedTreePoint.gainPointRequirements[a].npcRequiredREF =
                                (RPGNpc) EditorGUILayout.ObjectField(
                                    new GUIContent("NPC", "The NPC Required to be killed"),
                                    RPGBuilderUtilities.GetNPCFromIDEditor(
                                        currentlyViewedTreePoint.gainPointRequirements[a].npcRequiredID,
                                        allNPCs), typeof(RPGNpc), false);

                            currentlyViewedTreePoint.gainPointRequirements[a].npcRequiredID =
                                currentlyViewedTreePoint.gainPointRequirements[a].npcRequiredREF != null
                                    ? currentlyViewedTreePoint.gainPointRequirements[a].npcRequiredREF.ID
                                    : -1;
                            break;
                        case RPGTreePoint.TreePointGainRequirementTypes.skillLevelUp:
                            currentlyViewedTreePoint.gainPointRequirements[a].skillRequiredREF =
                                (RPGSkill) EditorGUILayout.ObjectField(
                                    new GUIContent("Skill", "The skill required to level up"),
                                    RPGBuilderUtilities.GetSkillFromIDEditor(
                                        currentlyViewedTreePoint.gainPointRequirements[a].skillRequiredID,
                                        allSkills), typeof(RPGSkill), false);

                            currentlyViewedTreePoint.gainPointRequirements[a].skillRequiredID =
                                currentlyViewedTreePoint.gainPointRequirements[a].skillRequiredREF != null
                                    ? currentlyViewedTreePoint.gainPointRequirements[a].skillRequiredREF.ID
                                    : -1;
                            break;
                        case RPGTreePoint.TreePointGainRequirementTypes.weaponTemplateLevelUp:
                            currentlyViewedTreePoint.gainPointRequirements[a].weaponTemplateREF =
                                (RPGWeaponTemplate) EditorGUILayout.ObjectField(
                                    new GUIContent("Weapon Template", "The weapon template required to level up"),
                                    RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(
                                        currentlyViewedTreePoint.gainPointRequirements[a].weaponTemplateRequiredID,
                                        allWeaponTemplates), typeof(RPGWeaponTemplate), false);

                            currentlyViewedTreePoint.gainPointRequirements[a].weaponTemplateRequiredID =
                                currentlyViewedTreePoint.gainPointRequirements[a].weaponTemplateREF != null
                                    ? currentlyViewedTreePoint.gainPointRequirements[a].weaponTemplateREF.ID
                                    : -1;
                            break;
                    }

                    currentlyViewedTreePoint.gainPointRequirements[a].amountGained =
                        DrawHorizontalIntField("Gain", "How many points should be gained",
                            smallFieldHeight,
                            currentlyViewedTreePoint.gainPointRequirements[a].amountGained);
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawSpellbookView()
    {
        if (currentlyViewedSpellbook == null)
        {
            if (allSpellbooks.Count == 0)
            {
                CreateNew(AssetType.Spellbook);
                return;
            }

            currentlyViewedSpellbook = Instantiate(allSpellbooks[0]) as RPGSpellbook;
        }
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedSpellbook;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.spellbookModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.spellbookModuleSection.showBaseInfo);
        if (editorFilters.spellbookModuleSection.showBaseInfo)
        {GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedSpellbook.icon = DrawIconField(currentlyViewedSpellbook.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedSpellbook.ID);
            currentlyViewedSpellbook._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedSpellbook._name);
            currentlyViewedSpellbook.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedSpellbook.displayName);
            currentlyViewedSpellbook._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_SPELLBOOK_" + currentlyViewedSpellbook._name);
            currentlyViewedSpellbook.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedSpellbook.description);

            currentlyViewedSpellbook.sourceType = (RPGSpellbook.spellbookSourceType) EditorGUILayout.EnumPopup(
                "Spellbook Type",
                currentlyViewedSpellbook.sourceType);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.spellbookModuleSection.showNodes =
            HandleModuleBanner("ABILITIES & BONUSES", editorFilters.spellbookModuleSection.showNodes);
        if (editorFilters.spellbookModuleSection.showNodes)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Ability/Bonus", skin.GetStyle("AddButton"),
                GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedSpellbook.nodeList.Add(new RPGSpellbook.Node_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList = serialObj.FindProperty("nodeList");
            currentlyViewedSpellbook.nodeList =
                GetTargetObjectOfProperty(ThisList) as List<RPGSpellbook.Node_DATA>;

            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedSpellbook.nodeList.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                GUILayout.Space(5);
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedSpellbook.nodeList.RemoveAt(a);
                    return;
                }

                EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                currentlyViewedSpellbook.nodeList[a].nodeType =
                    (RPGSpellbook.SpellbookNodeType) EditorGUILayout.EnumPopup(
                        currentlyViewedSpellbook.nodeList[a].nodeType);
                EditorGUILayout.EndHorizontal();


                if (currentlyViewedSpellbook.nodeList[a].nodeType ==
                    RPGSpellbook.SpellbookNodeType.ability)
                {
                    Texture abIcon = editorDATA.abilityNullSprite;
                    if (currentlyViewedSpellbook.nodeList[a].abilityREF != null &&
                        currentlyViewedSpellbook.nodeList[a].abilityREF.icon != null)
                    {
                        abIcon = currentlyViewedSpellbook.nodeList[a].abilityREF.icon.texture;
                    }

                    EditorGUILayout.BeginHorizontal();
                    GUILayout.Box(abIcon, GUILayout.Width(40), GUILayout.Height(40));

                    EditorGUILayout.BeginVertical();
                    currentlyViewedSpellbook.nodeList[a].abilityREF =
                        (RPGAbility) EditorGUILayout.ObjectField("Ability",
                            currentlyViewedSpellbook.nodeList[a].abilityREF,
                            typeof(RPGAbility), false, GUILayout.Height(20));

                    currentlyViewedSpellbook.nodeList[a].abilityID =
                        currentlyViewedSpellbook.nodeList[a].abilityREF != null
                            ? currentlyViewedSpellbook.nodeList[a].abilityREF.ID
                            : -1;
                    
                    currentlyViewedSpellbook.nodeList[a].unlockLevel =
                        DrawHorizontalIntField("Level", "",
                            smallFieldHeight,
                            currentlyViewedSpellbook.nodeList[a].unlockLevel);

                    EditorGUILayout.EndVertical();
                    EditorGUILayout.EndHorizontal();
                }
                else
                {
                    Texture abIcon = editorDATA.abilityNullSprite;
                    if (currentlyViewedSpellbook.nodeList[a].bonusREF != null &&
                        currentlyViewedSpellbook.nodeList[a].bonusREF.icon != null)
                    {
                        abIcon = currentlyViewedSpellbook.nodeList[a].bonusREF.icon.texture;
                    }

                    EditorGUILayout.BeginHorizontal();
                    GUILayout.Box(abIcon, GUILayout.Width(40), GUILayout.Height(40));

                    EditorGUILayout.BeginVertical();

                    currentlyViewedSpellbook.nodeList[a].bonusREF =
                        (RPGBonus) EditorGUILayout.ObjectField("Bonus",
                            currentlyViewedSpellbook.nodeList[a].bonusREF,
                            typeof(RPGBonus), false, GUILayout.Height(20));

                    currentlyViewedSpellbook.nodeList[a].bonusID = currentlyViewedSpellbook.nodeList[a].bonusREF != null
                        ? currentlyViewedSpellbook.nodeList[a].bonusREF.ID
                        : -1;

                    currentlyViewedSpellbook.nodeList[a].unlockLevel =
                        DrawHorizontalIntField("Level", "",
                            smallFieldHeight,
                            currentlyViewedSpellbook.nodeList[a].unlockLevel);
                    
                    EditorGUILayout.EndVertical();
                    EditorGUILayout.EndHorizontal();
                }

            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawFactionView()
    {
        if (currentlyViewedFaction == null)
        {
            if (allFactions.Count == 0)
            {
                CreateNew(AssetType.Faction);
                return;
            }

            currentlyViewedFaction = Instantiate(allFactions[0]) as RPGFaction;
        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedFaction;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.factionModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.factionModuleSection.showBaseInfo);
        if (editorFilters.factionModuleSection.showBaseInfo)
        {
            GUILayout.Space(5);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedFaction.icon = DrawIconField(currentlyViewedFaction.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedFaction.ID);
            currentlyViewedFaction._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedFaction._name);
            currentlyViewedFaction.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedFaction.displayName);
            currentlyViewedFaction._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_FACTION_" + currentlyViewedFaction._name);
            currentlyViewedFaction.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedFaction.description);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.factionModuleSection.showStances =
            HandleModuleBanner("STANCES", editorFilters.factionModuleSection.showStances);
        if (editorFilters.factionModuleSection.showStances)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Stance", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedFaction.factionStances.Add(new RPGFaction.Faction_Stance_DATA());
            }
            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList = serialObj.FindProperty("factionStances");
            currentlyViewedFaction.factionStances =
                GetTargetObjectOfProperty(ThisList) as List<RPGFaction.Faction_Stance_DATA>;
            
            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedFaction.factionStances.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                GUILayout.Space(5);
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedFaction.factionStances.RemoveAt(a);
                    return;
                }


                EditorGUILayout.LabelField("Stance " + requirementNumber + " (" +
                                           currentlyViewedFaction.factionStances[a].stance + "):");
                EditorGUILayout.EndHorizontal();

                var currentStance = getIndexFromName("FactionStance", currentlyViewedFaction.factionStances[a].stance);
                var tempIndex1 = EditorGUILayout.Popup("Stance", currentStance, combatSettings.FactionStancesList.ToArray());
                if (combatSettings.FactionStancesList.Count > 0)
                    currentlyViewedFaction.factionStances[a].stance = combatSettings.FactionStancesList[tempIndex1];

                currentlyViewedFaction.factionStances[a].playerAlignment =
                    (RPGCombatDATA.ALIGNMENT_TYPE) EditorGUILayout.EnumPopup(
                        new GUIContent("Player Alignment",
                            "The player alignment to this faction when this stance is active"),
                        currentlyViewedFaction.factionStances[a].playerAlignment);

                currentlyViewedFaction.factionStances[a].pointsRequired =
                    DrawHorizontalIntField("Points Required", "The amount of points required to reach this stance",
                        smallFieldHeight,
                        currentlyViewedFaction.factionStances[a].pointsRequired);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.factionModuleSection.showInteractions =
            HandleModuleBanner("INTERACTIONS", editorFilters.factionModuleSection.showInteractions);
        if (editorFilters.factionModuleSection.showInteractions)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Interaction", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedFaction.factionInteractions.Add(new RPGFaction.Faction_Interaction_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("factionInteractions");
            currentlyViewedFaction.factionInteractions =
                GetTargetObjectOfProperty(ThisList2) as List<RPGFaction.Faction_Interaction_DATA>;

            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedFaction.factionInteractions.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                GUILayout.Space(5);
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedFaction.factionInteractions.RemoveAt(a);
                    return;
                }

                string factionText = currentlyViewedFaction.factionInteractions[a].factionREF != null
                    ? currentlyViewedFaction.factionInteractions[a].factionREF._name
                    : "";
                EditorGUILayout.LabelField(requirementNumber + ": " + factionText);
                EditorGUILayout.EndHorizontal();
                
                currentlyViewedFaction.factionInteractions[a].factionID = DrawRPGDataEntryField(
                    currentlyViewedFaction.factionInteractions[a].factionID,
                    "Faction", "Faction");
                var currentStance = getIndexFromName("FactionStance",
                    currentlyViewedFaction.factionInteractions[a].defaultStance);
                var tempIndex1 = EditorGUILayout.Popup("Default Stance", currentStance, combatSettings.FactionStancesList.ToArray());
                if (combatSettings.FactionStancesList.Count > 0)
                    currentlyViewedFaction.factionInteractions[a].defaultStance =
                        combatSettings.FactionStancesList[tempIndex1];
                currentlyViewedFaction.factionInteractions[a].startingPoints =
                    DrawHorizontalIntField("Start Points", "The amount of points the stance start by default",
                        smallFieldHeight,
                        currentlyViewedFaction.factionInteractions[a].startingPoints);

                GUILayout.Space(10);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawSpeciesView()
    {
        if (currentlyViewedSpecies == null)
        {
            if (allSpecies.Count == 0)
            {
                CreateNew(AssetType.Species);
                return;
            }

            currentlyViewedSpecies = Instantiate(allSpecies[0]) as RPGSpecies;
        }

        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedSpecies;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth),
            GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.speciesModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.speciesModuleSection.showBaseInfo);
        if (editorFilters.speciesModuleSection.showBaseInfo)
        {
            GUILayout.Space(5);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedSpecies.icon = DrawIconField(currentlyViewedSpecies.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedSpecies.ID);
            currentlyViewedSpecies._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedSpecies._name);
            currentlyViewedSpecies.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedSpecies.displayName);
            currentlyViewedSpecies.fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_SPECIES_" + currentlyViewedSpecies._name);
            currentlyViewedSpecies.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedSpecies.description);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.speciesModuleSection.showStats =
            HandleModuleBanner("STATS", editorFilters.speciesModuleSection.showStats);
        if (editorFilters.speciesModuleSection.showStats)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedSpecies.stats.Add(new RPGSpecies.SPECIES_STAT_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList5 = serialObj.FindProperty("stats");
            currentlyViewedSpecies.stats = GetTargetObjectOfProperty(ThisList5) as List<RPGSpecies.SPECIES_STAT_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedSpecies.stats.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedSpecies.stats.RemoveAt(a);
                    return;
                }
                GUILayout.Space(10);

                var talentTreeName = "";
                RPGStat statREF =
                    RPGBuilderUtilities.GetStatFromIDEditor(currentlyViewedSpecies.stats[a].statID, allStats);
                if (statREF != null)
                    talentTreeName = statREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedSpecies.stats[a].statID =
                    DrawRPGDataEntryField(currentlyViewedSpecies.stats[a].statID, "Stat", "Stat");

                currentlyViewedSpecies.stats[a].value = DrawHorizontalFloatField(
                    "Value",
                    "",
                    smallFieldHeight, currentlyViewedSpecies.stats[a].value);


                if (statREF != null && statREF.isVitalityStat)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(middleButtonSpace, false);
                    if (GUILayout.Button("+ Add Action", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                        GUILayout.ExpandWidth(true)))
                    {
                        currentlyViewedSpecies.stats[a].vitalityActions.Add(new RPGStat.VitalityActions());
                    }

                    EndHorizontalMargin(middleButtonSpace, false);

                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, true);
                    for (var u = 0; u < currentlyViewedSpecies.stats[a].vitalityActions.Count; u++)
                    {
                        GUILayout.Space(10);
                        EditorGUILayout.BeginHorizontal();
                        if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                            GUILayout.Height(20)))
                        {
                            currentlyViewedSpecies.stats[a].vitalityActions.RemoveAt(u);
                            return;
                        }

                        EditorGUILayout.EndHorizontal();
                        currentlyViewedSpecies.stats[a].vitalityActions[u].type =
                            (RPGStat.VitalityActionsTypes) EditorGUILayout.EnumPopup("Type:",
                                currentlyViewedSpecies.stats[a].vitalityActions[u].type,
                                GUILayout.Height(smallFieldHeight));

                        switch (currentlyViewedSpecies.stats[a].vitalityActions[u].type)
                        {
                            case RPGStat.VitalityActionsTypes.Effect:
                                currentlyViewedSpecies.stats[a].vitalityActions[u].effectREF =
                                    (RPGEffect) EditorGUILayout.ObjectField("Effect:",
                                        RPGBuilderUtilities.GetEffectFromIDEditor(
                                            currentlyViewedSpecies.stats[a].vitalityActions[u].elementID, allEffects),
                                        typeof(RPGEffect), false, GUILayout.Height(smallFieldHeight));

                                int effectRankField = currentlyViewedSpecies.stats[a].vitalityActions[u].effectRank + 1;
                                if (effectRankField == 0) effectRankField = 1;

                                if (currentlyViewedSpecies.stats[a].vitalityActions[u].effectREF != null)
                                {
                                    currentlyViewedSpecies.stats[a].vitalityActions[u].elementID =
                                        currentlyViewedSpecies.stats[a].vitalityActions[u].effectREF.ID;

                                    if (effectRankField > currentlyViewedSpecies.stats[a].vitalityActions[u].effectREF
                                        .ranks
                                        .Count)
                                    {
                                        effectRankField = currentlyViewedSpecies.stats[a].vitalityActions[u].effectREF
                                            .ranks
                                            .Count;
                                    }
                                }
                                else
                                    currentlyViewedSpecies.stats[a].vitalityActions[u].elementID = -1;


                                effectRankField = DrawHorizontalIntField("Effect Rank", "",
                                    smallFieldHeight,
                                    effectRankField);
                                currentlyViewedSpecies.stats[a].vitalityActions[u].effectRank = effectRankField - 1;
                                break;
                            case RPGStat.VitalityActionsTypes.Ability:
                                currentlyViewedSpecies.stats[a].vitalityActions[u].abilityREF =
                                    (RPGAbility) EditorGUILayout.ObjectField("Ability:",
                                        RPGBuilderUtilities.GetAbilityFromIDEditor(
                                            currentlyViewedSpecies.stats[a].vitalityActions[u].elementID, allAbilities),
                                        typeof(RPGAbility), false, GUILayout.Height(smallFieldHeight));

                                currentlyViewedSpecies.stats[a].vitalityActions[u].elementID =
                                    currentlyViewedSpecies.stats[a].vitalityActions[u].abilityREF != null
                                        ? currentlyViewedSpecies.stats[a].vitalityActions[u].abilityREF.ID
                                        : -1;

                                break;
                        }

                        currentlyViewedSpecies.stats[a].vitalityActions[u].value = DrawHorizontalFloatField("Value", "",
                            smallFieldHeight,
                            currentlyViewedSpecies.stats[a].vitalityActions[u].value);
                        currentlyViewedSpecies.stats[a].vitalityActions[u].valueType =
                            (RPGStat.VitalityActionsValueType) EditorGUILayout.EnumPopup("Value Type:",
                                currentlyViewedSpecies.stats[a].vitalityActions[u].valueType,
                                GUILayout.Height(smallFieldHeight));
                        currentlyViewedSpecies.stats[a].vitalityActions[u].isPercent = DrawHorizontalToggle(
                            "Is Percent?", "",
                            smallFieldHeight,
                            currentlyViewedSpecies.stats[a].vitalityActions[u].isPercent);
                    }

                    EndHorizontalMargin(bigHorizontalSpace, true);
                    GUILayout.Space(10);
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.speciesModuleSection.showTraits =
            HandleModuleBanner("TRAITS", editorFilters.speciesModuleSection.showTraits);
        if (editorFilters.speciesModuleSection.showTraits)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Trait", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedSpecies.traits.Add(new RPGSpecies.SPECIES_TRAIT());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList5 = serialObj.FindProperty("traits");
            currentlyViewedSpecies.traits = GetTargetObjectOfProperty(ThisList5) as List<RPGSpecies.SPECIES_TRAIT>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedSpecies.traits.Count; a++)
            {
                GUILayout.Space(10);
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedSpecies.traits.RemoveAt(a);
                    return;
                }
                GUILayout.Space(10);
                
                var currentStatFunctionIndex = getIndexFromName("StatFunction", currentlyViewedSpecies.traits[a].statFunction);
                var tempIndex = EditorGUILayout.Popup(currentStatFunctionIndex, combatSettings.StatFunctionsList.ToArray(), GUILayout.Height(smallFieldHeight));
                currentlyViewedSpecies.traits[a].statFunction = GetStatFunctionNameFromID(tempIndex);
                
                EditorGUILayout.EndHorizontal();

                currentlyViewedSpecies.traits[a].modifier = DrawHorizontalFloatField(
                    "Modifier (%)",
                    "",
                    smallFieldHeight, currentlyViewedSpecies.traits[a].modifier);

            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawComboView()
    {
        if (currentlyViewedCombo == null)
        {
            if (allCombos.Count == 0)
            {
                CreateNew(AssetType.Combo);
                return;
            }

            currentlyViewedCombo = Instantiate(allCombos[0]) as RPGCombo;
        }

        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedCombo;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth),
            GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.comboModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.comboModuleSection.showBaseInfo);
        if (editorFilters.comboModuleSection.showBaseInfo)
        {
            GUILayout.Space(5);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedCombo.ID);
            currentlyViewedCombo._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedCombo._name);
            currentlyViewedCombo.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedCombo.displayName);
            currentlyViewedCombo.fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_COMBO_" + currentlyViewedCombo._name);
            currentlyViewedCombo.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedCombo.description);
            currentlyViewedCombo.initialAbilityID =
                DrawRPGDataEntryField(currentlyViewedCombo.initialAbilityID, "Ability", "Start Ability");
            
            currentlyViewedCombo.StartCancelOtherCombos = DrawHorizontalToggle(
                "Reset Other Combos?", "Should this combo reset previously active combos when started?",
                smallFieldHeight,
                currentlyViewedCombo.StartCancelOtherCombos);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.comboModuleSection.showCombos =
            HandleModuleBanner("COMBOS", editorFilters.comboModuleSection.showCombos);
        if (editorFilters.comboModuleSection.showCombos)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Combo", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedCombo.combos.Add(new RPGCombo.ComboEntry());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList5 = serialObj.FindProperty("combos");
            currentlyViewedCombo.combos = GetTargetObjectOfProperty(ThisList5) as List<RPGCombo.ComboEntry>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedCombo.combos.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedCombo.combos.RemoveAt(a);
                    return;
                }

                GUILayout.Space(10);

                var talentTreeName = "";
                RPGAbility REF =
                    RPGBuilderUtilities.GetAbilityFromIDEditor(currentlyViewedCombo.combos[a].abilityID, allAbilities);
                if (REF != null)
                    talentTreeName = REF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedCombo.combos[a].abilityID =
                    DrawRPGDataEntryField(currentlyViewedCombo.combos[a].abilityID, "Ability", "Ability");

                currentlyViewedCombo.combos[a].abMustBeKnown = DrawHorizontalToggle(
                    "Ability Known?", "Should this ability be known to be used?",
                    smallFieldHeight,
                    currentlyViewedCombo.combos[a].abMustBeKnown);

                /*currentlyViewedCombo.combos[a].mustHit = DrawHorizontalToggle(
                    "Require Hit?", "Should the previous ability hit for this combo to be available?",
                    smallFieldHeight,
                    currentlyViewedCombo.combos[a].mustHit);*/
                currentlyViewedCombo.combos[a].expireTime = DrawHorizontalFloatField(
                    "Expire Time",
                    "",
                    smallFieldHeight, currentlyViewedCombo.combos[a].expireTime);
                currentlyViewedCombo.combos[a].readyTime = DrawHorizontalFloatField(
                    "Charging Time",
                    "How long in seconds will it be possible to use",
                    smallFieldHeight, currentlyViewedCombo.combos[a].readyTime);

                
                currentlyViewedCombo.combos[a].keyType =
                    (RPGCombo.KeyType) EditorGUILayout.EnumPopup("Override Key", currentlyViewedCombo.combos[a].keyType);

                switch (currentlyViewedCombo.combos[a].keyType)
                {
                    case RPGCombo.KeyType.StartAbilityKey:
                        break;
                    case RPGCombo.KeyType.OverrideKey:
                        currentlyViewedCombo.combos[a].overrideKey =
                            (KeyCode) EditorGUILayout.EnumPopup("Key Type",
                                currentlyViewedCombo.combos[a].overrideKey);
                        break;
                    case RPGCombo.KeyType.ActionKey:
                        var actionKeyIndex =
                            getIndexFromActionKey(currentlyViewedCombo.combos[a].actionKeyName);
                        if (actionKeyIndex == -1) actionKeyIndex = 0;
                        List<string> allActionKeyNames = GetActionKeyNamesList();
                        var tempIndex = EditorGUILayout.Popup("Action Key", actionKeyIndex,
                            GetActionKeyNamesList().ToArray());
                        if (generalSettings.actionKeys.Count > 0)
                            currentlyViewedCombo.combos[a].actionKeyName = allActionKeyNames[tempIndex];

                        break;
                }

                GUILayout.Space(10);
                currentlyViewedCombo.combos[a].requirements =
                    DrawRequirementList(currentlyViewedCombo.combos[a].requirements);

            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private List<string> GetActionKeyNamesList()
    {
        List<string> actionKeyNames = new List<string>();

        foreach (var actionKey in generalSettings.actionKeys)
        {
            actionKeyNames.Add(actionKey.actionName);
        }

        return actionKeyNames;
    }

    private void DrawWeaponTemplateView()
    {
        if (currentlyViewedWeaponTemplate == null)
        {
            if (allWeaponTemplates.Count == 0)
            {
                CreateNew(AssetType.WeaponTemplate);
                return;
            }

            currentlyViewedWeaponTemplate = Instantiate(allWeaponTemplates[0]) as RPGWeaponTemplate;
        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedWeaponTemplate;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.weaponTemplateModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.weaponTemplateModuleSection.showBaseInfo);
        if (editorFilters.weaponTemplateModuleSection.showBaseInfo)
        {
            GUILayout.Space(5);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedWeaponTemplate.icon = DrawIconField(currentlyViewedWeaponTemplate.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedWeaponTemplate.ID);
            currentlyViewedWeaponTemplate._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedWeaponTemplate._name);
            currentlyViewedWeaponTemplate.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedWeaponTemplate.displayName);
            currentlyViewedWeaponTemplate.fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_WEAPON_TEMPLATE_" + currentlyViewedWeaponTemplate._name);
            currentlyViewedWeaponTemplate.description = DrawHorizontalDescriptionField("Description", "",
                smallFieldHeight,
                currentlyViewedWeaponTemplate.description);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.weaponTemplateModuleSection.showProgression =
            HandleModuleBanner("PROGRESSION", editorFilters.weaponTemplateModuleSection.showProgression);
        if (editorFilters.weaponTemplateModuleSection.showProgression)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            currentlyViewedWeaponTemplate.levelTemplateREF = (RPGLevelsTemplate) EditorGUILayout.ObjectField(
                "Level Template",
                RPGBuilderUtilities.GetLevelTemplateFromIDEditor(currentlyViewedWeaponTemplate.levelTemplateID,
                    allLevelsTemplate), typeof(RPGLevelsTemplate), false);
            
            currentlyViewedWeaponTemplate.levelTemplateID = currentlyViewedWeaponTemplate.levelTemplateREF != null
                ? currentlyViewedWeaponTemplate.levelTemplateREF.ID
                : -1;
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.weaponTemplateModuleSection.showWeaponList =
            HandleModuleBanner("WEAPONS", editorFilters.weaponTemplateModuleSection.showWeaponList);
        if (editorFilters.weaponTemplateModuleSection.showWeaponList)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Weapon", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedWeaponTemplate.weaponList.Add(new RPGWeaponTemplate.WeaponDATA());
            }
            EndHorizontalMargin(middleButtonSpace, false);
            
            var ThisList1 = serialObj.FindProperty("weaponList");
            currentlyViewedWeaponTemplate.weaponList =
                GetTargetObjectOfProperty(ThisList1) as List<RPGWeaponTemplate.WeaponDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedWeaponTemplate.weaponList.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedWeaponTemplate.weaponList.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedWeaponTemplate.weaponList[a].weaponType != "")
                    talentTreeName = currentlyViewedWeaponTemplate.weaponList[a].weaponType;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                
                var currentWeaponTypeIndex =
                    getIndexFromName("WeaponType", currentlyViewedWeaponTemplate.weaponList[a].weaponType);
                var tempIndex2 = EditorGUILayout.Popup("Weapon Type", currentWeaponTypeIndex, itemSettings.weaponTypeList.ToArray());
                if (itemSettings.weaponTypeList.Count > 0)
                    currentlyViewedWeaponTemplate.weaponList[a].weaponType = itemSettings.weaponTypeList[tempIndex2];
                
                currentlyViewedWeaponTemplate.weaponList[a].weaponEXPModifier =
                    DrawHorizontalFloatField("EXP Modifier", "",
                        smallFieldHeight,
                        currentlyViewedWeaponTemplate.weaponList[a].weaponEXPModifier);
            }
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.weaponTemplateModuleSection.showStats =
            HandleModuleBanner("STATS", editorFilters.weaponTemplateModuleSection.showStats);
        if (editorFilters.weaponTemplateModuleSection.showStats)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedWeaponTemplate.stats.Add(new RPGWeaponTemplate.CLASS_STATS_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList3 = serialObj.FindProperty("stats");
            currentlyViewedWeaponTemplate.stats =
                GetTargetObjectOfProperty(ThisList3) as List<RPGWeaponTemplate.CLASS_STATS_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedWeaponTemplate.stats.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedWeaponTemplate.stats.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedWeaponTemplate.stats[a].statREF != null)
                    talentTreeName = currentlyViewedWeaponTemplate.stats[a].statREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedWeaponTemplate.stats[a].statREF = (RPGStat) EditorGUILayout.ObjectField("STAT",
                    RPGBuilderUtilities.GetStatFromIDEditor(currentlyViewedWeaponTemplate.stats[a].statID, allStats),
                    typeof(RPGStat), false);

                currentlyViewedWeaponTemplate.stats[a].amount =
                    DrawHorizontalFloatField("Value", "",
                        smallFieldHeight,
                        currentlyViewedWeaponTemplate.stats[a].amount);
                currentlyViewedWeaponTemplate.stats[a].bonusPerLevel =
                    DrawHorizontalFloatField("Level Gain", "",
                        smallFieldHeight,
                        currentlyViewedWeaponTemplate.stats[a].bonusPerLevel);

                if (currentlyViewedWeaponTemplate.stats[a].statREF != null)
                {
                    currentlyViewedWeaponTemplate.stats[a].statID = currentlyViewedWeaponTemplate.stats[a].statREF.ID;
                    if (!currentlyViewedWeaponTemplate.stats[a].statREF.isPercentStat)
                    {
                        currentlyViewedWeaponTemplate.stats[a].isPercent =
                            DrawHorizontalToggle("Is Percent?", "",
                                smallFieldHeight,
                                currentlyViewedWeaponTemplate.stats[a].isPercent);
                    }
                    else
                    {
                        currentlyViewedWeaponTemplate.stats[a].isPercent = false;
                    }
                }
                else
                    currentlyViewedWeaponTemplate.stats[a].statID = -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.weaponTemplateModuleSection.showTalentTrees =
            HandleModuleBanner("TALENT TREES", editorFilters.weaponTemplateModuleSection.showTalentTrees);
        if (editorFilters.weaponTemplateModuleSection.showTalentTrees)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Talent Tree", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedWeaponTemplate.talentTrees.Add(new RPGWeaponTemplate.TalentTreesDATA());
            }
            EndHorizontalMargin(middleButtonSpace, false);
            
            var ThisList2 = serialObj.FindProperty("talentTrees");
            currentlyViewedWeaponTemplate.talentTrees =
                GetTargetObjectOfProperty(ThisList2) as List<RPGWeaponTemplate.TalentTreesDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedWeaponTemplate.talentTrees.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedWeaponTemplate.talentTrees.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedWeaponTemplate.talentTrees[a].talentTreeREF != null)
                    talentTreeName = currentlyViewedWeaponTemplate.talentTrees[a].talentTreeREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                
                currentlyViewedWeaponTemplate.talentTrees[a].talentTreeREF =
                    (RPGTalentTree) EditorGUILayout.ObjectField("Talent Tree",
                        RPGBuilderUtilities.GetTalentTreeFromIDEditor(
                            currentlyViewedWeaponTemplate.talentTrees[a].talentTreeID,
                            allTalentTrees), typeof(RPGTalentTree), false);

                currentlyViewedWeaponTemplate.talentTrees[a].talentTreeID =
                    currentlyViewedWeaponTemplate.talentTrees[a].talentTreeREF != null
                        ? currentlyViewedWeaponTemplate.talentTrees[a].talentTreeREF.ID
                        : -1;
            }
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.weaponTemplateModuleSection.showSpellbook =
            HandleModuleBanner("SPELLBOOK", editorFilters.weaponTemplateModuleSection.showSpellbook);
        if (editorFilters.weaponTemplateModuleSection.showSpellbook)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Spellbook", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedWeaponTemplate.spellbooks.Add(new RPGWeaponTemplate.SpellbookDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList18 = serialObj.FindProperty("spellbooks");
            currentlyViewedWeaponTemplate.spellbooks =
                GetTargetObjectOfProperty(ThisList18) as List<RPGWeaponTemplate.SpellbookDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedWeaponTemplate.spellbooks.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedWeaponTemplate.spellbooks.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedWeaponTemplate.spellbooks[a].spellbookREF != null)
                    talentTreeName = currentlyViewedWeaponTemplate.spellbooks[a].spellbookREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName, GUILayout.Width(400));
                EditorGUILayout.EndHorizontal();
                currentlyViewedWeaponTemplate.spellbooks[a].spellbookREF = (RPGSpellbook) EditorGUILayout.ObjectField("Spellbook",
                    RPGBuilderUtilities.GetSpellbookFromIDEditor(
                        currentlyViewedWeaponTemplate.spellbooks[a].spellbookID,
                        allSpellbooks), typeof(RPGSpellbook), false);

                currentlyViewedWeaponTemplate.spellbooks[a].spellbookID =
                    currentlyViewedWeaponTemplate.spellbooks[a].spellbookREF != null
                        ? currentlyViewedWeaponTemplate.spellbooks[a].spellbookREF.ID
                        : -1;
            }
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.weaponTemplateModuleSection.showStartingItems =
            HandleModuleBanner("STARTING ITEMS", editorFilters.weaponTemplateModuleSection.showStartingItems);
        if (editorFilters.weaponTemplateModuleSection.showStartingItems)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedWeaponTemplate.startItems.Add(new RPGItemDATA.StartingItemsDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList4 = serialObj.FindProperty("startItems");
            currentlyViewedWeaponTemplate.startItems =
                GetTargetObjectOfProperty(ThisList4) as List<RPGItemDATA.StartingItemsDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedWeaponTemplate.startItems.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedWeaponTemplate.startItems.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedWeaponTemplate.startItems[a].itemREF != null)
                    talentTreeName = currentlyViewedWeaponTemplate.startItems[a].itemREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedWeaponTemplate.startItems[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                    RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedWeaponTemplate.startItems[a].itemID,
                        allItems), typeof(RPGItem), false);

                currentlyViewedWeaponTemplate.startItems[a].count =
                    DrawHorizontalIntField("Count", "",
                        smallFieldHeight,
                        currentlyViewedWeaponTemplate.startItems[a].count);
                currentlyViewedWeaponTemplate.startItems[a].equipped =
                    DrawHorizontalToggle("Equipped?", "",
                        smallFieldHeight,
                        currentlyViewedWeaponTemplate.startItems[a].equipped);

                currentlyViewedWeaponTemplate.startItems[a].itemID =
                    currentlyViewedWeaponTemplate.startItems[a].itemREF != null
                        ? currentlyViewedWeaponTemplate.startItems[a].itemREF.ID
                        : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.weaponTemplateModuleSection.showStatAllocationGame =
            HandleModuleBanner("STAT ALLOCATION", editorFilters.weaponTemplateModuleSection.showStatAllocationGame);
        if (editorFilters.weaponTemplateModuleSection.showStatAllocationGame)
        {
            currentlyViewedWeaponTemplate.allocatedStatsEntriesGame = DrawStatAllocationList(currentlyViewedWeaponTemplate.allocatedStatsEntriesGame);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private List<CharacterData.AllocatedStatEntry> DrawStatAllocationList(List<CharacterData.AllocatedStatEntry> allocatedStatEntryList)
    {
        GUILayout.Space(10);
        StartHorizontalMargin(middleButtonSpace, false);

        if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
            GUILayout.ExpandWidth(true)))
        {
            allocatedStatEntryList.Add(new CharacterData.AllocatedStatEntry());
        }

        EndHorizontalMargin(middleButtonSpace, false);
        
        StartHorizontalMargin(bigHorizontalSpace, true);
        for (var a = 0; a < allocatedStatEntryList.Count; a++)
        {
            GUILayout.Space(10);
            var requirementNumber = a + 1;
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
            {
                allocatedStatEntryList.RemoveAt(a);
                return allocatedStatEntryList;
            }

            var talentTreeName = "";
            if (allocatedStatEntryList[a].statREF != null)
                talentTreeName = allocatedStatEntryList[a].statREF._name;
            EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
            EditorGUILayout.EndHorizontal();
            allocatedStatEntryList[a].statREF =
                (RPGStat) EditorGUILayout.ObjectField("Stat",
                    RPGBuilderUtilities.GetStatFromIDEditor(
                        allocatedStatEntryList[a].statID, allStats),
                    typeof(RPGStat), false);

            allocatedStatEntryList[a].maxValue =
                DrawHorizontalIntField("Max Value", "",
                    smallFieldHeight,
                    allocatedStatEntryList[a].maxValue);
                
            allocatedStatEntryList[a].cost =
                DrawHorizontalIntField("Cost", "",
                    smallFieldHeight,
                    allocatedStatEntryList[a].cost);
                
            allocatedStatEntryList[a].valueAdded =
                DrawHorizontalIntField("Amount Added", "",
                    smallFieldHeight,
                    allocatedStatEntryList[a].valueAdded);

            if (allocatedStatEntryList[a].statREF != null)
            {
                allocatedStatEntryList[a].statID = allocatedStatEntryList[a].statREF.ID;
            }
            else
                allocatedStatEntryList[a].statID = -1;
        }

        EndHorizontalMargin(bigHorizontalSpace, true);

        return allocatedStatEntryList;
    }

    public object GetTargetObjectOfProperty(SerializedProperty prop)
    {
        if (prop == null) return null;

        var path = prop.propertyPath.Replace(".Array.data[", "[");
        object obj = prop.serializedObject.targetObject;
        var elements = path.Split('.');
        foreach (var element in elements)
            if (element.Contains("["))
            {
                var elementName = element.Substring(0, element.IndexOf("["));
                var index = Convert.ToInt32(element.Substring(element.IndexOf("[")).Replace("[", "").Replace("]", ""));
                obj = GetValue_Imp(obj, elementName, index);
            }
            else
            {
                obj = GetValue_Imp(obj, element);
            }

        return obj;
    }

    private object GetValue_Imp(object source, string name)
    {
        if (source == null)
            return null;
        var type = source.GetType();

        while (type != null)
        {
            var f = type.GetField(name, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
            if (f != null)
                return f.GetValue(source);

            var p = type.GetProperty(name,
                BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            if (p != null)
                return p.GetValue(source, null);

            type = type.BaseType;
        }

        return null;
    }

    private object GetValue_Imp(object source, string name, int index)
    {
        var enumerable = GetValue_Imp(source, name) as IEnumerable;
        if (enumerable == null) return null;
        var enm = enumerable.GetEnumerator();
        //while (index-- >= 0)
        //    enm.MoveNext();
        //return enm.Current;

        for (var i = 0; i <= index; i++)
            if (!enm.MoveNext())
                return null;
        return enm.Current;
    }

    private void DrawStatView()
    {
        if (currentlyViewedStat == null)
        {
            if (allStats.Count == 0)
            {
                CreateNew(AssetType.Stat);
                return;
            }

            currentlyViewedStat = Instantiate(allStats[0]) as RPGStat;

        }
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedStat;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        editorFilters.statModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.statModuleSection.showBaseInfo);
        if (editorFilters.statModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedStat.ID);
            currentlyViewedStat._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedStat._name);
            currentlyViewedStat.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedStat.displayName);
            currentlyViewedStat._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_STAT_" + currentlyViewedStat._name);
            currentlyViewedStat.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedStat.description);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.statModuleSection.showSetup =
            HandleModuleBanner("SETUP", editorFilters.statModuleSection.showSetup);
        if (editorFilters.statModuleSection.showSetup)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedStat.isPercentStat =
                DrawHorizontalToggle("Is Percent?", "",
                    smallFieldHeight,
                    currentlyViewedStat.isPercentStat);

            var currentStatCategoryIndex =
                getIndexFromName("StatUICategory", currentlyViewedStat.StatUICategory);
            var tempIndex3 = 0;
            tempIndex3 = EditorGUILayout.Popup(
                new GUIContent("UI Category", "Where in the Stat UI should this be displayed"),
                currentStatCategoryIndex, combatSettings.UIStatsCategoriesList.ToArray(), GUILayout.Height(smallFieldHeight));
            currentlyViewedStat.StatUICategory = GetStatCategoryNameFromID(tempIndex3);

            currentlyViewedStat.minCheck =
                DrawHorizontalToggle("Check. Min", "",
                    smallFieldHeight,
                    currentlyViewedStat.minCheck);
            if (currentlyViewedStat.minCheck)
            {
                currentlyViewedStat.minValue =
                    DrawHorizontalFloatField("Value. Min",
                        "The minimum value this stat can get to",
                        smallFieldHeight,
                        currentlyViewedStat.minValue);
            }

            currentlyViewedStat.maxCheck =
                DrawHorizontalToggle("Check. Max", "",
                    smallFieldHeight,
                    currentlyViewedStat.maxCheck);
            if (currentlyViewedStat.maxCheck)
            {
                currentlyViewedStat.maxValue =
                    DrawHorizontalFloatField("Value. Max",
                        "The maximum value this stat can get to",
                        smallFieldHeight,
                        currentlyViewedStat.maxValue);
            }

            currentlyViewedStat.baseValue =
                DrawHorizontalFloatField("Default Value",
                    "The initial value of the stat",
                    smallFieldHeight,
                    currentlyViewedStat.baseValue);

            currentlyViewedStat.isVitalityStat =
                DrawHorizontalToggle("Is Vitality?",
                    "Is this stat a resource like health and energy?",
                    smallFieldHeight,
                    currentlyViewedStat.isVitalityStat);

            if (currentlyViewedStat.isVitalityStat)
            {
                
                currentlyViewedStat.StartsAtMax =
                    DrawHorizontalToggle("Starts at Max?", "",
                        smallFieldHeight,
                        currentlyViewedStat.StartsAtMax);
                
                currentlyViewedStat.isShiftingOutsideCombat =
                    DrawHorizontalToggle("Rest Shifting?", "Is this stat shifting while outside of combat?",
                        smallFieldHeight,
                        currentlyViewedStat.isShiftingOutsideCombat);
                if (currentlyViewedStat.isShiftingOutsideCombat)
                {
                    currentlyViewedStat.shiftAmountOutsideCombat =
                        DrawHorizontalFloatField("Amount", "The amount that will be shifted",
                            smallFieldHeight,
                            currentlyViewedStat.shiftAmountOutsideCombat);
                    currentlyViewedStat.shiftIntervalOutsideCombat =
                        DrawHorizontalFloatField("Interval", "The duration between each shift",
                            smallFieldHeight,
                            currentlyViewedStat.shiftIntervalOutsideCombat);
                }

                currentlyViewedStat.isShiftingInCombat =
                    DrawHorizontalToggle("Combat Shifting?", "Is this stat shifting while in combat?",
                        smallFieldHeight,
                        currentlyViewedStat.isShiftingInCombat);
                if (currentlyViewedStat.isShiftingInCombat)
                {
                    currentlyViewedStat.shiftAmountInCombat =
                        DrawHorizontalFloatField("Amount", "The amount that will be shifted",
                            smallFieldHeight,
                            currentlyViewedStat.shiftAmountInCombat);
                    currentlyViewedStat.shiftIntervalInCombat =
                        DrawHorizontalFloatField("Interval", "The duration between each shift",
                            smallFieldHeight,
                            currentlyViewedStat.shiftIntervalInCombat);
                }
                
                currentlyViewedStat.isShiftingInSprint =
                    DrawHorizontalToggle("Shift while Sprinting?", "?",
                        smallFieldHeight,
                        currentlyViewedStat.isShiftingInSprint);
                currentlyViewedStat.isShiftingInBlock =
                    DrawHorizontalToggle("Shift while Blocking?", "?",
                        smallFieldHeight,
                        currentlyViewedStat.isShiftingInBlock);
                
                
            }
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        if (currentlyViewedStat.isVitalityStat)
        {
            GUILayout.Space(10);
            editorFilters.statModuleSection.showVitalityActions =
                HandleModuleBanner("VITALITY ACTIONS", editorFilters.statModuleSection.showVitalityActions);
            if (editorFilters.statModuleSection.showVitalityActions)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace, false);
                if (GUILayout.Button("+ Add Action", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedStat.vitalityActions.Add(new RPGStat.VitalityActions());
                }
                EndHorizontalMargin(middleButtonSpace, false);

                var ThisList5 = serialObj.FindProperty("vitalityActions");
                currentlyViewedStat.vitalityActions =
                    GetTargetObjectOfProperty(ThisList5) as List<RPGStat.VitalityActions>;

                GUILayout.Space(10);
                StartHorizontalMargin(bigHorizontalSpace, true);
                for (var a = 0; a < currentlyViewedStat.vitalityActions.Count; a++)
                {
                    GUILayout.Space(10);
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        currentlyViewedStat.vitalityActions.RemoveAt(a);
                        return;
                    }

                    EditorGUILayout.EndHorizontal();
                    currentlyViewedStat.vitalityActions[a].type =
                        (RPGStat.VitalityActionsTypes) EditorGUILayout.EnumPopup("Type:",
                            currentlyViewedStat.vitalityActions[a].type, GUILayout.Height(smallFieldHeight));

                    switch (currentlyViewedStat.vitalityActions[a].type)
                    {
                        case RPGStat.VitalityActionsTypes.Effect:
                            currentlyViewedStat.vitalityActions[a].effectREF =
                                (RPGEffect) EditorGUILayout.ObjectField("Effect:",
                                    RPGBuilderUtilities.GetEffectFromIDEditor(
                                        currentlyViewedStat.vitalityActions[a].elementID, allEffects),
                                    typeof(RPGEffect), false, GUILayout.Height(smallFieldHeight));

                            int effectRankField = currentlyViewedStat.vitalityActions[a].effectRank + 1;
                            if (effectRankField == 0) effectRankField = 1;

                            if (currentlyViewedStat.vitalityActions[a].effectREF != null)
                            {
                                currentlyViewedStat.vitalityActions[a].elementID =
                                    currentlyViewedStat.vitalityActions[a].effectREF.ID;

                                if (effectRankField > currentlyViewedStat.vitalityActions[a].effectREF.ranks
                                    .Count)
                                {
                                    effectRankField = currentlyViewedStat.vitalityActions[a].effectREF.ranks
                                        .Count;
                                }
                            }
                            else
                                currentlyViewedStat.vitalityActions[a].elementID = -1;


                            effectRankField = DrawHorizontalIntField("Effect Rank", "",
                                smallFieldHeight,
                                effectRankField);
                            currentlyViewedStat.vitalityActions[a].effectRank = effectRankField - 1;
                            break;
                        
                        case RPGStat.VitalityActionsTypes.Ability:
                            currentlyViewedStat.vitalityActions[a].abilityREF =
                                (RPGAbility) EditorGUILayout.ObjectField("Ability:",
                                    RPGBuilderUtilities.GetAbilityFromIDEditor(
                                        currentlyViewedStat.vitalityActions[a].elementID, allAbilities),
                                    typeof(RPGAbility), false, GUILayout.Height(smallFieldHeight));

                            currentlyViewedStat.vitalityActions[a].elementID =
                                currentlyViewedStat.vitalityActions[a].abilityREF != null
                                    ? currentlyViewedStat.vitalityActions[a].abilityREF.ID
                                    : -1;

                            break;
                    }

                    currentlyViewedStat.vitalityActions[a].value = DrawHorizontalFloatField("Value", "",
                        smallFieldHeight,
                        currentlyViewedStat.vitalityActions[a].value);
                    currentlyViewedStat.vitalityActions[a].valueType =
                        (RPGStat.VitalityActionsValueType) EditorGUILayout.EnumPopup("Value Type:",
                            currentlyViewedStat.vitalityActions[a].valueType, GUILayout.Height(smallFieldHeight));
                    currentlyViewedStat.vitalityActions[a].isPercent = DrawHorizontalToggle("Is Percent?", "",
                        smallFieldHeight,
                        currentlyViewedStat.vitalityActions[a].isPercent);
                }

                EndHorizontalMargin(bigHorizontalSpace, true);
                GUILayout.Space(10);
            }
        }
        else
        {
            GUILayout.Space(10);
            editorFilters.statModuleSection.showBonuses =
                HandleModuleBanner("BONUSES", editorFilters.statModuleSection.showBonuses);
            if (editorFilters.statModuleSection.showBonuses)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace, false);
                if (GUILayout.Button("+ Add Bonus", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedStat.statBonuses.Add(new RPGStat.StatBonusData());
                }
                EndHorizontalMargin(middleButtonSpace, false);

                var ThisList22 = serialObj.FindProperty("statBonuses");
                currentlyViewedStat.statBonuses = GetTargetObjectOfProperty(ThisList22) as List<RPGStat.StatBonusData>;

                StartHorizontalMargin(bigHorizontalSpace, true);
                for (var a = 0; a < currentlyViewedStat.statBonuses.Count; a++)
                {
                    GUILayout.Space(10);
                    var requirementNumber = a + 1;
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        currentlyViewedStat.statBonuses.RemoveAt(a);
                        return;
                    }

                    EditorGUILayout.LabelField("Bonus " + requirementNumber + ":");
                    EditorGUILayout.EndHorizontal();

                    currentlyViewedStat.statBonuses[a].statType =
                        (RPGStat.STAT_TYPE) EditorGUILayout.EnumPopup(
                            new GUIContent("Type",
                                "The Stat Type, this will be used in the game logic to trigger some specific actions based on its type."),
                            currentlyViewedStat.statBonuses[a].statType, GUILayout.Height(smallFieldHeight));

                    currentlyViewedStat.statBonuses[a].modifyValue = DrawHorizontalFloatField("Modifier", "",
                        smallFieldHeight,
                        currentlyViewedStat.statBonuses[a].modifyValue);

                    if (currentlyViewedStat.statBonuses[a].statType == RPGStat.STAT_TYPE.DAMAGE ||
                        currentlyViewedStat.statBonuses[a].statType == RPGStat.STAT_TYPE.HEALING
                        || currentlyViewedStat.statBonuses[a].statType == RPGStat.STAT_TYPE.BASE_DAMAGE_TYPE)
                    {
                        var currentStatFunctionIndex =
                            getIndexFromName("StatFunction",
                                currentlyViewedStat.statBonuses[a].StatFunction);
                        var tempIndex = EditorGUILayout.Popup(
                            new GUIContent("Function",
                                "The function of this Stat, will be checked in the game logic to execute the function"),
                            currentStatFunctionIndex, combatSettings.StatFunctionsList.ToArray(), GUILayout.Height(smallFieldHeight));
                        currentlyViewedStat.statBonuses[a].StatFunction = GetStatFunctionNameFromID(tempIndex);
                    }

                    if (currentlyViewedStat.statBonuses[a].statType == RPGStat.STAT_TYPE.DAMAGE ||
                        currentlyViewedStat.statBonuses[a].statType == RPGStat.STAT_TYPE.RESISTANCE
                        || currentlyViewedStat.statBonuses[a].statType == RPGStat.STAT_TYPE.BASE_DAMAGE_TYPE
                        || currentlyViewedStat.statBonuses[a].statType == RPGStat.STAT_TYPE.BASE_RESISTANCE_TYPE)
                    {
                        var correctOppositeStatList =
                            getCorrectOppositeStatsList(currentlyViewedStat.statBonuses[a].statType);
                        var currentOppositeStatIndex = GetIndexFromStatName(correctOppositeStatList,
                            currentlyViewedStat.statBonuses[a].OppositeStat);
                        var tempIndex2 = EditorGUILayout.Popup(
                            new GUIContent("Opposite Stat",
                                "If not empty, the opposite stat will be used to counter this main stat, such as Damage/Resistance"),
                            currentOppositeStatIndex, correctOppositeStatList, GUILayout.Height(smallFieldHeight));
                        currentlyViewedStat.statBonuses[a].OppositeStat = correctOppositeStatList[tempIndex2];
                    }

                    switch (currentlyViewedStat.statBonuses[a].statType)
                    {
                        case RPGStat.STAT_TYPE.VITALITY_REGEN:
                        {
                            currentlyViewedStat.statBonuses[a].statID =
                                DrawRPGDataEntryField(currentlyViewedStat.statBonuses[a].statID, "Stat", "Stat Regen:");
                            break;
                        }
                        case RPGStat.STAT_TYPE.EFFECT_TRIGGER:
                        {
                            GUILayout.Space(10);
                            StartHorizontalMargin(middleButtonSpace, false);
                            if (GUILayout.Button("+ Add Effect", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                                GUILayout.ExpandWidth(true)))
                            {
                                currentlyViewedStat.onHitEffectsData.Add(new RPGStat.OnHitEffectsData());
                            }

                            EndHorizontalMargin(middleButtonSpace, false);

                            var ThisList5 = serialObj.FindProperty("onHitEffectsData");
                            currentlyViewedStat.onHitEffectsData =
                                GetTargetObjectOfProperty(ThisList5) as List<RPGStat.OnHitEffectsData>;

                            for (var u = 0; u < currentlyViewedStat.onHitEffectsData.Count; u++)
                            {
                                GUILayout.Space(10);
                                var requirementNumber2 = u + 1;
                                EditorGUILayout.BeginHorizontal();
                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                    GUILayout.Height(20)))
                                {
                                    currentlyViewedStat.onHitEffectsData.RemoveAt(u);
                                    return;
                                }

                                EditorGUILayout.LabelField("Visual:" + requirementNumber2 + ":");
                                EditorGUILayout.EndHorizontal();
                                currentlyViewedStat.onHitEffectsData[u].targetType =
                                    (RPGCombatDATA.TARGET_TYPE) EditorGUILayout.EnumPopup("Target Type:",
                                        currentlyViewedStat
                                            .onHitEffectsData[u].targetType, GUILayout.Height(smallFieldHeight));
                                currentlyViewedStat.onHitEffectsData[u].tagType =
                                    (RPGAbility.ABILITY_TAGS) EditorGUILayout.EnumPopup("When:",
                                        currentlyViewedStat
                                            .onHitEffectsData[u].tagType, GUILayout.Height(smallFieldHeight));
                                currentlyViewedStat.onHitEffectsData[u].effectREF =
                                    (RPGEffect) EditorGUILayout.ObjectField("Effect:",
                                        RPGBuilderUtilities.GetEffectFromIDEditor(
                                            currentlyViewedStat.onHitEffectsData[u].effectID, allEffects),
                                        typeof(RPGEffect), false, GUILayout.Height(smallFieldHeight));

                                int effectRankField = currentlyViewedStat.onHitEffectsData[u].effectRank + 1;
                                if (effectRankField == 0) effectRankField = 1;

                                if (currentlyViewedStat.onHitEffectsData[u].effectREF != null)
                                {
                                    currentlyViewedStat.onHitEffectsData[u].effectID =
                                        currentlyViewedStat.onHitEffectsData[u].effectREF.ID;

                                    if (effectRankField > currentlyViewedStat.onHitEffectsData[u].effectREF.ranks.Count)
                                    {
                                        effectRankField = currentlyViewedStat.onHitEffectsData[u].effectREF.ranks.Count;
                                    }
                                }
                                else
                                    currentlyViewedStat.onHitEffectsData[u].effectID = -1;


                                effectRankField = DrawHorizontalIntField("Effect Rank", "",
                                    smallFieldHeight,
                                    effectRankField);
                                currentlyViewedStat.onHitEffectsData[u].effectRank = effectRankField - 1;

                                currentlyViewedStat.onHitEffectsData[u].chance =
                                    DrawHorizontalSlider("Chance", "",
                                        smallFieldHeight,
                                        currentlyViewedStat.onHitEffectsData[u].chance, 0f, 100f);
                            }

                            break;
                        }
                    }
                }
                EndHorizontalMargin(bigHorizontalSpace, true);
            }
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private string[] getCorrectOppositeStatsList(RPGStat.STAT_TYPE type)
    {

        var oppositeType = RPGStat.STAT_TYPE.NONE;
        if (type == RPGStat.STAT_TYPE.DAMAGE)
            oppositeType = RPGStat.STAT_TYPE.RESISTANCE;
        else if (type == RPGStat.STAT_TYPE.RESISTANCE)
            oppositeType = RPGStat.STAT_TYPE.PENETRATION;
        else if (type == RPGStat.STAT_TYPE.PENETRATION)
            oppositeType = RPGStat.STAT_TYPE.RESISTANCE;
        else if (type == RPGStat.STAT_TYPE.HEALING)
            oppositeType = RPGStat.STAT_TYPE.ABSORBTION;
        else if (type == RPGStat.STAT_TYPE.CC_POWER)
            oppositeType = RPGStat.STAT_TYPE.CC_RESISTANCE;
        else if (type == RPGStat.STAT_TYPE.CC_RESISTANCE)
            oppositeType = RPGStat.STAT_TYPE.CC_POWER;
        else if (type == RPGStat.STAT_TYPE.DMG_DEALT)
            oppositeType = RPGStat.STAT_TYPE.DMG_TAKEN;
        else if (type == RPGStat.STAT_TYPE.DMG_TAKEN)
            oppositeType = RPGStat.STAT_TYPE.DMG_DEALT;
        else if (type == RPGStat.STAT_TYPE.HEAL_RECEIVED)
            oppositeType = RPGStat.STAT_TYPE.HEAL_DONE;
        else if (type == RPGStat.STAT_TYPE.HEAL_DONE)
            oppositeType = RPGStat.STAT_TYPE.HEAL_RECEIVED;
        else if (type == RPGStat.STAT_TYPE.BASE_DAMAGE_TYPE)
            oppositeType = RPGStat.STAT_TYPE.BASE_RESISTANCE_TYPE;
        else if (type == RPGStat.STAT_TYPE.BASE_RESISTANCE_TYPE)
            oppositeType = RPGStat.STAT_TYPE.PENETRATION;

        var statList = new List<string> {"NONE"};
        foreach (var t in allStats)
        foreach (var t1 in t.statBonuses)
            if (t1.statType == oppositeType)
                statList.Add(t._name);

        return statList.ToArray();
    }

    private string GetStatFunctionNameFromID (int Index)
    {
        return combatSettings.StatFunctionsList[Index];
    }

    private string GetStatCategoryNameFromID(int Index)
    {
        if (Index != -1 && Index != 0)
            return combatSettings.UIStatsCategoriesList[Index];
        else
            return "";
    }

    private int getIndexFromActionKey(string actionKeyName)
    {
        if(generalSettings == null) LoadSettings();
        for (var i = 0; i < generalSettings.actionKeys.Count; i++)
        {
            if (generalSettings.actionKeys[i].actionName == actionKeyName) return i;
        }
        return -1;
    }

    private int getIndexFromName(string dataType, string curName)
    {
        if(combatSettings == null || itemSettings == null || generalSettings == null) LoadSettings();
        switch (dataType)
        {
            case "StatFunction":
            case "statFunction":
                for (var i = 0; i < combatSettings.StatFunctionsList.Count; i++)
                    if (combatSettings.StatFunctionsList[i] == curName) return i;
                return 0;

            case "ItemType":
            case "itemType":
                for (var i = 0; i < itemSettings.itemTypeList.Count; i++)
                    if (itemSettings.itemTypeList[i] == curName) return i;
                return 0;

            case "ItemRarity":
            case "rarity":
                for (var i = 0; i < itemSettings.itemRarityList.Count; i++)
                    if (itemSettings.itemRarityList[i] == curName) return i;
                return 0;

            case "WeaponType":
            case "weaponType":
                for (var i = 0; i < itemSettings.weaponTypeList.Count; i++)
                    if (itemSettings.weaponTypeList[i] == curName) return i;
                return 0;

            case "ArmorType":
            case "armorType":
                for (var i = 0; i < itemSettings.armorTypeList.Count; i++)
                    if (itemSettings.armorTypeList[i] == curName) return i;
                return 0;

            case "ArmorSlots":
            case "armorSlots":
                for (var i = 0; i < itemSettings.armorSlotsList.Count; i++)
                    if (itemSettings.armorSlotsList[i] == curName) return i;
                return 0;

            case "WeaponSlots":
            case "weaponSlots":
                for (var i = 0; i < itemSettings.weaponSlotsList.Count; i++)
                    if (itemSettings.weaponSlotsList[i] == curName) return i;
                return 0;

            case "SlotType":
            case "slotType":
                for (var i = 0; i < itemSettings.slotTypeList.Count; i++)
                    if (itemSettings.slotTypeList[i] == curName) return i;
                return 0;

            case "StatUICategory":
            case "statUICategory":
                for (var i = 0; i < combatSettings.UIStatsCategoriesList.Count; i++)
                    if (combatSettings.UIStatsCategoriesList[i] == curName) return i;
                return 0;

            case "SocketType":
            case "socketType":
                for (var i = 0; i < itemSettings.socketTypeList.Count; i++)
                    if (itemSettings.socketTypeList[i] == curName) return i;
                return 0;
            
            case "FactionStance":
            case "factionStance":
                for (var i = 0; i < combatSettings.FactionStancesList.Count; i++)
                    if (combatSettings.FactionStancesList[i] == curName) return i;
                return 0;
            
            case "NodeSocket":
            case "nodeSocket":
                for (var i = 0; i < combatSettings.nodeSocketNames.Count; i++)
                    if (combatSettings.nodeSocketNames[i] == curName) return i;
                return 0;
            
            case "AbilityCooldownTag":
            case "abilityCooldownTag":
                for (var i = 0; i < combatSettings.AbilityCooldownTagList.Count; i++)
                    if (combatSettings.AbilityCooldownTagList[i] == curName) return i;
                return 0;
            
            case "EffectTag":
            case "effectTag":
                for (var i = 0; i < combatSettings.EffectTagList.Count; i++)
                    if (combatSettings.EffectTagList[i] == curName) return i;
                return 0;
            
            case "ActionKeyCategory":
                for (var i = 0; i < generalSettings.ActionKeyCategoryList.Count; i++)
                    if (generalSettings.ActionKeyCategoryList[i] == curName) return i;
                return 0;
                
            default:
                return -1;
        }
    }

    private int GetIndexFromStatName(string[] statList, string curName)
    {
        for (var i = 0; i < statList.Length; i++)
            if (statList[i] == curName) return i;
        return 0;
    }

    private string GetSecondaryDamageNameFromID(string[] statList, int Index)
    {
        return statList[Index];
    }

    private int GetIndexFromSecondaryDamageName(string[] statList, string curName)
    {
        for (var i = 0; i < statList.Length; i++)
            if (statList[i] == curName) return i;
        return 0;
    }

    private string[] getCorrectStatsList (RPGStat.STAT_TYPE type)
    {
        var statList = new List<string>();
        statList.Add("NONE");
        foreach (var t in allStats)
        foreach (var t1 in t.statBonuses)
            if(t1.statType == type) statList.Add(t._name);

        return statList.ToArray();
    }


    private void DrawSkillView()
    {
        if (currentlyViewedSkill == null)
        {
            if (allSkills.Count == 0)
            {
                CreateNew(AssetType.Skill);
                return;
            }

            currentlyViewedSkill = Instantiate(allSkills[0]) as RPGSkill;

        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedSkill;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.skillModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.skillModuleSection.showBaseInfo);
        if (editorFilters.skillModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedSkill.icon = DrawIconField(currentlyViewedSkill.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedSkill.ID);
            currentlyViewedSkill._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedSkill._name);
            currentlyViewedSkill.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedSkill.displayName);
            currentlyViewedSkill._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_SKILL_" + currentlyViewedSkill._name);
            currentlyViewedSkill.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedSkill.description);
            currentlyViewedSkill.levelTemplateREF = (RPGLevelsTemplate) EditorGUILayout.ObjectField("Level Template",
                RPGBuilderUtilities.GetLevelTemplateFromIDEditor(currentlyViewedSkill.levelTemplateID,
                    allLevelsTemplate), typeof(RPGLevelsTemplate), false);
            currentlyViewedSkill.levelTemplateID = currentlyViewedSkill.levelTemplateREF != null
                ? currentlyViewedSkill.levelTemplateREF.ID
                : -1;
            currentlyViewedSkill.automaticlyAdded =
                DrawHorizontalToggle("Auto. Added? ", "",
                    smallFieldHeight,
                    currentlyViewedSkill.automaticlyAdded);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }


        GUILayout.Space(10);
        editorFilters.skillModuleSection.showStats =
            HandleModuleBanner("STATS", editorFilters.skillModuleSection.showStats);
        if (editorFilters.skillModuleSection.showStats)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedSkill.stats.Add(new RPGSkill.STATS_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList3 = serialObj.FindProperty("stats");
            currentlyViewedSkill.stats =
                GetTargetObjectOfProperty(ThisList3) as List<RPGSkill.STATS_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedSkill.stats.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedSkill.stats.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedSkill.stats[a].statREF != null)
                    talentTreeName = currentlyViewedSkill.stats[a].statREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedSkill.stats[a].statREF = (RPGStat) EditorGUILayout.ObjectField("Stat",
                    RPGBuilderUtilities.GetStatFromIDEditor(currentlyViewedSkill.stats[a].statID,
                        allStats), typeof(RPGStat), false);
                currentlyViewedSkill.stats[a].amount =
                    DrawHorizontalFloatField("Value", "",
                        smallFieldHeight,
                        currentlyViewedSkill.stats[a].amount);

                currentlyViewedSkill.stats[a].bonusPerLevel =
                    DrawHorizontalFloatField("Level Gain", "",
                        smallFieldHeight,
                        currentlyViewedSkill.stats[a].bonusPerLevel);

                if (currentlyViewedSkill.stats[a].statREF != null)
                {
                    currentlyViewedSkill.stats[a].statID = currentlyViewedSkill.stats[a].statREF.ID;
                    if (!currentlyViewedSkill.stats[a].statREF.isPercentStat)
                    {
                        currentlyViewedSkill.stats[a].isPercent =
                            DrawHorizontalToggle("Is Percent?", "",
                                smallFieldHeight,
                                currentlyViewedSkill.stats[a].isPercent);
                    }
                    else
                    {
                        currentlyViewedSkill.stats[a].isPercent = false;
                    }
                }
                else
                    currentlyViewedSkill.stats[a].statID = -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }


        GUILayout.Space(10);
        editorFilters.skillModuleSection.showTalentTrees =
            HandleModuleBanner("TALENT TREES", editorFilters.skillModuleSection.showTalentTrees);
        if (editorFilters.skillModuleSection.showTalentTrees)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Talent Tree", skin.GetStyle("AddButton"),
                GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedSkill.talentTrees.Add(new RPGSkill.TalentTreesDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("talentTrees");
            currentlyViewedSkill.talentTrees =
                GetTargetObjectOfProperty(ThisList2) as List<RPGSkill.TalentTreesDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedSkill.talentTrees.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedSkill.talentTrees.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedSkill.talentTrees[a].talentTreeREF != null)
                    talentTreeName = currentlyViewedSkill.talentTrees[a].talentTreeREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedSkill.talentTrees[a].talentTreeREF =
                    (RPGTalentTree) EditorGUILayout.ObjectField("Talent Tree",
                        RPGBuilderUtilities.GetTalentTreeFromIDEditor(
                            currentlyViewedSkill.talentTrees[a].talentTreeID, allTalentTrees),
                        typeof(RPGTalentTree), false);
                currentlyViewedSkill.talentTrees[a].talentTreeID =
                    currentlyViewedSkill.talentTrees[a].talentTreeREF != null
                        ? currentlyViewedSkill.talentTrees[a].talentTreeREF.ID
                        : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }


        GUILayout.Space(10);
        editorFilters.skillModuleSection.showActionAbilities =
            HandleModuleBanner("ACTION ABILITIES", editorFilters.skillModuleSection.showActionAbilities);
        if (editorFilters.skillModuleSection.showActionAbilities)
        {
            DrawActionAbilityList(currentlyViewedSkill.actionAbilities);
        }

        GUILayout.Space(10);
        editorFilters.skillModuleSection.showStartingItems =
            HandleModuleBanner("STARTING ITEMS", editorFilters.skillModuleSection.showStartingItems);
        if (editorFilters.skillModuleSection.showStartingItems)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedSkill.startItems.Add(new RPGItemDATA.StartingItemsDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList4 = serialObj.FindProperty("startItems");
            currentlyViewedSkill.startItems =
                GetTargetObjectOfProperty(ThisList4) as List<RPGItemDATA.StartingItemsDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedSkill.startItems.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedSkill.startItems.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedSkill.startItems[a].itemREF != null)
                    talentTreeName = currentlyViewedSkill.startItems[a].itemREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedSkill.startItems[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                    RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedSkill.startItems[a].itemID,
                        allItems), typeof(RPGItem), false);

                currentlyViewedSkill.startItems[a].count =
                    DrawHorizontalIntField("Count", "",
                        smallFieldHeight,
                        currentlyViewedSkill.startItems[a].count);

                currentlyViewedSkill.startItems[a].equipped =
                    DrawHorizontalToggle("Equipped", "",
                        smallFieldHeight,
                        currentlyViewedSkill.startItems[a].equipped);

                currentlyViewedSkill.startItems[a].itemID =
                    currentlyViewedSkill.startItems[a].itemREF != null
                        ? currentlyViewedSkill.startItems[a].itemREF.ID
                        : -1;
            }
            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.skillModuleSection.showStatAllocationGame =
            HandleModuleBanner("STAT ALLOCATION", editorFilters.skillModuleSection.showStatAllocationGame);
        if (editorFilters.skillModuleSection.showStatAllocationGame)
        {
            currentlyViewedSkill.allocatedStatsEntriesGame = DrawStatAllocationList(currentlyViewedSkill.allocatedStatsEntriesGame);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawActionAbilityList(List<RPGCombatDATA.ActionAbilityDATA> actionAbilities)
    {
        GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Ability", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                actionAbilities.Add(new RPGCombatDATA.ActionAbilityDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < actionAbilities.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    actionAbilities.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (actionAbilities[a].abilityREF != null)
                    talentTreeName = actionAbilities[a].abilityREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                actionAbilities[a].abilityID = DrawRPGDataEntryField(actionAbilities[a].abilityID, "Ability", "Ability");

                actionAbilities[a].keyType =
                    (RPGCombatDATA.ActionAbilityKeyType) EditorGUILayout.EnumPopup("Key Type", actionAbilities[a].keyType);

                switch (actionAbilities[a].keyType)
                {
                    case RPGCombatDATA.ActionAbilityKeyType.OverrideKey:
                        actionAbilities[a].key =
                            (KeyCode) EditorGUILayout.EnumPopup("Key",
                                actionAbilities[a].key);
                        break;
                    case RPGCombatDATA.ActionAbilityKeyType.ActionKey:
                        var actionKeyIndex =
                            getIndexFromActionKey(actionAbilities[a].actionKeyName);
                        if (actionKeyIndex == -1) actionKeyIndex = 0;
                        List<string> allActionKeyNames = GetActionKeyNamesList();
                        var tempIndex = EditorGUILayout.Popup("Action Key", actionKeyIndex,
                            GetActionKeyNamesList().ToArray());
                        if (generalSettings.actionKeys.Count > 0)
                            actionAbilities[a].actionKeyName = allActionKeyNames[tempIndex];

                        break;
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        
        
    }

    private void DrawRaceView()
    {
        if (currentlyViewedRace == null)
        {
            if (allRaces.Count == 0)
            {
                CreateNew(AssetType.Race);
                return;
            }

            currentlyViewedRace = Instantiate(allRaces[0]) as RPGRace;

        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedRace;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.raceModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.raceModuleSection.showBaseInfo);
        if (editorFilters.raceModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedRace.ID);
            currentlyViewedRace._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedRace._name);
            currentlyViewedRace.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedRace.displayName);
            currentlyViewedRace._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_RACE_" + currentlyViewedRace._name);
            currentlyViewedRace.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedRace.description);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.raceModuleSection.showVisual =
            HandleModuleBanner("VISUAL", editorFilters.raceModuleSection.showVisual);
        if (editorFilters.raceModuleSection.showVisual)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedRace.malePrefab = (GameObject) EditorGUILayout.ObjectField("Male Prefab",
                currentlyViewedRace.malePrefab, typeof(GameObject), false);
            currentlyViewedRace.maleIcon = (Sprite) EditorGUILayout.ObjectField("Male Icon",
                currentlyViewedRace.maleIcon, typeof(Sprite), false, GUILayout.Width(200));
            
            currentlyViewedRace.femalePrefab = (GameObject) EditorGUILayout.ObjectField("Female Prefab",
                currentlyViewedRace.femalePrefab, typeof(GameObject), false);
            currentlyViewedRace.femaleIcon = (Sprite) EditorGUILayout.ObjectField("Female Icon",
                currentlyViewedRace.femaleIcon, typeof(Sprite), false, GUILayout.Width(200));

            currentlyViewedRace.dynamicAnimator = DrawHorizontalToggle("Dynamic Animator ?", "", smallFieldHeight,
                currentlyViewedRace.dynamicAnimator);
            if (currentlyViewedRace.dynamicAnimator)
            {
                currentlyViewedRace.restAnimatorController = (RuntimeAnimatorController)
                    EditorGUILayout.ObjectField("Rest Controller", currentlyViewedRace.restAnimatorController,
                        typeof(RuntimeAnimatorController), false, GUILayout.Height(20));
                currentlyViewedRace.combatAnimatorController = (RuntimeAnimatorController)
                    EditorGUILayout.ObjectField("Combat Controller", currentlyViewedRace.combatAnimatorController,
                        typeof(RuntimeAnimatorController), false, GUILayout.Height(20));
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.raceModuleSection.showStartingSettings =
            HandleModuleBanner("START SETTINGS", editorFilters.raceModuleSection.showStartingSettings);
        if (editorFilters.raceModuleSection.showStartingSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedRace.startingSceneREF = (RPGGameScene) EditorGUILayout.ObjectField("Game Scene",
                RPGBuilderUtilities.GetGameSceneFromIDEditor(currentlyViewedRace.startingSceneID, allGameScenes),
                typeof(RPGGameScene), false, GUILayout.Height(20));

            currentlyViewedRace.startingSceneID = currentlyViewedRace.startingSceneREF != null
                ? currentlyViewedRace.startingSceneREF.ID
                : -1;

            currentlyViewedRace.startingPositionREF = (RPGWorldPosition) EditorGUILayout.ObjectField("Position:",
                RPGBuilderUtilities.GetWorldPositionFromIDEditor(currentlyViewedRace.startingPositionID,
                    allWorldPositions), typeof(RPGWorldPosition), false, GUILayout.Height(20));

            currentlyViewedRace.startingPositionID = currentlyViewedRace.startingPositionREF != null
                ? currentlyViewedRace.startingPositionREF.ID
                : -1;

            currentlyViewedRace.factionREF = (RPGFaction) EditorGUILayout.ObjectField("Faction:",
                RPGBuilderUtilities.GetFactionFromIDEditor(currentlyViewedRace.factionID, allFactions),
                typeof(RPGFaction), false, GUILayout.Height(20));
            currentlyViewedRace.speciesID = DrawRPGDataEntryField(currentlyViewedRace.speciesID, "Species", "Species:");

            currentlyViewedRace.factionID =
                currentlyViewedRace.factionREF != null ? currentlyViewedRace.factionREF.ID : -1;

            EndHorizontalMargin(bigHorizontalSpace, true);
        }


        GUILayout.Space(10);
        editorFilters.raceModuleSection.showClasses =
            HandleModuleBanner("CLASSES", editorFilters.raceModuleSection.showClasses);
        if (editorFilters.raceModuleSection.showClasses)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Class", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedRace.availableClasses.Add(new RPGRace.RACE_CLASSES_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList5 = serialObj.FindProperty("availableClasses");
            currentlyViewedRace.availableClasses =
                GetTargetObjectOfProperty(ThisList5) as List<RPGRace.RACE_CLASSES_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedRace.availableClasses.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedRace.availableClasses.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedRace.availableClasses[a].classREF != null)
                    talentTreeName = currentlyViewedRace.availableClasses[a].classREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedRace.availableClasses[a].classREF = (RPGClass) EditorGUILayout.ObjectField("Class",
                    RPGBuilderUtilities.GetClassFromIDEditor(currentlyViewedRace.availableClasses[a].classID,
                        allClasses),
                    typeof(RPGClass), false);

                currentlyViewedRace.availableClasses[a].classID =
                    currentlyViewedRace.availableClasses[a].classREF != null
                        ? currentlyViewedRace.availableClasses[a].classREF.ID
                        : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.raceModuleSection.showWeaponTemplate =
            HandleModuleBanner("WEAPON TEMPLATES", editorFilters.raceModuleSection.showWeaponTemplate);
        if (editorFilters.raceModuleSection.showWeaponTemplate)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Weapon Template", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedRace.weaponTemplates.Add(new RPGRace.WEAPON_TEMPLATES_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList25 = serialObj.FindProperty("weaponTemplates");
            currentlyViewedRace.weaponTemplates =
                GetTargetObjectOfProperty(ThisList25) as List<RPGRace.WEAPON_TEMPLATES_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedRace.weaponTemplates.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedRace.weaponTemplates.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedRace.weaponTemplates[a].weaponTemplateREF != null)
                    talentTreeName = currentlyViewedRace.weaponTemplates[a].weaponTemplateREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedRace.weaponTemplates[a].weaponTemplateREF =
                    (RPGWeaponTemplate) EditorGUILayout.ObjectField("Weapon Template",
                        RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(
                            currentlyViewedRace.weaponTemplates[a].weaponTemplateID, allWeaponTemplates),
                        typeof(RPGWeaponTemplate), false);

                currentlyViewedRace.weaponTemplates[a].weaponTemplateID =
                    currentlyViewedRace.weaponTemplates[a].weaponTemplateREF != null
                        ? currentlyViewedRace.weaponTemplates[a].weaponTemplateREF.ID
                        : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }


        GUILayout.Space(10);
        editorFilters.raceModuleSection.showStats =
            HandleModuleBanner("STATS", editorFilters.raceModuleSection.showStats);
        if (editorFilters.raceModuleSection.showStats)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedRace.stats.Add(new RPGRace.RACE_STATS_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList3 = serialObj.FindProperty("stats");
            currentlyViewedRace.stats = GetTargetObjectOfProperty(ThisList3) as List<RPGRace.RACE_STATS_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedRace.stats.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedRace.stats.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedRace.stats[a].statREF != null)
                    talentTreeName = currentlyViewedRace.stats[a].statREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedRace.stats[a].statREF = (RPGStat) EditorGUILayout.ObjectField("Stat",
                    RPGBuilderUtilities.GetStatFromIDEditor(currentlyViewedRace.stats[a].statID, allStats),
                    typeof(RPGStat), false);

                currentlyViewedRace.stats[a].amount =
                    DrawHorizontalFloatField("Value", "",
                        smallFieldHeight,
                        currentlyViewedRace.stats[a].amount);

                if (currentlyViewedRace.stats[a].statREF != null)
                {
                    currentlyViewedRace.stats[a].statID = currentlyViewedRace.stats[a].statREF.ID;

                    if (!currentlyViewedRace.stats[a].statREF.isPercentStat)
                    {
                        currentlyViewedRace.stats[a].isPercent =
                            DrawHorizontalToggle("Is Percent?", "",
                                smallFieldHeight,
                                currentlyViewedRace.stats[a].isPercent);
                    }
                    else
                    {
                        currentlyViewedRace.stats[a].isPercent = false;
                    }
                }
                else
                    currentlyViewedRace.stats[a].statID = -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.raceModuleSection.showActionAbilities =
            HandleModuleBanner("ACTION ABILITIES", editorFilters.raceModuleSection.showActionAbilities);
        if (editorFilters.raceModuleSection.showActionAbilities)
        {
            DrawActionAbilityList(currentlyViewedRace.actionAbilities);
        }

        GUILayout.Space(10);
        editorFilters.raceModuleSection.showStartingItems =
            HandleModuleBanner("STARTING ITEMS", editorFilters.raceModuleSection.showStartingItems);
        if (editorFilters.raceModuleSection.showStartingItems)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedRace.startItems.Add(new RPGItemDATA.StartingItemsDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList4 = serialObj.FindProperty("startItems");
            currentlyViewedRace.startItems =
                GetTargetObjectOfProperty(ThisList4) as List<RPGItemDATA.StartingItemsDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedRace.startItems.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedRace.startItems.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedRace.startItems[a].itemREF != null)
                    talentTreeName = currentlyViewedRace.startItems[a].itemREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedRace.startItems[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                    RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedRace.startItems[a].itemID, allItems),
                    typeof(RPGItem), false);

                currentlyViewedRace.startItems[a].count =
                    DrawHorizontalIntField("Count", "",
                        smallFieldHeight,
                        currentlyViewedRace.startItems[a].count);

                currentlyViewedRace.startItems[a].equipped =
                    DrawHorizontalToggle("Equipped", "",
                        smallFieldHeight,
                        currentlyViewedRace.startItems[a].equipped);

                currentlyViewedRace.startItems[a].itemID = currentlyViewedRace.startItems[a].itemREF != null
                    ? currentlyViewedRace.startItems[a].itemREF.ID
                    : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.raceModuleSection.showStatAllocation =
            HandleModuleBanner("STAT ALLOCATION MENU", editorFilters.raceModuleSection.showStatAllocation);
        if (editorFilters.raceModuleSection.showStatAllocation)
        {
            GUILayout.Space(10);
            
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedRace.allocationStatPoints =
                DrawHorizontalIntField("Points To Allocate", "",
                    smallFieldHeight,
                    currentlyViewedRace.allocationStatPoints);
            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
            
            currentlyViewedRace.allocatedStatsEntries = DrawStatAllocationList(currentlyViewedRace.allocatedStatsEntries);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawClassView()
    {
        if (currentlyViewedClass == null)
        {
            if (allClasses.Count == 0)
            {
                CreateNew(AssetType.Class);
                return;
            }

            currentlyViewedClass = Instantiate(allClasses[0]) as RPGClass;

        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedClass;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.classModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.classModuleSection.showBaseInfo);
        if (editorFilters.classModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedClass.icon = DrawIconField(currentlyViewedClass.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedClass.ID);
            currentlyViewedClass._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedClass._name);
            currentlyViewedClass.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedClass.displayName);
            currentlyViewedClass._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_CLASS_" + currentlyViewedClass._name);
            currentlyViewedClass.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedClass.description);
            currentlyViewedClass.levelTemplateREF = (RPGLevelsTemplate) EditorGUILayout.ObjectField("Level Template",
                RPGBuilderUtilities.GetLevelTemplateFromIDEditor(currentlyViewedClass.levelTemplateID,
                    allLevelsTemplate), typeof(RPGLevelsTemplate), false);
            currentlyViewedClass.levelTemplateID = currentlyViewedClass.levelTemplateREF != null
                ? currentlyViewedClass.levelTemplateREF.ID
                : -1;

            currentlyViewedClass.autoAttackAbilityREF = (RPGAbility) EditorGUILayout.ObjectField("Auto Attack",
                RPGBuilderUtilities.GetAbilityFromIDEditor(currentlyViewedClass.autoAttackAbilityID, allAbilities),
                typeof(RPGAbility), false);

            currentlyViewedClass.autoAttackAbilityID = currentlyViewedClass.autoAttackAbilityREF != null
                ? currentlyViewedClass.autoAttackAbilityREF.ID
                : -1;
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }


        GUILayout.Space(10);
        editorFilters.classModuleSection.showStats =
            HandleModuleBanner("STATS", editorFilters.classModuleSection.showStats);
        if (editorFilters.classModuleSection.showStats)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedClass.stats.Add(new RPGClass.CLASS_STATS_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList3 = serialObj.FindProperty("stats");
            currentlyViewedClass.stats = GetTargetObjectOfProperty(ThisList3) as List<RPGClass.CLASS_STATS_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedClass.stats.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedClass.stats.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedClass.stats[a].statREF != null)
                    talentTreeName = currentlyViewedClass.stats[a].statREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedClass.stats[a].statREF = (RPGStat) EditorGUILayout.ObjectField("Stat",
                    RPGBuilderUtilities.GetStatFromIDEditor(currentlyViewedClass.stats[a].statID, allStats),
                    typeof(RPGStat), false);

                currentlyViewedClass.stats[a].amount =
                    DrawHorizontalFloatField("Value", "",
                        smallFieldHeight,
                        currentlyViewedClass.stats[a].amount);

                currentlyViewedClass.stats[a].bonusPerLevel =
                    DrawHorizontalFloatField("Level Gain", "",
                        smallFieldHeight,
                        currentlyViewedClass.stats[a].bonusPerLevel);

                if (currentlyViewedClass.stats[a].statREF != null)
                {
                    currentlyViewedClass.stats[a].statID = currentlyViewedClass.stats[a].statREF.ID;
                    if (!currentlyViewedClass.stats[a].statREF.isPercentStat)
                    {
                        currentlyViewedClass.stats[a].isPercent =
                            DrawHorizontalToggle("Is Percent?", "",
                                smallFieldHeight,
                                currentlyViewedClass.stats[a].isPercent);
                    }
                    else
                    {
                        currentlyViewedClass.stats[a].isPercent = false;
                    }
                }
                else
                    currentlyViewedClass.stats[a].statID = -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.classModuleSection.showTalentTree =
            HandleModuleBanner("TALENT TREES", editorFilters.classModuleSection.showTalentTree);
        if (editorFilters.classModuleSection.showTalentTree)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Talent Tree", skin.GetStyle("AddButton"),
                GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedClass.talentTrees.Add(new RPGClass.TalentTreesDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("talentTrees");
            currentlyViewedClass.talentTrees = GetTargetObjectOfProperty(ThisList2) as List<RPGClass.TalentTreesDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedClass.talentTrees.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedClass.talentTrees.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedClass.talentTrees[a].talentTreeREF != null)
                    talentTreeName = currentlyViewedClass.talentTrees[a].talentTreeREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedClass.talentTrees[a].talentTreeREF = (RPGTalentTree) EditorGUILayout.ObjectField(
                    "Talent Tree",
                    RPGBuilderUtilities.GetTalentTreeFromIDEditor(currentlyViewedClass.talentTrees[a].talentTreeID,
                        allTalentTrees), typeof(RPGTalentTree), false);

                currentlyViewedClass.talentTrees[a].talentTreeID =
                    currentlyViewedClass.talentTrees[a].talentTreeREF != null
                        ? currentlyViewedClass.talentTrees[a].talentTreeREF.ID
                        : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.classModuleSection.showSpellbook =
            HandleModuleBanner("SPELLBOOK", editorFilters.classModuleSection.showSpellbook);
        if (editorFilters.classModuleSection.showSpellbook)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Spellbook", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedClass.spellbooks.Add(new RPGClass.SpellbookDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList18 = serialObj.FindProperty("spellbooks");
            currentlyViewedClass.spellbooks = GetTargetObjectOfProperty(ThisList18) as List<RPGClass.SpellbookDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedClass.spellbooks.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedClass.spellbooks.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedClass.spellbooks[a].spellbookREF != null)
                    talentTreeName = currentlyViewedClass.spellbooks[a].spellbookREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedClass.spellbooks[a].spellbookREF = (RPGSpellbook) EditorGUILayout.ObjectField(
                    "Spellbook",
                    RPGBuilderUtilities.GetSpellbookFromIDEditor(currentlyViewedClass.spellbooks[a].spellbookID,
                        allSpellbooks), typeof(RPGSpellbook), false);

                currentlyViewedClass.spellbooks[a].spellbookID = currentlyViewedClass.spellbooks[a].spellbookREF != null
                    ? currentlyViewedClass.spellbooks[a].spellbookREF.ID
                    : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.classModuleSection.showActionAbilities =
            HandleModuleBanner("ACTION ABILITIES", editorFilters.classModuleSection.showActionAbilities);
        if (editorFilters.classModuleSection.showActionAbilities)
        {
            DrawActionAbilityList(currentlyViewedClass.actionAbilities);
        }

        GUILayout.Space(10);
        editorFilters.classModuleSection.showStartingItems =
            HandleModuleBanner("STARTING ITEMS", editorFilters.classModuleSection.showStartingItems);
        if (editorFilters.classModuleSection.showStartingItems)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedClass.startItems.Add(new RPGItemDATA.StartingItemsDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList4 = serialObj.FindProperty("startItems");
            currentlyViewedClass.startItems =
                GetTargetObjectOfProperty(ThisList4) as List<RPGItemDATA.StartingItemsDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedClass.startItems.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedClass.startItems.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedClass.startItems[a].itemREF != null)
                    talentTreeName = currentlyViewedClass.startItems[a].itemREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedClass.startItems[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                    RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedClass.startItems[a].itemID, allItems),
                    typeof(RPGItem), false);

                currentlyViewedClass.startItems[a].count =
                    DrawHorizontalIntField("Count", "",
                        smallFieldHeight,
                        currentlyViewedClass.startItems[a].count);

                currentlyViewedClass.startItems[a].equipped =
                    DrawHorizontalToggle("Equipped", "",
                        smallFieldHeight,
                        currentlyViewedClass.startItems[a].equipped);

                currentlyViewedClass.startItems[a].itemID = currentlyViewedClass.startItems[a].itemREF != null
                    ? currentlyViewedClass.startItems[a].itemREF.ID
                    : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.classModuleSection.showStatAllocation =
            HandleModuleBanner("STAT ALLOCATION MENU", editorFilters.classModuleSection.showStatAllocation);
        if (editorFilters.classModuleSection.showStatAllocation)
        {
            GUILayout.Space(10);
            
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedClass.allocationStatPoints =
                DrawHorizontalIntField("Points To Allocate", "",
                    smallFieldHeight,
                    currentlyViewedClass.allocationStatPoints);
            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
            
            currentlyViewedClass.allocatedStatsEntries = DrawStatAllocationList(currentlyViewedClass.allocatedStatsEntries);
        }
        
        GUILayout.Space(10);
        editorFilters.classModuleSection.showStatAllocationGame =
            HandleModuleBanner("STAT ALLOCATION GAME", editorFilters.classModuleSection.showStatAllocationGame);
        if (editorFilters.classModuleSection.showStatAllocationGame)
        {
            currentlyViewedClass.allocatedStatsEntriesGame = DrawStatAllocationList(currentlyViewedClass.allocatedStatsEntriesGame);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawLootTableView()
    {
        if (currentlyViewedLootTable == null)
        {
            if (allLootTables.Count == 0)
            {
                CreateNew(AssetType.LootTable);
                return;
            }

            currentlyViewedLootTable = Instantiate(allLootTables[0]) as RPGLootTable;

        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedLootTable;
        var serialObj = new SerializedObject(scriptableObj);

        GUILayout.Space(buttonHeight + 5);
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(GetScreenHeight() - 60));

        GUILayout.Space(10);
        editorFilters.lootTableModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.lootTableModuleSection.showBaseInfo);
        if (editorFilters.lootTableModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedLootTable.ID);
            currentlyViewedLootTable._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedLootTable._name);
            currentlyViewedLootTable._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_LOOT_TABLE_" + currentlyViewedLootTable._name);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.lootTableModuleSection.showItems =
            HandleModuleBanner("ITEMS", editorFilters.lootTableModuleSection.showItems);
        if (editorFilters.lootTableModuleSection.showItems)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedLootTable.lootItems.Add(new RPGLootTable.LOOT_ITEMS());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("lootItems");
            currentlyViewedLootTable.lootItems = GetTargetObjectOfProperty(ThisList2) as List<RPGLootTable.LOOT_ITEMS>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedLootTable.lootItems.Count; a++)
            {
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedLootTable.lootItems.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedLootTable.lootItems[a].itemREF != null)
                    effectName = currentlyViewedLootTable.lootItems[a].itemREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedLootTable.lootItems[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                    RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedLootTable.lootItems[a].itemID, allItems),
                    typeof(RPGItem), false);

                currentlyViewedLootTable.lootItems[a].itemID = currentlyViewedLootTable.lootItems[a].itemREF != null
                    ? currentlyViewedLootTable.lootItems[a].itemREF.ID
                    : -1;

                currentlyViewedLootTable.lootItems[a].dropRate =
                    DrawHorizontalSlider("Chance", "",
                        smallFieldHeight,
                        currentlyViewedLootTable.lootItems[a].dropRate, 0f, 100f);

                currentlyViewedLootTable.lootItems[a].min = DrawHorizontalIntField("Min.", "",
                    smallFieldHeight,
                    currentlyViewedLootTable.lootItems[a].min);

                currentlyViewedLootTable.lootItems[a].max = DrawHorizontalIntField("Max.", "",
                    smallFieldHeight,
                    currentlyViewedLootTable.lootItems[a].max);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);

            if (currentlyViewedLootTable.lootItems.Count >= 5)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace, false);
                if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedLootTable.lootItems.Add(new RPGLootTable.LOOT_ITEMS());
                }

                EndHorizontalMargin(middleButtonSpace, false);
            }
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawWorldPositionView()
    {
        if (currentlyViewedWorldPosition == null)
        {
            if (allWorldPositions.Count == 0)
            {
                CreateNew(AssetType.WorldPosition);
                return;
            }

            currentlyViewedWorldPosition = Instantiate(allWorldPositions[0]) as RPGWorldPosition;

        }
        
        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.worldPositionModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.worldPositionModuleSection.showBaseInfo);
        if (editorFilters.worldPositionModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedWorldPosition.ID);
            currentlyViewedWorldPosition._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedWorldPosition._name);
            currentlyViewedWorldPosition.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedWorldPosition.displayName);
            currentlyViewedWorldPosition._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_WORLD_POSITION_" + currentlyViewedWorldPosition._name);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.worldPositionModuleSection.showSettings =
            HandleModuleBanner("SETTINGS", editorFilters.worldPositionModuleSection.showSettings);
        if (editorFilters.worldPositionModuleSection.showSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedWorldPosition.position = DrawHorizontalVector3("Position", "", smallFieldHeight,
                currentlyViewedWorldPosition.position);
            
            currentlyViewedWorldPosition.useRotation = DrawHorizontalToggle("Use Rotation?", "", smallFieldHeight,
                currentlyViewedWorldPosition.useRotation);
            if (currentlyViewedWorldPosition.useRotation)
            {
                currentlyViewedWorldPosition.rotation = DrawHorizontalVector3("Rotation", "", smallFieldHeight,
                    currentlyViewedWorldPosition.rotation);
            }

            GameObject sceneREF = null;
            sceneREF = (GameObject) EditorGUILayout.ObjectField("Scene Reference", sceneREF, typeof(GameObject), true);
            if (sceneREF != null)
            {
                currentlyViewedWorldPosition.position = sceneREF.transform.position;
                currentlyViewedWorldPosition.rotation = sceneREF.transform.localEulerAngles;
            }
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawGameSceneView()
    {
        if (currentlyViewedGameScene == null)
        {
            if (allGameScenes.Count == 0)
            {
                CreateNew(AssetType.GameScene);
                return;
            }

            currentlyViewedGameScene = Instantiate(allGameScenes[0]) as RPGGameScene;

        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedGameScene;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.gameSceneModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.gameSceneModuleSection.showBaseInfo);
        if (editorFilters.gameSceneModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedGameScene.ID);
            currentlyViewedGameScene._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedGameScene._name);
            currentlyViewedGameScene.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedGameScene.displayName);
            currentlyViewedGameScene._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_GAME_SCENE_" + currentlyViewedGameScene._name);
            currentlyViewedGameScene.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedGameScene.description);
            currentlyViewedGameScene.isProceduralScene = DrawHorizontalToggle("Procedural?", "", smallFieldHeight,
                currentlyViewedGameScene.isProceduralScene);
            if (currentlyViewedGameScene.isProceduralScene)
            {
                currentlyViewedGameScene.SpawnPointName =
                DrawHorizontalTextField("Spawn Point Name", "", smallFieldHeight, currentlyViewedGameScene.SpawnPointName);
            }
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.gameSceneModuleSection.showSettings =
            HandleModuleBanner("SETTINGS", editorFilters.gameSceneModuleSection.showSettings);
        if (editorFilters.gameSceneModuleSection.showSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedGameScene.mapBounds =
                EditorGUILayout.BoundsField("Map Bounds", currentlyViewedGameScene.mapBounds);
            currentlyViewedGameScene.mapSize =
                EditorGUILayout.Vector2Field("Map Size", currentlyViewedGameScene.mapSize);

            currentlyViewedGameScene.startPositionREF = (RPGWorldPosition) EditorGUILayout.ObjectField("Start Position",
                RPGBuilderUtilities.GetWorldPositionFromIDEditor(currentlyViewedGameScene.startPositionID,
                    allWorldPositions), typeof(RPGWorldPosition), false, GUILayout.Height(15));

            currentlyViewedGameScene.startPositionID = currentlyViewedGameScene.startPositionREF != null
                ? currentlyViewedGameScene.startPositionREF.ID
                : -1;

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.gameSceneModuleSection.showLoadingScreenSettings =
            HandleModuleBanner("LOADING SCREEN SETTINGS",
                editorFilters.gameSceneModuleSection.showLoadingScreenSettings);
        if (editorFilters.gameSceneModuleSection.showLoadingScreenSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            EditorGUILayout.LabelField("Loading Image");
            currentlyViewedGameScene.loadingBG = (Sprite) EditorGUILayout.ObjectField(
                currentlyViewedGameScene.loadingBG, typeof(Sprite), false, GUILayout.Width(250), GUILayout.Height(250));
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.gameSceneModuleSection.showMinimapSettings =
            HandleModuleBanner("MINIMAP SETTINGS", editorFilters.gameSceneModuleSection.showMinimapSettings);
        if (editorFilters.gameSceneModuleSection.showMinimapSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            EditorGUILayout.LabelField("Minimap Image");
            currentlyViewedGameScene.minimapImage = (Sprite) EditorGUILayout.ObjectField(
                currentlyViewedGameScene.minimapImage, typeof(Sprite), false, GUILayout.Width(250),
                GUILayout.Height(250));
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.gameSceneModuleSection.showRegions =
            HandleModuleBanner("REGIONS", editorFilters.gameSceneModuleSection.showRegions);
        if (editorFilters.gameSceneModuleSection.showRegions)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Region", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedGameScene.regions.Add(new RPGGameScene.REGION_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList7 = serialObj.FindProperty("regions");
            currentlyViewedGameScene.regions =
                GetTargetObjectOfProperty(ThisList7) as List<RPGGameScene.REGION_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedGameScene.regions.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedGameScene.regions.RemoveAt(a);
                    return;
                }
                GUILayout.Space(10);
                
                string buttontext = currentlyViewedGameScene.regions[a].showInEditor ? "Hide" : "Show";
                if (GUILayout.Button(buttontext, skin.GetStyle("AddButton"), GUILayout.Width(60), GUILayout.Height(20)))
                {
                    currentlyViewedGameScene.regions[a].showInEditor =
                        !currentlyViewedGameScene.regions[a].showInEditor;
                    return;
                }
                GUILayout.Space(10);

                var effectName = currentlyViewedGameScene.regions[a].regionName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);

                EditorGUILayout.EndHorizontal();

                if (currentlyViewedGameScene.regions[a].showInEditor)
                {
                    GUILayout.Space(10);
                    currentlyViewedGameScene.regions[a].regionName = DrawHorizontalTextField("Name", "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].regionName);

                    currentlyViewedGameScene.regions[a].fogChange = DrawHorizontalToggle("Modify Fog?", "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].fogChange);
                    if (currentlyViewedGameScene.regions[a].fogChange)
                    {
                        currentlyViewedGameScene.regions[a].fogEnabled = DrawHorizontalToggle("Enable Fog?", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].fogEnabled);
                        currentlyViewedGameScene.regions[a].fogColor = DrawHorizontalColorField("Color", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].fogColor);
                        currentlyViewedGameScene.regions[a].fogMode =
                            (FogMode) EditorGUILayout.EnumPopup("Mode", currentlyViewedGameScene.regions[a].fogMode);
                        if (currentlyViewedGameScene.regions[a].fogMode == FogMode.Linear)
                        {
                            currentlyViewedGameScene.regions[a].fogStartDistance = DrawHorizontalFloatField(
                                "Start Distance", "",
                                smallFieldHeight, currentlyViewedGameScene.regions[a].fogStartDistance);
                            currentlyViewedGameScene.regions[a].fogEndDistance = DrawHorizontalFloatField(
                                "End Distance",
                                "",
                                smallFieldHeight, currentlyViewedGameScene.regions[a].fogEndDistance);
                        }
                        else
                        {
                            currentlyViewedGameScene.regions[a].fogDensity = DrawHorizontalFloatField("Density", "",
                                smallFieldHeight, currentlyViewedGameScene.regions[a].fogDensity);
                        }

                        currentlyViewedGameScene.regions[a].fogTransitionSpeed = DrawHorizontalFloatField(
                            "Transition Speed", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].fogTransitionSpeed);
                    }

                    GUILayout.Space(10);

                    currentlyViewedGameScene.regions[a].lightningChange = DrawHorizontalToggle("Modify Lightning?", "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].lightningChange);
                    if (currentlyViewedGameScene.regions[a].lightningChange)
                    {
                        currentlyViewedGameScene.regions[a].lightGameobjectName = DrawHorizontalTextField(
                            "Gameobject Name", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].lightGameobjectName);
                        currentlyViewedGameScene.regions[a].lightEnabled = DrawHorizontalToggle("Enable Light?", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].lightEnabled);
                        currentlyViewedGameScene.regions[a].lightColor = DrawHorizontalColorField("Color", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].lightColor);
                        currentlyViewedGameScene.regions[a].lightIntensity = DrawHorizontalFloatField("Intensity", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].lightIntensity);
                        currentlyViewedGameScene.regions[a].lightTransitionSpeed = DrawHorizontalFloatField(
                            "Transition Speed", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].lightTransitionSpeed);
                    }

                    GUILayout.Space(10);

                    currentlyViewedGameScene.regions[a].skyboxChange = DrawHorizontalToggle("Modify Skybox?", "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].skyboxChange);
                    if (currentlyViewedGameScene.regions[a].skyboxChange)
                    {
                        currentlyViewedGameScene.regions[a].skyboxCubemap = (Texture) EditorGUILayout.ObjectField(
                            "Cubemap Texture",
                            currentlyViewedGameScene.regions[a].skyboxCubemap, typeof(Texture), false,
                            GUILayout.Height(15));
                        currentlyViewedGameScene.regions[a].skyboxTransitionSpeed = DrawHorizontalFloatField(
                            "Blend Speed", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].skyboxTransitionSpeed);
                    }

                    GUILayout.Space(10);

                    currentlyViewedGameScene.regions[a].cameraParticleChange = DrawHorizontalToggle(
                        "Modify Camera Particle?", "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].cameraParticleChange);
                    if (currentlyViewedGameScene.regions[a].cameraParticleChange)
                    {
                        currentlyViewedGameScene.regions[a].cameraParticle = (GameObject) EditorGUILayout.ObjectField(
                            "Particle Prefab",
                            currentlyViewedGameScene.regions[a].cameraParticle, typeof(GameObject), false,
                            GUILayout.Height(15));
                    }

                    GUILayout.Space(10);

                    currentlyViewedGameScene.regions[a].combatModeChange = DrawHorizontalToggle("Modify Combat Mode?",
                        "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].combatModeChange);
                    if (currentlyViewedGameScene.regions[a].combatModeChange)
                    {
                        currentlyViewedGameScene.regions[a].combatEnabled = DrawHorizontalToggle("Enable Combat?", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].combatEnabled);
                    }

                    GUILayout.Space(10);

                    currentlyViewedGameScene.regions[a].combatStateChange = DrawHorizontalToggle("Modify Combat State?",
                        "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].combatStateChange);
                    if (currentlyViewedGameScene.regions[a].combatStateChange)
                    {
                        currentlyViewedGameScene.regions[a].inCombat = DrawHorizontalToggle("Override in Combat?", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].inCombat);
                    }

                    GUILayout.Space(10);

                    currentlyViewedGameScene.regions[a].welcomeText = DrawHorizontalToggle("Display Welcome Text?", "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].welcomeText);
                    if (currentlyViewedGameScene.regions[a].welcomeText)
                    {
                        currentlyViewedGameScene.regions[a].welcomeMessageText = DrawHorizontalTextField("Message", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].welcomeMessageText);
                        currentlyViewedGameScene.regions[a].welcomeMessageDuration = DrawHorizontalFloatField(
                            "Duration", "",
                            smallFieldHeight, currentlyViewedGameScene.regions[a].welcomeMessageDuration);
                    }

                    GUILayout.Space(10);

                    currentlyViewedGameScene.regions[a].musicChange = DrawHorizontalToggle("Modify Music?", "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].musicChange);
                    if (currentlyViewedGameScene.regions[a].musicChange)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Music", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                            GUILayout.ExpandWidth(true)))
                        {
                            currentlyViewedGameScene.regions[a].musicClips.Add(null);
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        GUILayout.Space(10);

                        for (var index = 0; index < currentlyViewedGameScene.regions[a].musicClips.Count; index++)
                        {
                            EditorGUILayout.BeginHorizontal();
                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(15),
                                GUILayout.Height(15)))
                            {
                                currentlyViewedGameScene.regions[a].musicClips.RemoveAt(index);
                                return;
                            }

                            currentlyViewedGameScene.regions[a].musicClips[index] =
                                (AudioClip) EditorGUILayout.ObjectField(
                                    "Audio Clip", currentlyViewedGameScene.regions[a].musicClips[index],
                                    typeof(AudioClip),
                                    false, GUILayout.Height(15));
                            EditorGUILayout.EndHorizontal();
                            GUILayout.Space(5);
                        }
                    }

                    currentlyViewedGameScene.regions[a].gameActions = DrawHorizontalToggle("Trigger Game Actions?", "",
                        smallFieldHeight, currentlyViewedGameScene.regions[a].gameActions);
                    if (currentlyViewedGameScene.regions[a].gameActions)
                    {
                        currentlyViewedGameScene.regions[a].GameActionsList =
                            DrawGameActionList(currentlyViewedGameScene.regions[a].GameActionsList);
                    }

                    GUILayout.Space(10);
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    public List<RequirementsManager.RequirementDATA> DrawRequirementList(
        List<RequirementsManager.RequirementDATA> requirementList)
    {
        StartHorizontalMargin(middleButtonSpace, false);
        if (GUILayout.Button("+ Add Requirement", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
            GUILayout.ExpandWidth(true)))
        {
            requirementList.Add(new RequirementsManager.RequirementDATA());
        }

        EndHorizontalMargin(middleButtonSpace, false);

        StartHorizontalMargin(bigHorizontalSpace, true);
        for (var a = 0; a < requirementList.Count; a++)
        {
            GUILayout.Space(10);
            var requirementNumber = a + 1;
            EditorGUILayout.BeginHorizontal();

            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                GUILayout.Height(20)))
            {
                requirementList.RemoveAt(a);
                return requirementList;
            }

            GUILayout.Space(10);
            EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(115));
            requirementList[a].requirementType =
                (RequirementsManager.RequirementType) EditorGUILayout.EnumPopup(
                    requirementList[a].requirementType);

            EditorGUILayout.EndHorizontal();
            EditorGUILayout.BeginVertical();

            if (requirementList.Count > 0)
            {
                switch (requirementList[a].requirementType)
                {
                    case RequirementsManager.RequirementType.pointSpent:
                        requirementList[a].pointSpentValue = DrawHorizontalIntField(
                            "Points Spent",
                            "How many points should already be spent in this tree for this bonus to be active?",
                            smallFieldHeight,
                            requirementList[a].pointSpentValue);
                        break;
                    case RequirementsManager.RequirementType.classLevel:
                    {
                        requirementList[a].classRequiredREF =
                            (RPGClass) EditorGUILayout.ObjectField(
                                new GUIContent("Class",
                                    "The class required for this bonus to be active"),
                                RPGBuilderUtilities.GetClassFromIDEditor(
                                    requirementList[a].classRequiredID, allClasses),
                                typeof(RPGClass), false);
                        requirementList[a].classLevelValue = DrawHorizontalIntField("Level",
                            "The class level required",
                            smallFieldHeight,
                            requirementList[a].classLevelValue);

                        requirementList[a].classRequiredID =
                            requirementList[a].classRequiredREF != null
                                ? requirementList[a].classRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType._class:
                    {
                        requirementList[a].classRequiredREF =
                            (RPGClass) EditorGUILayout.ObjectField(
                                new GUIContent("Class",
                                    "The class required for this bonus to be active"),
                                RPGBuilderUtilities.GetClassFromIDEditor(
                                    requirementList[a].classRequiredID, allClasses),
                                typeof(RPGClass), false);

                        requirementList[a].classRequiredID =
                            requirementList[a].classRequiredREF != null
                                ? requirementList[a].classRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.skillLevel:
                    {
                        requirementList[a].skillRequiredREF =
                            (RPGSkill) EditorGUILayout.ObjectField(
                                new GUIContent("Skill",
                                    "The skill required for this bonus to be active"),
                                RPGBuilderUtilities.GetSkillFromIDEditor(
                                    requirementList[a].skillRequiredID, allSkills),
                                typeof(RPGSkill), false);
                        requirementList[a].skillLevelValue = DrawHorizontalIntField("Level",
                            "The skill level required",
                            smallFieldHeight,
                            requirementList[a].skillLevelValue);

                        requirementList[a].skillRequiredID =
                            requirementList[a].skillRequiredREF != null
                                ? requirementList[a].skillRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.itemOwned:
                    {
                        requirementList[a].itemRequiredREF =
                            (RPGItem) EditorGUILayout.ObjectField(
                                new GUIContent("Item", "The item required"),
                                RPGBuilderUtilities.GetItemFromIDEditor(
                                    requirementList[a].itemRequiredID, allItems),
                                typeof(RPGItem), false);
                        requirementList[a].consumeItem = DrawHorizontalToggle("Consumed?",
                            "Is this item consumed?",
                            smallFieldHeight,
                            requirementList[a].consumeItem);

                        requirementList[a].itemRequiredID =
                            requirementList[a].itemRequiredREF != null
                                ? requirementList[a].itemRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.abilityKnown:
                    {
                        requirementList[a].abilityRequiredREF =
                            (RPGAbility) EditorGUILayout.ObjectField(
                                new GUIContent("Ability",
                                    "The ability required to be known for this bonus to be active"),
                                RPGBuilderUtilities.GetAbilityFromIDEditor(
                                    requirementList[a].abilityRequiredID,
                                    allAbilities), typeof(RPGAbility), false);

                        requirementList[a].abilityRequiredID =
                            requirementList[a].abilityRequiredREF != null
                                ? requirementList[a].abilityRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.recipeKnown:
                    {
                        requirementList[a].recipeRequiredREF =
                            (RPGCraftingRecipe) EditorGUILayout.ObjectField(
                                new GUIContent("Recipe",
                                    "The crafting recipe required to be known for this bonus to be active"),
                                RPGBuilderUtilities.GetCraftingRecipeFromIDEditor(
                                    requirementList[a].craftingRecipeRequiredID,
                                    allCraftingRecipes), typeof(RPGCraftingRecipe), false);

                        requirementList[a].craftingRecipeRequiredID =
                            requirementList[a].recipeRequiredREF != null
                                ? requirementList[a].recipeRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.resourceNodeKnown:
                    {
                        requirementList[a].resourceNodeRequiredREF =
                            (RPGResourceNode) EditorGUILayout.ObjectField(
                                new GUIContent("Resource Node",
                                    "The resource node required to be known for this bonus to be active"),
                                RPGBuilderUtilities.GetResourceNodeFromIDEditor(
                                    requirementList[a].resourceNodeRequiredID,
                                    allResourceNodes), typeof(RPGResourceNode), false);

                        requirementList[a].resourceNodeRequiredID =
                            requirementList[a].resourceNodeRequiredREF != null
                                ? requirementList[a].resourceNodeRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.race:
                    {
                        requirementList[a].raceRequiredREF =
                            (RPGRace) EditorGUILayout.ObjectField(
                                new GUIContent("Race", "The race required"),
                                RPGBuilderUtilities.GetRaceFromIDEditor(
                                    requirementList[a].raceRequiredID, allRaces),
                                typeof(RPGRace), false);

                        requirementList[a].raceRequiredID =
                            requirementList[a].raceRequiredREF != null
                                ? requirementList[a].raceRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.questState:
                    {
                        requirementList[a].questRequiredREF =
                            (RPGQuest) EditorGUILayout.ObjectField(
                                new GUIContent("Quest",
                                    "The quest required for this bonus to be active"),
                                RPGBuilderUtilities.GetQuestFromIDEditor(
                                    requirementList[a].questRequiredID, allQuests),
                                typeof(RPGQuest), false);

                        requirementList[a].questStateRequired =
                            (QuestManager.questState) EditorGUILayout.EnumPopup(
                                new GUIContent("State", "The required state of the quest"),
                                requirementList[a].questStateRequired);

                        requirementList[a].questRequiredID =
                            requirementList[a].questRequiredREF != null
                                ? requirementList[a].questRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.npcKilled:
                    {
                        requirementList[a].npcRequiredREF =
                            (RPGNpc) EditorGUILayout.ObjectField(
                                new GUIContent("NPC", "The NPC required to be killed"),
                                RPGBuilderUtilities.GetNPCFromIDEditor(
                                    requirementList[a].npcRequiredID, allNPCs),
                                typeof(RPGNpc), false);

                        requirementList[a].npcKillsRequired = DrawHorizontalIntField("Kills",
                            "How many times this NPC should have been killed for the bonus to be active",
                            smallFieldHeight,
                            requirementList[a].npcKillsRequired);

                        requirementList[a].npcRequiredID =
                            requirementList[a].npcRequiredREF != null
                                ? requirementList[a].npcRequiredREF.ID
                                : -1;
                        break;
                    }
                    case RequirementsManager.RequirementType.weaponTemplateLevel:
                    {
                        requirementList[a].weaponTemplateRequiredREF =
                            (RPGWeaponTemplate) EditorGUILayout.ObjectField(
                                new GUIContent("Weapon Template",
                                    "The weapon template level required to be used"),
                                RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(
                                    requirementList[a].weaponTemplateRequiredID,
                                    allWeaponTemplates), typeof(RPGWeaponTemplate), false);

                        requirementList[a].weaponTemplateLevelValue = DrawHorizontalIntField(
                            "Level", "Level required",
                            smallFieldHeight,
                            requirementList[a].weaponTemplateLevelValue);

                        requirementList[a].weaponTemplateRequiredID =
                            requirementList[a].weaponTemplateRequiredREF != null
                                ? requirementList[a].weaponTemplateRequiredREF
                                    .ID
                                : -1;
                        break;
                    }
                }
            }

            EditorGUILayout.EndVertical();
        }

        EndHorizontalMargin(bigHorizontalSpace, true);

        return requirementList;
    }

    private List<RPGBGameActions> DrawGameActionList(List<RPGBGameActions> GameActionsList)
    {
        GUILayout.Space(10);
            GUILayout.Label("Game Actions", skin.GetStyle("ViewTitle"), GUILayout.Width(325), GUILayout.Height(40));

            if (GUILayout.Button("+ Add Game Action", skin.GetStyle("AddButton"), GUILayout.Width(325),
                GUILayout.Height(25)))
                GameActionsList.Add(new RPGBGameActions());

            for (var a = 0; a < GameActionsList.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    GameActionsList.RemoveAt(a);
                    return GameActionsList;
                }

                var effectName = GameActionsList[a].actionType.ToString();
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName,GUILayout.Width(300));
                EditorGUILayout.EndHorizontal();

                GameActionsList[a].actionType = (ActionType) EditorGUILayout.EnumPopup("Type",
                    GameActionsList[a].actionType, GUILayout.Width(300));

                switch (GameActionsList[a].actionType)
                {
                    case ActionType.UseAbility:
                    case ActionType.LearnAbility:
                        GameActionsList[a].abilityREF = (RPGAbility) EditorGUILayout.ObjectField(
                            "Ability", GameActionsList[a].abilityREF,
                            typeof(RPGAbility), false, GUILayout.Width(300));
                        if (GameActionsList[a].abilityREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].abilityREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        break;
                    case ActionType.ApplyEffect:
                        GameActionsList[a].effectREF = (RPGEffect) EditorGUILayout.ObjectField(
                            "Effect", GameActionsList[a].effectREF,
                            typeof(RPGEffect), false, GUILayout.Width(300));
                        if (GameActionsList[a].effectREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].effectREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        int effectRankField = GameActionsList[a].effectRank + 1;
                        if (effectRankField == 0) effectRankField = 1;

                        if (GameActionsList[a].effectREF != null)
                        {
                            if (effectRankField > GameActionsList[a].effectREF.ranks.Count)
                            {
                                effectRankField = GameActionsList[a].effectREF.ranks.Count;
                            }
                        }

                        effectRankField = EditorGUILayout.IntField("Effect Rank",
                            effectRankField, GUILayout.Width(300));
                        GameActionsList[a].effectRank = effectRankField - 1;

                        GameActionsList[a].target =
                            (RPGCombatDATA.TARGET_TYPE) EditorGUILayout.EnumPopup("Apply On",
                                GameActionsList[a].target,
                                GUILayout.Width(300));
                        break;
                    case ActionType.GainItem:
                    case ActionType.RemoveItem:
                        GameActionsList[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                            GameActionsList[a].itemREF,
                            typeof(RPGItem), false, GUILayout.Width(300));
                        if (GameActionsList[a].itemREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].itemREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        GameActionsList[a].count = EditorGUILayout.IntField("Count",
                            GameActionsList[a].count, GUILayout.Width(300));
                        break;
                    case ActionType.LearnRecipe:
                        GameActionsList[a].craftingRecipeREF =
                            (RPGCraftingRecipe) EditorGUILayout.ObjectField("Recipe",
                                GameActionsList[a].craftingRecipeREF,
                                typeof(RPGCraftingRecipe), false, GUILayout.Width(300));
                        if (GameActionsList[a].craftingRecipeREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].craftingRecipeREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        break;
                    case ActionType.LearnResourceNode:
                        GameActionsList[a].resourceNodeREF =
                            (RPGResourceNode) EditorGUILayout.ObjectField("Resource Node",
                                GameActionsList[a].resourceNodeREF,
                                typeof(RPGResourceNode), false, GUILayout.Width(300));
                        if (GameActionsList[a].resourceNodeREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].resourceNodeREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        break;
                    case ActionType.LearnBonus:
                        GameActionsList[a].bonusREF = (RPGBonus) EditorGUILayout.ObjectField(
                            "Bonus", GameActionsList[a].bonusREF,
                            typeof(RPGBonus), false, GUILayout.Width(300));
                        if (GameActionsList[a].bonusREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].bonusREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        break;
                    case ActionType.LearnSkill:
                        GameActionsList[a].skillREF = (RPGSkill) EditorGUILayout.ObjectField(
                            "Skill", GameActionsList[a].skillREF,
                            typeof(RPGSkill), false, GUILayout.Width(300));
                        if (GameActionsList[a].skillREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].skillREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        break;
                    case ActionType.LearnTalentTree:
                        GameActionsList[a].talentTreeREF =
                            (RPGTalentTree) EditorGUILayout.ObjectField("Talent Tree",
                                GameActionsList[a].talentTreeREF,
                                typeof(RPGTalentTree), false, GUILayout.Width(300));
                        if (GameActionsList[a].talentTreeREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].talentTreeREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        break;
                    case ActionType.GainTreePoint:
                    case ActionType.LoseTreePoint:
                        GameActionsList[a].treePointREF =
                            (RPGTreePoint) EditorGUILayout.ObjectField("Tree Point",
                                GameActionsList[a].treePointREF,
                                typeof(RPGTreePoint), false, GUILayout.Width(300));
                        if (GameActionsList[a].treePointREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].treePointREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        GameActionsList[a].count = EditorGUILayout.IntField("Amount",
                            GameActionsList[a].count, GUILayout.Width(300));
                        break;
                    case ActionType.GainEXP:
                        GameActionsList[a].count = EditorGUILayout.IntField("Amount",
                            GameActionsList[a].count, GUILayout.Width(300));
                        break;
                    case ActionType.GainSkillLevel:
                    case ActionType.GainSkillEXP:
                        GameActionsList[a].skillREF = (RPGSkill) EditorGUILayout.ObjectField(
                            "Skill", GameActionsList[a].skillREF,
                            typeof(RPGSkill), false, GUILayout.Width(300));
                        if (GameActionsList[a].skillREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].skillREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        GameActionsList[a].count = EditorGUILayout.IntField("Amount",
                            GameActionsList[a].count, GUILayout.Width(300));
                        break;
                    case ActionType.GainWeaponTemplateEXP:
                        GameActionsList[a].weaponTemplateREF =
                            (RPGWeaponTemplate) EditorGUILayout.ObjectField("Weapon Template",
                                GameActionsList[a].weaponTemplateREF,
                                typeof(RPGWeaponTemplate), false, GUILayout.Width(300));
                        if (GameActionsList[a].weaponTemplateREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].weaponTemplateREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        GameActionsList[a].count = EditorGUILayout.IntField("Amount",
                            GameActionsList[a].count, GUILayout.Width(300));
                        break;
                    case ActionType.GainLevel:
                        GameActionsList[a].count = EditorGUILayout.IntField("Amount",
                            GameActionsList[a].count, GUILayout.Width(300));
                        break;
                    case ActionType.ProposeQuest:
                        GameActionsList[a].questREF = (RPGQuest) EditorGUILayout.ObjectField(
                            "Quest", GameActionsList[a].questREF,
                            typeof(RPGQuest), false, GUILayout.Width(300));
                        if (GameActionsList[a].questREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].questREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        break;
                    case ActionType.GainCurrency:
                    case ActionType.LoseCurrency:
                        GameActionsList[a].currencyREF = (RPGCurrency) EditorGUILayout.ObjectField(
                            "Currency", GameActionsList[a].currencyREF,
                            typeof(RPGCurrency), false, GUILayout.Width(300));
                        if (GameActionsList[a].currencyREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].currencyREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        GameActionsList[a].count = EditorGUILayout.IntField("Amount",
                            GameActionsList[a].count, GUILayout.Width(300));
                        break;
                    case ActionType.SpawnGameObject:
                        GameActionsList[a].prefab = (GameObject) EditorGUILayout.ObjectField(
                            "Game Object Prefab", GameActionsList[a].prefab,
                            typeof(GameObject), false, GUILayout.Width(300));
                        GameActionsList[a].spawnPosition = EditorGUILayout.Vector3Field("Position",
                            GameActionsList[a].spawnPosition, GUILayout.Width(300));
                        break;
                    case ActionType.DestroyGameObject:
                        GameActionsList[a].GameObjectName = EditorGUILayout.TextField(
                            "Game Object Name",
                            GameActionsList[a].GameObjectName, GUILayout.Width(300));
                        break;
                    case ActionType.ToggleWorldNode:
                        GameActionsList[a].GameObjectName = EditorGUILayout.TextField(
                            "World Node Name",
                            GameActionsList[a].GameObjectName, GUILayout.Width(300));
                        break;
                    case ActionType.PlayAnimation:
                        GameActionsList[a].animationName = EditorGUILayout.TextField(
                            "Animation Parameter Name",
                            GameActionsList[a].animationName, GUILayout.Width(300));
                        break;
                    case ActionType.ActivateGameObject:
                        GameActionsList[a].GameObjectName = EditorGUILayout.TextField(
                            "Game Object Name",
                            GameActionsList[a].GameObjectName, GUILayout.Width(300));
                        break;
                    case ActionType.DeactiveGameObject:
                        GameActionsList[a].GameObjectName = EditorGUILayout.TextField(
                            "Game Object Name",
                            GameActionsList[a].GameObjectName, GUILayout.Width(300));
                        break;
                    case ActionType.GainFactionpoints:
                    case ActionType.LoseFactionPoints:
                        GameActionsList[a].factionREF = (RPGFaction) EditorGUILayout.ObjectField(
                            "Faction", GameActionsList[a].factionREF,
                            typeof(RPGFaction), false, GUILayout.Width(300));
                        if (GameActionsList[a].factionREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].factionREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }

                        GameActionsList[a].count = EditorGUILayout.IntField("Amount",
                            GameActionsList[a].count, GUILayout.Width(300));
                        break;
                    case ActionType.PlaySound:
                        GameActionsList[a].audioClip = (AudioClip) EditorGUILayout.ObjectField(
                            "Audio Clip", GameActionsList[a].audioClip,
                            typeof(AudioClip), false, GUILayout.Width(300));
                        break;
                    case ActionType.Teleport:
                        GameActionsList[a].teleportType =
                                        (TELEPORT_TYPE) EditorGUILayout.EnumPopup(
                                            new GUIContent("Type", "What type of teleport is it?"),
                                            GameActionsList[a].teleportType);
                        switch (GameActionsList[a].teleportType)
                        {
                            case TELEPORT_TYPE.gameScene:
                            {
                                GameActionsList[a].gameSceneREF =
                                    (RPGGameScene) EditorGUILayout.ObjectField(
                                        new GUIContent("Game Scene", "The game scene to teleport to"),
                                        GameActionsList[a].gameSceneREF, typeof(RPGGameScene), false);
                                if (GameActionsList[a].gameSceneREF != null)
                                    GameActionsList[a].assetID =
                                        GameActionsList[a].gameSceneREF.ID;
                                else
                                    GameActionsList[a].assetID = -1;
                                GameActionsList[a].spawnPosition = EditorGUILayout.Vector3Field(
                                    new GUIContent("Location", "Position coordinates to teleport to"),
                                    GameActionsList[a].spawnPosition);
                                break;
                            }
                            case TELEPORT_TYPE.position:
                                GameActionsList[a].spawnPosition = EditorGUILayout.Vector3Field(
                                    new GUIContent("Location", "Position coordinates to teleport to"),
                                    GameActionsList[a].spawnPosition);
                                break;
                        }

                        break;
                    case ActionType.SaveCharacterData:
                        break;
                    case ActionType.RemoveEffect:
                        GameActionsList[a].effectREF = (RPGEffect) EditorGUILayout.ObjectField(
                            "Effect", GameActionsList[a].effectREF,
                            typeof(RPGEffect), false, GUILayout.Width(300));
                        if (GameActionsList[a].effectREF != null)
                        {
                            GameActionsList[a].assetID =
                                GameActionsList[a].effectREF.ID;
                        }
                        else
                        {
                            GameActionsList[a].assetID = -1;
                        }
                        break;
                    
                    case ActionType.CompleteDialogueLine:
                        
                        
                        break;
                }

                GameActionsList[a].chance =
                    EditorGUILayout.Slider("Chance", GameActionsList[a].chance,
                        0f, 100f, GUILayout.Width(300));

                GUILayout.Space(10);
            }

            return GameActionsList;
    }
    

    private void DrawDialogueView()
    {
        if (currentlyViewedDialogue == null)
        {
            if (allDialogues.Count == 0)
            {
                CreateNew(AssetType.Dialogue);
                return;
            }

            currentlyViewedDialogue = Instantiate(allDialogues[0]) as RPGDialogue;

        }
        
        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.dialogueModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.dialogueModuleSection.showBaseInfo);
        if (editorFilters.dialogueModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedDialogue.ID);
            currentlyViewedDialogue._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedDialogue._name);
            currentlyViewedDialogue.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedDialogue.displayName);
            currentlyViewedDialogue._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_DIALOGUE_" + currentlyViewedDialogue._name);
            currentlyViewedDialogue.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedDialogue.description);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.dialogueModuleSection.showGraphSettings =
            HandleModuleBanner("GRAPH", editorFilters.dialogueModuleSection.showGraphSettings);
        if (editorFilters.dialogueModuleSection.showGraphSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedDialogue.dialogueGraph = (RPGDialogueGraph) EditorGUILayout.ObjectField("Dialogue Graph",
                currentlyViewedDialogue.dialogueGraph, typeof(RPGDialogueGraph), false, GUILayout.Height(15));

            if (currentlyViewedDialogue.dialogueGraph == null)
            {
                GUILayout.Space(5);
                if (GUILayout.Button("Create Graph and Assign", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    if (string.IsNullOrEmpty(currentlyViewedDialogue._name))
                    {
                        EditorUtility.DisplayDialog("Warning", "The name cannot be empty", "OK");
                        return;
                    }
                    var existingGraph = (RPGDialogueGraph) AssetDatabase.LoadAssetAtPath(
                        editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "DialoguesExternalData/" +
                        currentlyViewedDialogue._fileName + "_GRAPH" + ".asset",
                        typeof(RPGDialogueGraph));
                    if (existingGraph != null)
                    {
                        EditorUtility.DisplayDialog("Graph",
                            "This Dialogue already has a graph created. It was assigned instead of creating a new one",
                            "Ok");

                        currentlyViewedDialogue.dialogueGraph = existingGraph;
                    }
                    else
                    {
                        RPGDialogueGraph newDialogueGraph = CreateInstance<RPGDialogueGraph>();
                        AssetDatabase.CreateAsset(newDialogueGraph,
                            editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "DialoguesExternalData/" +
                            currentlyViewedDialogue._fileName + "_GRAPH" + ".asset");

                        AssetDatabase.SaveAssets();
                        AssetDatabase.Refresh();

                        var createdGraph = (RPGDialogueGraph) AssetDatabase.LoadAssetAtPath(
                            editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "DialoguesExternalData/" +
                            currentlyViewedDialogue._fileName + "_GRAPH" + ".asset",
                            typeof(RPGDialogueGraph));

                        EditorUtility.SetDirty(newDialogueGraph);
                        EditorUtility.SetDirty(createdGraph);
                        AssetDatabase.SaveAssets();
                        AssetDatabase.Refresh();

                        currentlyViewedDialogue.dialogueGraph = createdGraph;
                    }
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.dialogueModuleSection.showSettings =
            HandleModuleBanner("SETTINGS", editorFilters.dialogueModuleSection.showSettings);
        if (editorFilters.dialogueModuleSection.showSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedDialogue.hasExitNode = DrawHorizontalToggle("Exit Node?", "", smallFieldHeight,
                currentlyViewedDialogue.hasExitNode);

            if (currentlyViewedDialogue.hasExitNode)
            {
                currentlyViewedDialogue.exitNodeText = DrawHorizontalTextField("Exit Node Message", "",
                    smallFieldHeight, currentlyViewedDialogue.exitNodeText);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawGameModifierView()
    {
        if (currentlyViewedGameModifier == null)
        {
            if (allGameModifiers.Count == 0)
            {
                CreateNew(AssetType.GameModifier);
                return;
            }

            currentlyViewedGameModifier = Instantiate(allGameModifiers[0]) as RPGGameModifier;

        }

        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedGameModifier;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth),
            GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.gameModifierModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.gameModifierModuleSection.showBaseInfo);
        if (editorFilters.gameModifierModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedGameModifier.icon = DrawIconField(currentlyViewedGameModifier.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedGameModifier.ID);
            currentlyViewedGameModifier._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedGameModifier._name);
            currentlyViewedGameModifier.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedGameModifier.displayName);
            currentlyViewedGameModifier._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_GAME_MODIFIER_" + currentlyViewedGameModifier._name);
            currentlyViewedGameModifier.description = DrawHorizontalDescriptionField("Description", "",
                smallFieldHeight,
                currentlyViewedGameModifier.description);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
            GUILayout.Space(10);
        }

        GUILayout.Space(10);
        editorFilters.gameModifierModuleSection.showSettings =
            HandleModuleBanner("SETTINGS", editorFilters.gameModifierModuleSection.showSettings);
        if (editorFilters.gameModifierModuleSection.showSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedGameModifier.unlockType =
                (RPGGameModifier.GameModifierUnlockType) EditorGUILayout.EnumPopup("Available in",
                    currentlyViewedGameModifier.unlockType);
            if (currentlyViewedGameModifier.unlockType != RPGGameModifier.GameModifierUnlockType.World)
            {
                currentlyViewedGameModifier.gameModifierType =
                    (RPGGameModifier.GameModifierType) EditorGUILayout.EnumPopup("Type",
                        currentlyViewedGameModifier.gameModifierType);
                if (currentlyViewedGameModifier.gameModifierType == RPGGameModifier.GameModifierType.Positive)
                {
                    currentlyViewedGameModifier.cost =
                        DrawHorizontalIntField("Cost", "", smallFieldHeight, currentlyViewedGameModifier.cost);
                }
                else
                {
                    currentlyViewedGameModifier.gain =
                        DrawHorizontalIntField("Gain", "", smallFieldHeight, currentlyViewedGameModifier.gain);
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.gameModifierModuleSection.showModifiers =
            HandleModuleBanner("MODIFIERS", editorFilters.gameModifierModuleSection.showModifiers);
        if (editorFilters.gameModifierModuleSection.showModifiers)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Modifier", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedGameModifier.gameModifiersList.Add(new RPGGameModifier.GameModifierDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            GUILayout.Space(10);

            var ThisList2 = serialObj.FindProperty("gameModifiersList");
            currentlyViewedGameModifier.gameModifiersList =
                GetTargetObjectOfProperty(ThisList2) as List<RPGGameModifier.GameModifierDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedGameModifier.gameModifiersList.Count; a++)
            {
                StartHorizontalMargin(bigHorizontalSpace, false);
                var rankNbr = a + 1;

                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(30), GUILayout.Height(30)))
                {
                    currentlyViewedGameModifier.gameModifiersList.RemoveAt(a);
                    return;
                }

                GUILayout.Space(8);

                if (GUILayout.Button("Modifier: " + rankNbr, skin.GetStyle("AbilityRankButton"),
                    GUILayout.ExpandWidth(true), GUILayout.Height(30)))
                {
                    currentlyViewedGameModifier.gameModifiersList[a].showModifier =
                        !currentlyViewedGameModifier.gameModifiersList[a].showModifier;
                    GUI.FocusControl(null);
                }

                EndHorizontalMargin(bigHorizontalSpace, false);

                if (currentlyViewedGameModifier.gameModifiersList[a].showModifier)
                {
                    StartHorizontalMargin(bigHorizontalSpace, true);
                    GUILayout.Space(10);
                    var requirementNumber = a + 1;
                    var effectName = currentlyViewedGameModifier.gameModifiersList[a].categoryType;
                    EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);

                    currentlyViewedGameModifier.gameModifiersList[a].categoryType =
                        (RPGGameModifier.CategoryType) EditorGUILayout.EnumPopup("Category",
                            currentlyViewedGameModifier.gameModifiersList[a].categoryType);
                    switch (currentlyViewedGameModifier.gameModifiersList[a].categoryType)
                    {
                        case RPGGameModifier.CategoryType.Combat:
                            currentlyViewedGameModifier.gameModifiersList[a].combatModuleType =
                                (RPGGameModifier.CombatModuleType) EditorGUILayout.EnumPopup("Module",
                                    currentlyViewedGameModifier.gameModifiersList[a].combatModuleType);

                            if (currentlyViewedGameModifier.gameModifiersList[a].combatModuleType !=
                                RPGGameModifier.CombatModuleType.Stat)
                            {
                                currentlyViewedGameModifier.gameModifiersList[a].isGlobal = DrawHorizontalToggle(
                                    "Is Global?",
                                    "Is this game modifier affecting all entries of this type?", 20,
                                    currentlyViewedGameModifier.gameModifiersList[a].isGlobal);
                                if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal)
                                {
                                    currentlyViewedGameModifier.gameModifiersList[a].showEntryList =
                                        DrawHorizontalToggle(
                                            "Show " +
                                            currentlyViewedGameModifier.gameModifiersList[a].combatModuleType +
                                            " List",
                                            "", 20,
                                            currentlyViewedGameModifier.gameModifiersList[a].showEntryList);
                                }

                                if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal &&
                                    currentlyViewedGameModifier.gameModifiersList[a].showEntryList)
                                {
                                    DrawGameModifierIDsAndList(
                                        currentlyViewedGameModifier.gameModifiersList[a].entryIDs,
                                        currentlyViewedGameModifier.gameModifiersList[a].combatModuleType.ToString());
                                    GUILayout.Space(10);
                                }
                            }


                            switch (currentlyViewedGameModifier.gameModifiersList[a].combatModuleType)
                            {
                                case RPGGameModifier.CombatModuleType.Ability:
                                    currentlyViewedGameModifier.gameModifiersList[a].abilityModifierType =
                                        (RPGGameModifier.AbilityModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].abilityModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].abilityModifierType)
                                    {
                                        case RPGGameModifier.AbilityModifierType.Unlock_Cost:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false,
                                                currentlyViewedGameModifier.gameModifiersList[a].combatModuleType
                                                    .ToString(),
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.AbilityModifierType.No_Use_Requirement:
                                        case RPGGameModifier.AbilityModifierType.No_Effect_Requirement:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].combatModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].abilityModifierType;

                                    break;
                                case RPGGameModifier.CombatModuleType.Effect:
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName = "";
                                    break;
                                case RPGGameModifier.CombatModuleType.NPC:
                                    currentlyViewedGameModifier.gameModifiersList[a].npcModifierType =
                                        (RPGGameModifier.NPCModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].npcModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].npcModifierType)
                                    {
                                        case RPGGameModifier.NPCModifierType.Exp:
                                        case RPGGameModifier.NPCModifierType.Aggro_Range:
                                        case RPGGameModifier.NPCModifierType.Faction_Reward:
                                        case RPGGameModifier.NPCModifierType.Level:
                                        case RPGGameModifier.NPCModifierType.Respawn_Time:
                                        case RPGGameModifier.NPCModifierType.Roam_Range:
                                        case RPGGameModifier.NPCModifierType.Loot_Table_Chance:
                                        case RPGGameModifier.NPCModifierType.Reset_Target_Distance:
                                            DrawGameModifierModuleValue(
                                                currentlyViewedGameModifier.gameModifiersList[a].amountModifier, false,
                                                false,
                                                currentlyViewedGameModifier.gameModifiersList[a].combatModuleType
                                                    .ToString(),
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.NPCModifierType.Faction:
                                            DrawGameModifierModuleValue(
                                                currentlyViewedGameModifier.gameModifiersList[a].amountModifier, true,
                                                false,
                                                "Faction", false, false, false);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].combatModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].npcModifierType;

                                    break;
                                case RPGGameModifier.CombatModuleType.Stat:
                                    currentlyViewedGameModifier.gameModifiersList[a].statModifierType =
                                        (RPGGameModifier.StatModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].statModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].statModifierType)
                                    {
                                        case RPGGameModifier.StatModifierType.Settings:
                                            GUILayout.Space(10);
                                            StartHorizontalMargin(35, false);
                                            if (GUILayout.Button("+ Add", skin.GetStyle("AddButton"),
                                                GUILayout.MinWidth(150), GUILayout.ExpandWidth(true)))
                                            {
                                                currentlyViewedGameModifier.gameModifiersList[a].statModifierData
                                                    .Add(new RPGGameModifier.StatDataModifier());
                                            }

                                            EndHorizontalMargin(35, false);
                                            GUILayout.Space(10);

                                            foreach (var stat in currentlyViewedGameModifier.gameModifiersList[a]
                                                .statModifierData)
                                            {
                                                EditorGUILayout.BeginHorizontal();
                                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"),
                                                    GUILayout.Width(20), GUILayout.Height(20)))
                                                {
                                                    currentlyViewedGameModifier.gameModifiersList[a]
                                                        .statModifierData.Remove(stat);
                                                    return;
                                                }

                                                RPGStat entryRef = stat.statID != -1
                                                    ? RPGBuilderUtilities.GetStatFromIDEditor(stat.statID, allStats)
                                                    : null;
                                                RPGStat tempRef = (RPGStat) EditorGUILayout.ObjectField(entryRef,
                                                    typeof(RPGStat), false, GUILayout.Height(20));
                                                stat.statID = tempRef != null ? tempRef.ID : -1;
                                                EditorGUILayout.EndHorizontal();
                                                GUILayout.Space(5);

                                                stat.dataModifierType =
                                                    (RPGGameModifier.DataModifierType) EditorGUILayout.EnumPopup(
                                                        "Modifier Type", stat.dataModifierType);
                                                stat.unitType =
                                                    (RPGGameModifier.UnitType) EditorGUILayout.EnumPopup(
                                                        "Unit Type", stat.unitType);

                                                if (stat.unitType == RPGGameModifier.UnitType.All ||
                                                    stat.unitType == RPGGameModifier.UnitType.NPC)
                                                {
                                                    currentlyViewedGameModifier.gameModifiersList[a].isGlobal = DrawHorizontalToggle(
                                                        "Is Global?",
                                                        "Is this game modifier affecting all entries of this type?", 20,
                                                        currentlyViewedGameModifier.gameModifiersList[a].isGlobal);
                                                    if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal)
                                                    {
                                                        currentlyViewedGameModifier.gameModifiersList[a].showEntryList =
                                                            DrawHorizontalToggle(
                                                                "Show NPC List",
                                                                "", 20,
                                                                currentlyViewedGameModifier.gameModifiersList[a].showEntryList);
                                                    }

                                                    if (currentlyViewedGameModifier.gameModifiersList[a].showEntryList)
                                                    {
                                                        DrawGameModifierIDsAndList(currentlyViewedGameModifier.gameModifiersList[a].entryIDs, "NPC");
                                                    }
                                                    
                                                }
                                                
                                                stat.checkMin = DrawHorizontalToggle("Check. Min", "", smallFieldHeight,
                                                    stat.checkMin);
                                                if (stat.checkMin)
                                                {
                                                    stat.valueMin = DrawHorizontalFloatField("Value. Min", "",
                                                        smallFieldHeight,
                                                        stat.valueMin);
                                                }

                                                stat.checkMax = DrawHorizontalToggle("Check. Max", "", smallFieldHeight,
                                                    stat.checkMax);
                                                if (stat.checkMax)
                                                {
                                                    stat.valueMax = DrawHorizontalFloatField("Value. Max", "",
                                                        smallFieldHeight,
                                                        stat.valueMax);
                                                }

                                                stat.valueDefault = DrawHorizontalFloatField("Default Value", "",
                                                    smallFieldHeight,
                                                    stat.valueDefault);

                                                if (tempRef != null && tempRef.isVitalityStat)
                                                {
                                                    stat.restShifting =
                                                        DrawHorizontalToggle("Rest Shifting?",
                                                            "Is this stat shifting while outside of combat?",
                                                            smallFieldHeight,
                                                            stat.restShifting);
                                                    if (stat.restShifting)
                                                    {
                                                        stat.restShiftAmount =
                                                            DrawHorizontalFloatField("Amount",
                                                                "The amount that will be shifted",
                                                                smallFieldHeight,
                                                                stat.restShiftAmount);
                                                        stat.restShiftInterval =
                                                            DrawHorizontalFloatField("Interval",
                                                                "The duration between each shift",
                                                                smallFieldHeight,
                                                                stat.restShiftInterval);
                                                    }

                                                    stat.CombatShifting =
                                                        DrawHorizontalToggle("Combat Shifting?",
                                                            "Is this stat shifting while in combat?",
                                                            smallFieldHeight,
                                                            stat.CombatShifting);
                                                    if (stat.CombatShifting)
                                                    {
                                                        stat.combatShiftAmount =
                                                            DrawHorizontalFloatField("Amount",
                                                                "The amount that will be shifted",
                                                                smallFieldHeight,
                                                                stat.combatShiftAmount);
                                                        stat.combatShiftInterval =
                                                            DrawHorizontalFloatField("Interval",
                                                                "The duration between each shift",
                                                                smallFieldHeight,
                                                                stat.combatShiftInterval);
                                                    }
                                                }

                                                GUILayout.Space(15);
                                            }

                                            break;
                                        case RPGGameModifier.StatModifierType.MinOverride:
                                        case RPGGameModifier.StatModifierType.MaxOverride:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Stat",
                                                false, true, false);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].combatModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].statModifierType;

                                    break;
                                case RPGGameModifier.CombatModuleType.TreePoint:
                                    currentlyViewedGameModifier.gameModifiersList[a].treePointModifierType =
                                        (RPGGameModifier.PointModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].treePointModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].treePointModifierType)
                                    {
                                        case RPGGameModifier.PointModifierType.Max:
                                        case RPGGameModifier.PointModifierType.Gain_Value:
                                        case RPGGameModifier.PointModifierType.Start_At:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false,
                                                currentlyViewedGameModifier.gameModifiersList[a].combatModuleType
                                                    .ToString(),
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].combatModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].treePointModifierType;

                                    break;
                                case RPGGameModifier.CombatModuleType.Spellbook:
                                    currentlyViewedGameModifier.gameModifiersList[a].spellbookModifierType =
                                        (RPGGameModifier.SpellbookModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].spellbookModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].spellbookModifierType)
                                    {
                                        case RPGGameModifier.SpellbookModifierType.Ability_Level_Required:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Ability",
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.SpellbookModifierType.Bonus_Level_Required:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Bonus",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].combatModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].spellbookModifierType;

                                    break;
                                case RPGGameModifier.CombatModuleType.Faction:
                                    currentlyViewedGameModifier.gameModifiersList[a].factionModifierType =
                                        (RPGGameModifier.FactionModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].factionModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].factionModifierType)
                                    {
                                        case RPGGameModifier.FactionModifierType.Interaction_Start_Point:
                                        case RPGGameModifier.FactionModifierType.Stance_Point_Required:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                currentlyViewedGameModifier.gameModifiersList[a].combatModuleType
                                                    .ToString(),
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].combatModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].factionModifierType;

                                    break;
                                case RPGGameModifier.CombatModuleType.WeaponTemplate:
                                    currentlyViewedGameModifier.gameModifiersList[a].weaponTemplateModifierType =
                                        (RPGGameModifier.WeaponTemplateModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a]
                                                .weaponTemplateModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].weaponTemplateModifierType)
                                    {
                                        case RPGGameModifier.WeaponTemplateModifierType.Exp_Mod:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, true,
                                                "Weapon Type",
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.WeaponTemplateModifierType.No_Starting_Items:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                        case RPGGameModifier.WeaponTemplateModifierType.Stat_Amount:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Stat",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].combatModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].weaponTemplateModifierType;

                                    break;
                            }

                            break;
                        case RPGGameModifier.CategoryType.General:
                            currentlyViewedGameModifier.gameModifiersList[a].generalModuleType =
                                (RPGGameModifier.GeneralModuleType) EditorGUILayout.EnumPopup("Module",
                                    currentlyViewedGameModifier.gameModifiersList[a].generalModuleType);

                            currentlyViewedGameModifier.gameModifiersList[a].isGlobal = DrawHorizontalToggle(
                                "Is Global?",
                                "Is this game modifier affecting all entries of this type?", 20,
                                currentlyViewedGameModifier.gameModifiersList[a].isGlobal);
                            if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal)
                            {
                                currentlyViewedGameModifier.gameModifiersList[a].showEntryList =
                                    DrawHorizontalToggle(
                                        "Show " +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType +
                                        " List",
                                        "", 20,
                                        currentlyViewedGameModifier.gameModifiersList[a].showEntryList);
                            }

                            if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal &&
                                currentlyViewedGameModifier.gameModifiersList[a].showEntryList)
                            {
                                DrawGameModifierIDsAndList(
                                    currentlyViewedGameModifier.gameModifiersList[a].entryIDs,
                                    currentlyViewedGameModifier.gameModifiersList[a].generalModuleType.ToString());
                                GUILayout.Space(10);
                            }

                            switch (currentlyViewedGameModifier.gameModifiersList[a].generalModuleType)
                            {
                                case RPGGameModifier.GeneralModuleType.Item:
                                    currentlyViewedGameModifier.gameModifiersList[a].itemModifierType =
                                        (RPGGameModifier.ItemModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].itemModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].itemModifierType)
                                    {
                                        case RPGGameModifier.ItemModifierType.Attack_Speed:
                                        case RPGGameModifier.ItemModifierType.Max_Damage:
                                        case RPGGameModifier.ItemModifierType.Min_Damage:
                                        case RPGGameModifier.ItemModifierType.Sell_Price:
                                        case RPGGameModifier.ItemModifierType.Stack_Amount:
                                        case RPGGameModifier.ItemModifierType.Gem_Bonus_Amount:
                                        case RPGGameModifier.ItemModifierType.Random_Stat_Max:
                                        case RPGGameModifier.ItemModifierType.Random_Stat_Min:
                                        case RPGGameModifier.ItemModifierType.Max_Random_Stat_Amount:
                                        case RPGGameModifier.ItemModifierType.Random_Stats_Chance:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false,
                                                currentlyViewedGameModifier.gameModifiersList[a].combatModuleType
                                                    .ToString(),
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.ItemModifierType.No_Requirement:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                        case RPGGameModifier.ItemModifierType.Stat_Amount:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Stat", true, true, true);
                                            break;
                                        case RPGGameModifier.ItemModifierType.Overriden_Auto_Attack:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Ability", true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].itemModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.Skill:
                                    currentlyViewedGameModifier.gameModifiersList[a].skillModifierType =
                                        (RPGGameModifier.SkillModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].skillModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].skillModifierType)
                                    {
                                        case RPGGameModifier.SkillModifierType.Alloc_Points:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false,
                                                currentlyViewedGameModifier.gameModifiersList[a].combatModuleType
                                                    .ToString(),
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.SkillModifierType.No_Starting_Items:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                        case RPGGameModifier.SkillModifierType.Stat_Amount:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Stat", true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].skillModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.LevelTemplate:
                                    currentlyViewedGameModifier.gameModifiersList[a].levelTemplateModifierType =
                                        (RPGGameModifier.LevelTemplateModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].levelTemplateModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].levelTemplateModifierType)
                                    {
                                        case RPGGameModifier.LevelTemplateModifierType.MaxEXPToLevel:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].levelTemplateModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.Race:
                                    currentlyViewedGameModifier.gameModifiersList[a].raceModifierType =
                                        (RPGGameModifier.RaceModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].raceModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].raceModifierType)
                                    {
                                        case RPGGameModifier.RaceModifierType.Faction:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false, "Faction",
                                                false, false, false);
                                            break;
                                        case RPGGameModifier.RaceModifierType.Male_Prefab:
                                            currentlyViewedGameModifier.gameModifiersList[a].raceOverridenMalePrefab =
                                                (GameObject) EditorGUILayout.ObjectField(
                                                    new GUIContent("Prefab", ""),
                                                    currentlyViewedGameModifier.gameModifiersList[a]
                                                        .raceOverridenMalePrefab,
                                                    typeof(GameObject), false);
                                            break;
                                        case RPGGameModifier.RaceModifierType.Female_Prefab:
                                            currentlyViewedGameModifier.gameModifiersList[a].raceOverridenFemalePrefab =
                                                (GameObject) EditorGUILayout.ObjectField(
                                                    new GUIContent("Prefab", ""),
                                                    currentlyViewedGameModifier.gameModifiersList[a]
                                                        .raceOverridenFemalePrefab,
                                                    typeof(GameObject), false);
                                            break;
                                        case RPGGameModifier.RaceModifierType.Start_Scene:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false, "GameScene",
                                                false, false, false);
                                            break;
                                        case RPGGameModifier.RaceModifierType.Start_Position:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false, "WorldPosition",
                                                false, false, false);
                                            break;
                                        case RPGGameModifier.RaceModifierType.Stat_Amount:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false, "Stat",
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.RaceModifierType.No_Starting_Items:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                        case RPGGameModifier.RaceModifierType.Alloc_Points:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                        default:
                                            throw new ArgumentOutOfRangeException();
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].raceModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.Class:
                                    currentlyViewedGameModifier.gameModifiersList[a].classModifierType =
                                        (RPGGameModifier.ClassModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].classModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].classModifierType)
                                    {
                                        case RPGGameModifier.ClassModifierType.Alloc_Points:
                                        case RPGGameModifier.ClassModifierType.Alloc_Points_Menu:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false,
                                                currentlyViewedGameModifier.gameModifiersList[a].combatModuleType
                                                    .ToString(),
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.ClassModifierType.No_Starting_Items:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                        case RPGGameModifier.ClassModifierType.Stat_Amount:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Stat", true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].classModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.TalentTree:
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName = "";
                                    break;
                                case RPGGameModifier.GeneralModuleType.LootTable:
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName = "";
                                    break;
                                case RPGGameModifier.GeneralModuleType.MerchantTable:
                                    currentlyViewedGameModifier.gameModifiersList[a].merchantTableModifierType =
                                        (RPGGameModifier.MerchantTableModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].merchantTableModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].merchantTableModifierType)
                                    {
                                        case RPGGameModifier.MerchantTableModifierType.Cost:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.MerchantTableModifierType.Currency:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false,
                                                "Currency", false, false, false);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].merchantTableModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.Currency:
                                    currentlyViewedGameModifier.gameModifiersList[a].currencyModifierType =
                                        (RPGGameModifier.CurrencyModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].currencyModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].currencyModifierType)
                                    {
                                        case RPGGameModifier.CurrencyModifierType.Max:
                                        case RPGGameModifier.CurrencyModifierType.Min:
                                        case RPGGameModifier.CurrencyModifierType.Start_At:
                                        case RPGGameModifier.CurrencyModifierType.Amount_For_Convertion:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].currencyModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.CraftingRecipe:
                                    currentlyViewedGameModifier.gameModifiersList[a].recipeModifierType =
                                        (RPGGameModifier.RecipeModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].recipeModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].recipeModifierType)
                                    {
                                        case RPGGameModifier.RecipeModifierType.Crafted_Chance:
                                        case RPGGameModifier.RecipeModifierType.Crafted_Count:
                                        case RPGGameModifier.RecipeModifierType.Unlock_Cost:
                                        case RPGGameModifier.RecipeModifierType.Component_Required_Count:
                                        case RPGGameModifier.RecipeModifierType.EXP:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].recipeModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.CraftingStation:
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName = "";
                                    break;
                                case RPGGameModifier.GeneralModuleType.Bonus:
                                    currentlyViewedGameModifier.gameModifiersList[a].bonusModifierType =
                                        (RPGGameModifier.BonusModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].bonusModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].bonusModifierType)
                                    {
                                        case RPGGameModifier.BonusModifierType.Unlock_Cost:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.BonusModifierType.No_Requirement:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].bonusModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.GearSet:
                                    currentlyViewedGameModifier.gameModifiersList[a].gearSetModifierType =
                                        (RPGGameModifier.GearSetModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].gearSetModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].gearSetModifierType)
                                    {
                                        case RPGGameModifier.GearSetModifierType.Equipped_Amount:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.GearSetModifierType.Stat_Bonuses:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false, "Stat",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].gearSetModifierType;

                                    break;
                                case RPGGameModifier.GeneralModuleType.Enchantment:
                                    currentlyViewedGameModifier.gameModifiersList[a].enchantmentModifierType =
                                        (RPGGameModifier.EnchantmentModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].enchantmentModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].enchantmentModifierType)
                                    {
                                        case RPGGameModifier.EnchantmentModifierType.No_Requirement:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                        case RPGGameModifier.EnchantmentModifierType.Price:
                                        case RPGGameModifier.EnchantmentModifierType.Time:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].enchantmentModifierType;

                                    break;
                            }

                            break;
                        case RPGGameModifier.CategoryType.World:
                            currentlyViewedGameModifier.gameModifiersList[a].worldModuleType =
                                (RPGGameModifier.WorldModuleType) EditorGUILayout.EnumPopup("Module",
                                    currentlyViewedGameModifier.gameModifiersList[a].worldModuleType);

                            currentlyViewedGameModifier.gameModifiersList[a].isGlobal = DrawHorizontalToggle(
                                "Is Global?",
                                "Is this game modifier affecting all entries of this type?", 20,
                                currentlyViewedGameModifier.gameModifiersList[a].isGlobal);
                            if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal)
                            {
                                currentlyViewedGameModifier.gameModifiersList[a].showEntryList =
                                    DrawHorizontalToggle(
                                        "Show " +
                                        currentlyViewedGameModifier.gameModifiersList[a].worldModuleType +
                                        " List",
                                        "", 20,
                                        currentlyViewedGameModifier.gameModifiersList[a].showEntryList);
                            }

                            if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal &&
                                currentlyViewedGameModifier.gameModifiersList[a].showEntryList)
                            {
                                DrawGameModifierIDsAndList(
                                    currentlyViewedGameModifier.gameModifiersList[a].entryIDs,
                                    currentlyViewedGameModifier.gameModifiersList[a].worldModuleType.ToString());
                                GUILayout.Space(10);
                            }

                            switch (currentlyViewedGameModifier.gameModifiersList[a].worldModuleType)
                            {
                                case RPGGameModifier.WorldModuleType.Task:
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName = "";
                                    break;
                                case RPGGameModifier.WorldModuleType.Quest:
                                    currentlyViewedGameModifier.gameModifiersList[a].questModifierType =
                                        (RPGGameModifier.QuestModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].questModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].questModifierType)
                                    {
                                        case RPGGameModifier.QuestModifierType.No_Requirement:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].worldModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].questModifierType;

                                    break;
                                case RPGGameModifier.WorldModuleType.WorldPosition:
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName = "";
                                    break;
                                case RPGGameModifier.WorldModuleType.ResourceNode:
                                    currentlyViewedGameModifier.gameModifiersList[a].resourceNodeModifierType =
                                        (RPGGameModifier.ResourceNodeModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].resourceNodeModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].resourceNodeModifierType)
                                    {
                                        case RPGGameModifier.ResourceNodeModifierType.Gather_Time:
                                        case RPGGameModifier.ResourceNodeModifierType.Level_Required:
                                        case RPGGameModifier.ResourceNodeModifierType.Respawn_Time:
                                        case RPGGameModifier.ResourceNodeModifierType.Unlock_Cost:
                                        case RPGGameModifier.ResourceNodeModifierType.EXP:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].worldModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].resourceNodeModifierType;

                                    break;
                                case RPGGameModifier.WorldModuleType.GameScene:
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName = "";
                                    break;
                                case RPGGameModifier.WorldModuleType.Dialogue:
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName = "";
                                    break;
                            }

                            break;
                        case RPGGameModifier.CategoryType.Settings:
                            currentlyViewedGameModifier.gameModifiersList[a].settingsModuleType =
                                (RPGGameModifier.SettingsModuleType) EditorGUILayout.EnumPopup("Module",
                                    currentlyViewedGameModifier.gameModifiersList[a].settingsModuleType);

                            currentlyViewedGameModifier.gameModifiersList[a].isGlobal = DrawHorizontalToggle(
                                "Is Global?",
                                "Is this game modifier affecting all entries of this type?", 20,
                                currentlyViewedGameModifier.gameModifiersList[a].isGlobal);
                            if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal)
                            {
                                currentlyViewedGameModifier.gameModifiersList[a].showEntryList =
                                    DrawHorizontalToggle(
                                        "Show " +
                                        currentlyViewedGameModifier.gameModifiersList[a].settingsModuleType +
                                        " List",
                                        "", 20,
                                        currentlyViewedGameModifier.gameModifiersList[a].showEntryList);
                            }

                            if (!currentlyViewedGameModifier.gameModifiersList[a].isGlobal &&
                                currentlyViewedGameModifier.gameModifiersList[a].showEntryList)
                            {
                                DrawGameModifierIDsAndList(
                                    currentlyViewedGameModifier.gameModifiersList[a].entryIDs,
                                    currentlyViewedGameModifier.gameModifiersList[a].settingsModuleType.ToString());
                                GUILayout.Space(10);
                            }

                            switch (currentlyViewedGameModifier.gameModifiersList[a].settingsModuleType)
                            {
                                case RPGGameModifier.SettingsModuleType.GeneralSettings:
                                    currentlyViewedGameModifier.gameModifiersList[a].generalSettingModifierType =
                                        (RPGGameModifier.GeneralSettingModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a]
                                                .generalSettingModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].generalSettingModifierType)
                                    {
                                        case RPGGameModifier.GeneralSettingModifierType.No_Auto_Save:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue = true;
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].settingsModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].generalSettingModifierType;

                                    break;
                                case RPGGameModifier.SettingsModuleType.CombatSettings:
                                    currentlyViewedGameModifier.gameModifiersList[a].combatSettingModifierType =
                                        (RPGGameModifier.CombatSettingModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].combatSettingModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].combatSettingModifierType)
                                    {
                                        case RPGGameModifier.CombatSettingModifierType.Critical_Bonus:
                                        case RPGGameModifier.CombatSettingModifierType.Action_Bar_Slots:
                                        case RPGGameModifier.CombatSettingModifierType.Combat_Reset_Timer:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                        case RPGGameModifier.CombatSettingModifierType.Health_Stat:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false, "Stat",
                                                false, false, false);
                                            break;
                                        case RPGGameModifier.CombatSettingModifierType.Alloc_Tree_Point:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, true, false, "TreePoint",
                                                false, false, false);
                                            break;
                                        case RPGGameModifier.CombatSettingModifierType.Can_Decrease_Alloc_Point:
                                            currentlyViewedGameModifier.gameModifiersList[a].boolValue
                                                = DrawHorizontalToggle("Can Decrease", "",
                                                    smallFieldHeight,
                                                    currentlyViewedGameModifier.gameModifiersList[a]
                                                        .boolValue);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].settingsModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].combatSettingModifierType;

                                    break;
                                case RPGGameModifier.SettingsModuleType.SceneSettings:
                                    currentlyViewedGameModifier.gameModifiersList[a].worldSettingModifierType =
                                        (RPGGameModifier.WorldSettingModifierType) EditorGUILayout.EnumPopup("Type",
                                            currentlyViewedGameModifier.gameModifiersList[a].worldSettingModifierType);

                                    switch (currentlyViewedGameModifier.gameModifiersList[a].worldSettingModifierType)
                                    {
                                        case RPGGameModifier.WorldSettingModifierType.Game_Audio:
                                        case RPGGameModifier.WorldSettingModifierType.Light_Intensity:
                                        case RPGGameModifier.WorldSettingModifierType.Camera_FOV:
                                            DrawGameModifierModuleValue(currentlyViewedGameModifier.gameModifiersList[a]
                                                    .amountModifier, false, false, "",
                                                true, true, true);
                                            break;
                                    }
                    
                                    currentlyViewedGameModifier.gameModifiersList[a].modifierTypeName =
                                        currentlyViewedGameModifier.gameModifiersList[a].categoryType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].settingsModuleType + "+" +
                                        currentlyViewedGameModifier.gameModifiersList[a].worldSettingModifierType;

                                    break;
                            }

                            break;
                    }
                    
                    EndHorizontalMargin(bigHorizontalSpace, true);
                }

                GUILayout.Space(10);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawGameModifierIDsAndList(List<int> entryIDs, string assetTypeName)
    {
        if(assetTypeName != "Stat") DrawAddEntryIDButton(assetTypeName, entryIDs);
        GUILayout.Space(5);
        DrawGameModifierEntryList(entryIDs, assetTypeName);
    }
    private void DrawGameModifierEntryList(List<int> entryIDs, string assetTypeName)
    {
        for (var i = 0; i < entryIDs.Count; i++)
        {
            GUILayout.Space(10);
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                GUILayout.Height(20)))
            {
                entryIDs.RemoveAt(i);
                return;
            }

            entryIDs[i] = DrawRPGDataEntryField(entryIDs[i], assetTypeName, assetTypeName);
            EditorGUILayout.EndHorizontal();
        }
    }

    private int DrawRPGDataEntryField(int id, string assetTypeName, string fieldName)
    {
        switch (assetTypeName)
        {
            case "Ability":
            {
                RPGAbility entryRef = id != -1
                    ? RPGBuilderUtilities.GetAbilityFromIDEditor(id, allAbilities)
                    : null;
                RPGAbility tempRef = (RPGAbility) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGAbility), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Effect":
            {
                RPGEffect entryRef = id != -1
                    ? RPGBuilderUtilities.GetEffectFromIDEditor(id, allEffects)
                    : null;
                RPGEffect tempRef = (RPGEffect) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGEffect), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "NPC":
            {
                RPGNpc entryRef = id != -1
                    ? RPGBuilderUtilities.GetNPCFromIDEditor(id, allNPCs)
                    : null;
                RPGNpc tempRef = (RPGNpc) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGNpc), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Stat":
            {
                RPGStat entryRef = id != -1
                    ? RPGBuilderUtilities.GetStatFromIDEditor(id, allStats)
                    : null;
                RPGStat tempRef = (RPGStat) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGStat), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "TreePoint":
            {
                RPGTreePoint entryRef = id != -1
                    ? RPGBuilderUtilities.GetTreePointFromIDEditor(id, allTreePoints)
                    : null;
                RPGTreePoint tempRef = (RPGTreePoint) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGTreePoint), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Spellbook":
            {
                RPGSpellbook entryRef = id != -1
                    ? RPGBuilderUtilities.GetSpellbookFromIDEditor(id, allSpellbooks)
                    : null;
                RPGSpellbook tempRef = (RPGSpellbook) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGSpellbook), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Faction":
            {
                RPGFaction entryRef = id != -1
                    ? RPGBuilderUtilities.GetFactionFromIDEditor(id, allFactions)
                    : null;
                RPGFaction tempRef = (RPGFaction) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGFaction), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "WeaponTemplate":
            {
                RPGWeaponTemplate entryRef = id != -1
                    ? RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(id, allWeaponTemplates)
                    : null;
                RPGWeaponTemplate tempRef = (RPGWeaponTemplate) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGWeaponTemplate), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Item":
            {
                RPGItem entryRef = id != -1
                    ? RPGBuilderUtilities.GetItemFromIDEditor(id, allItems)
                    : null;
                RPGItem tempRef = (RPGItem) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGItem), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Skill":
            {
                RPGSkill entryRef = id != -1
                    ? RPGBuilderUtilities.GetSkillFromIDEditor(id, allSkills)
                    : null;
                RPGSkill tempRef = (RPGSkill) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGSkill), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "LevelTemplate":
            {
                RPGLevelsTemplate entryRef = id != -1
                    ? RPGBuilderUtilities.GetLevelTemplateFromIDEditor(id, allLevelsTemplate)
                    : null;
                RPGLevelsTemplate tempRef = (RPGLevelsTemplate) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGLevelsTemplate), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Race":
            {
                RPGRace entryRef = id != -1
                    ? RPGBuilderUtilities.GetRaceFromIDEditor(id, allRaces)
                    : null;
                RPGRace tempRef = (RPGRace) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGRace), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Class":
            {
                RPGClass entryRef = id != -1
                    ? RPGBuilderUtilities.GetClassFromIDEditor(id, allClasses)
                    : null;
                RPGClass tempRef = (RPGClass) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGClass), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "LootTable":
            {
                RPGLootTable entryRef = id != -1
                    ? RPGBuilderUtilities.GetlootTableFromIDEditor(id, allLootTables)
                    : null;
                RPGLootTable tempRef = (RPGLootTable) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGLootTable), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "MerchantTable":
            {
                RPGMerchantTable entryRef = id != -1
                    ? RPGBuilderUtilities.GetMerchantTableFromIDEditor(id, allMerchantTables)
                    : null;
                RPGMerchantTable tempRef = (RPGMerchantTable) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGMerchantTable), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Currency":
            {
                RPGCurrency entryRef = id != -1
                    ? RPGBuilderUtilities.GetCurrencyFromIDEditor(id, allCurrencies)
                    : null;
                RPGCurrency tempRef = (RPGCurrency) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGCurrency), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Recipe":
            {
                RPGCraftingRecipe entryRef = id != -1
                    ? RPGBuilderUtilities.GetCraftingRecipeFromIDEditor(id, allCraftingRecipes)
                    : null;
                RPGCraftingRecipe tempRef = (RPGCraftingRecipe) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGCraftingRecipe), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "CraftingStation":
            {
                RPGCraftingStation entryRef = id != -1
                    ? RPGBuilderUtilities.GetCraftingStationFromIDEditor(id, allCraftingStations)
                    : null;
                RPGCraftingStation tempRef = (RPGCraftingStation) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGCraftingStation), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "TalentTree":
            {
                RPGTalentTree entryRef = id != -1
                    ? RPGBuilderUtilities.GetTalentTreeFromIDEditor(id, allTalentTrees)
                    : null;
                RPGTalentTree tempRef = (RPGTalentTree) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGTalentTree), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Bonus":
            {
                RPGBonus entryRef = id != -1
                    ? RPGBuilderUtilities.GetBonusFromIDEditor(id, allBonuses)
                    : null;
                RPGBonus tempRef = (RPGBonus) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGBonus), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "GearSet":
            {
                RPGGearSet entryRef = id != -1
                    ? RPGBuilderUtilities.GetGearSetFromIDEditor(id, allGearSets)
                    : null;
                RPGGearSet tempRef = (RPGGearSet) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGGearSet), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Enchantment":
            {
                RPGEnchantment entryRef = id != -1
                    ? RPGBuilderUtilities.GetEnchantmentFromIDEditor(id, allEnchantments)
                    : null;
                RPGEnchantment tempRef = (RPGEnchantment) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGEnchantment), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Task":
            {
                RPGTask entryRef = id != -1
                    ? RPGBuilderUtilities.GetTaskFromIDEditor(id, allTasks)
                    : null;
                RPGTask tempRef = (RPGTask) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGTask), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Quest":
            {
                RPGQuest entryRef = id != -1
                    ? RPGBuilderUtilities.GetQuestFromIDEditor(id, allQuests)
                    : null;
                RPGQuest tempRef = (RPGQuest) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGQuest), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "WorldPosition":
            {
                RPGWorldPosition entryRef = id != -1
                    ? RPGBuilderUtilities.GetWorldPositionFromIDEditor(id, allWorldPositions)
                    : null;
                RPGWorldPosition tempRef = (RPGWorldPosition) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGWorldPosition), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "ResourceNode":
            {
                RPGResourceNode entryRef = id != -1
                    ? RPGBuilderUtilities.GetResourceNodeFromIDEditor(id, allResourceNodes)
                    : null;
                RPGResourceNode tempRef = (RPGResourceNode) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGResourceNode), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "GameScene":
            {
                RPGGameScene entryRef = id != -1
                    ? RPGBuilderUtilities.GetGameSceneFromIDEditor(id, allGameScenes)
                    : null;
                RPGGameScene tempRef = (RPGGameScene) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGGameScene), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Dialogues":
            {
                RPGDialogue entryRef = id != -1
                    ? RPGBuilderUtilities.GetDialogueFromIDEditor(id, allDialogues)
                    : null;
                RPGDialogue tempRef = (RPGDialogue) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGDialogue), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "GameModifier":
            {
                RPGGameModifier entryRef = id != -1
                    ? RPGBuilderUtilities.GetGameModifierFromIDEditor(id, allGameModifiers)
                    : null;
                RPGGameModifier tempRef = (RPGGameModifier) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGGameModifier), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Species":
            {
                RPGSpecies entryRef = id != -1
                    ? RPGBuilderUtilities.GetSpeciesFromIDEditor(id, allSpecies)
                    : null;
                RPGSpecies tempRef = (RPGSpecies) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGSpecies), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
            case "Combo":
            {
                RPGCombo entryRef = id != -1
                    ? RPGBuilderUtilities.GetComboFromIDEditor(id, allCombos)
                    : null;
                RPGCombo tempRef = (RPGCombo) EditorGUILayout.ObjectField(fieldName, entryRef,
                    typeof(RPGCombo), false, GUILayout.Height(20));
                return tempRef != null ? tempRef.ID : -1;
            }
        }

        return -1;
    }

    private void DrawAddEntryIDButton(string buttonName, List<int> intList)
    {
        StartHorizontalMargin(60, false);
        if (GUILayout.Button("+ Add " + buttonName, skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
            GUILayout.ExpandWidth(true)))
        {
            intList.Add(-1);
        }
        EndHorizontalMargin(60, false);
    }

    private void DrawGameModifierModuleValue(RPGGameModifier.ModuleAmountModifier moduleAmountModifier,
        bool showEntryID, bool showEntryName, string assetTypeName, bool showModifierType, bool showAmount, bool showIsPercent)
    {
        if (showModifierType)
        {
            moduleAmountModifier.dataModifierType =
                (RPGGameModifier.DataModifierType) EditorGUILayout.EnumPopup("Modifier Type",
                    moduleAmountModifier.dataModifierType);
        }
        
        if (showEntryName)
        {
            if (assetTypeName == "Weapon Type")
            {
                var currentWeaponTypeIndex =
                    getIndexFromName("WeaponType", moduleAmountModifier.entryName);
                var tempIndex2 = EditorGUILayout.Popup("Weapon Type", currentWeaponTypeIndex,
                    itemSettings.weaponTypeList.ToArray());
                if (itemSettings.weaponTypeList.Count > 0)
                    moduleAmountModifier.entryName = itemSettings.weaponTypeList[tempIndex2];
            }
            else
            {
                moduleAmountModifier.entryName = DrawHorizontalTextField(assetTypeName, "", smallFieldHeight, moduleAmountModifier.entryName);
            }
        }

        if (showEntryID)
        {
            moduleAmountModifier.entryID =
                DrawRPGDataEntryField(moduleAmountModifier.entryID, assetTypeName, assetTypeName);
        }
        else
        {
            moduleAmountModifier.entryID = -1;
        }

        if (showAmount)
        {
            moduleAmountModifier.alterAmount =
                DrawHorizontalFloatField("Amount", "", smallFieldHeight, moduleAmountModifier.alterAmount);
        }

        if (moduleAmountModifier.dataModifierType != RPGGameModifier.DataModifierType.Override && showIsPercent)
        {
            moduleAmountModifier.isPercent =
                DrawHorizontalToggle("Is Percent?", "", smallFieldHeight, moduleAmountModifier.isPercent);
        }
    }

    private void DrawResourceNodeView()
    {
        if (currentlyViewedResourceNode == null)
        {
            if (allResourceNodes.Count == 0)
            {
                CreateNew(AssetType.ResourceNode);
                return;
            }

            currentlyViewedResourceNode = Instantiate(allResourceNodes[0]) as RPGResourceNode;

        }
        
        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.resourceNodeModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.resourceNodeModuleSection.showBaseInfo);
        if (editorFilters.resourceNodeModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedResourceNode.icon = DrawIconField(currentlyViewedResourceNode.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedResourceNode.ID);
            currentlyViewedResourceNode._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedResourceNode._name);
            currentlyViewedResourceNode.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedResourceNode.displayName);
            currentlyViewedResourceNode._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_RESOURCE_NODE_" + currentlyViewedResourceNode._name);

            currentlyViewedResourceNode.learnedByDefault =
                DrawHorizontalToggle("Known Automatically", "", smallFieldHeight,
                    currentlyViewedResourceNode.learnedByDefault);

            currentlyViewedResourceNode.skillRequiredREF = (RPGSkill) EditorGUILayout.ObjectField("Skill",
                RPGBuilderUtilities.GetSkillFromIDEditor(currentlyViewedResourceNode.skillRequiredID,
                    allSkills), typeof(RPGSkill), false);

            currentlyViewedResourceNode.skillRequiredID = currentlyViewedResourceNode.skillRequiredREF != null
                ? currentlyViewedResourceNode.skillRequiredREF.ID
                : -1;

            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.resourceNodeModuleSection.showRanks =
            HandleModuleBanner("RANKS", editorFilters.resourceNodeModuleSection.showRanks);
        if (editorFilters.resourceNodeModuleSection.showRanks)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("+ Add Rank", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
            {
                var newRankDataElement = new RPGResourceNode.RPGResourceNodeRankData();
                currentlyViewedResourceNode.ranks.Add(newRankDataElement);
            }

            if (currentlyViewedResourceNode.ranks.Count > 0)
            {
                GUILayout.Space(20);
                if (GUILayout.Button("- Remove Rank", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedResourceNode.ranks
                        .RemoveAt(currentlyViewedResourceNode.ranks
                            .Count - 1);
                    return;
                }
            }

            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, false);

            GUILayout.Space(10);


            for (var i = 0;i < currentlyViewedResourceNode.ranks.Count;i++)
            {
                StartHorizontalMargin(bigHorizontalSpace, false);

                var rankNbr = i + 1;
                GUILayout.BeginHorizontal();
                if (GUILayout.Button("Rank: " + rankNbr, skin.GetStyle("AbilityRankButton"),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedResourceNode.ranks[i].ShowedInEditor =
                        !currentlyViewedResourceNode.ranks[i].ShowedInEditor;
                    GUI.FocusControl(null);
                }

                if (i > 0)
                {
                    GUILayout.Space(5);
                    if (GUILayout.Button("Copy Above", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                        GUILayout.Height(smallButtonHeight)))
                    {
                        currentlyViewedResourceNode.copyData(currentlyViewedResourceNode.ranks[i],
                            currentlyViewedResourceNode.ranks[i - 1]);
                        GUI.FocusControl(null);
                    }
                }

                GUILayout.EndHorizontal();
                EndHorizontalMargin(bigHorizontalSpace, false);

                if (currentlyViewedResourceNode.ranks[i].ShowedInEditor)
                {
                    GUILayout.Space(10);
                    editorFilters.resourceNodeModuleSection.showTalentTreeSettings =
                        HandleModuleBanner("TALENT TREE SETTINGS",
                            editorFilters.resourceNodeModuleSection.showTalentTreeSettings);
                    if (editorFilters.resourceNodeModuleSection.showTalentTreeSettings)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(bigHorizontalSpace, true);
                        currentlyViewedResourceNode.ranks[i].unlockCost = DrawHorizontalIntField("Unlock Cost", "",
                            smallFieldHeight,
                            currentlyViewedResourceNode.ranks[i].unlockCost);
                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }

                    GUILayout.Space(10);
                    editorFilters.resourceNodeModuleSection.showLootSettings =
                        HandleModuleBanner("LOOT SETTINGS", editorFilters.resourceNodeModuleSection.showLootSettings);
                    if (editorFilters.resourceNodeModuleSection.showLootSettings)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(bigHorizontalSpace, true);

                        currentlyViewedResourceNode.ranks[i].lootTableREF = (RPGLootTable) EditorGUILayout.ObjectField(
                            "Loot Table",
                            RPGBuilderUtilities.GetlootTableFromIDEditor(
                                currentlyViewedResourceNode.ranks[i].lootTableID,
                                allLootTables), typeof(RPGLootTable), false, GUILayout.Height(15));

                        currentlyViewedResourceNode.ranks[i].lootTableID =
                            currentlyViewedResourceNode.ranks[i].lootTableREF != null
                                ? currentlyViewedResourceNode.ranks[i].lootTableREF.ID
                                : -1;

                        currentlyViewedResourceNode.ranks[i].distanceMax = DrawHorizontalFloatField("Distance",
                            "", smallFieldHeight,
                            currentlyViewedResourceNode.ranks[i].distanceMax);

                        currentlyViewedResourceNode.ranks[i].gatherTime = DrawHorizontalFloatField("Gather Time",
                            "", smallFieldHeight,
                            currentlyViewedResourceNode.ranks[i].gatherTime);

                        currentlyViewedResourceNode.ranks[i].respawnTime = DrawHorizontalFloatField("Respawn Time",
                            "", smallFieldHeight,
                            currentlyViewedResourceNode.ranks[i].respawnTime);

                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }

                    GUILayout.Space(10);
                    editorFilters.resourceNodeModuleSection.showSkillSettings =
                        HandleModuleBanner("SKILL SETTINGS", editorFilters.resourceNodeModuleSection.showSkillSettings);
                    if (editorFilters.resourceNodeModuleSection.showSkillSettings)
                    {
                        GUILayout.Space(10);
                        StartHorizontalMargin(bigHorizontalSpace, true);

                        currentlyViewedResourceNode.ranks[i].skillLevelRequired = DrawHorizontalIntField("Level",
                            "", smallFieldHeight,
                            currentlyViewedResourceNode.ranks[i].skillLevelRequired);

                        currentlyViewedResourceNode.ranks[i].Experience = DrawHorizontalIntField("Experience",
                            "", smallFieldHeight,
                            currentlyViewedResourceNode.ranks[i].Experience);

                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }
                    GUILayout.Space(30);
                }
                GUILayout.Space(10);
            }
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }


    private void DrawTaskView()
    {
        if (currentlyViewedTask == null)
        {
            if (allTasks.Count == 0)
            {
                CreateNew(AssetType.Task);
                return;
            }

            currentlyViewedTask = Instantiate(allTasks[0]) as RPGTask;

        }
        
        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.taskModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.taskModuleSection.showBaseInfo);
        if (editorFilters.taskModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedTask.ID);
            currentlyViewedTask._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedTask._name);
            currentlyViewedTask.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedTask.displayName);
            currentlyViewedTask._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_TASK_" + currentlyViewedTask._name);
            currentlyViewedTask.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedTask.description);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.taskModuleSection.showTaskData =
            HandleModuleBanner("TASK SETTINGS", editorFilters.taskModuleSection.showTaskData);
        if (editorFilters.taskModuleSection.showTaskData)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedTask.taskType =
                (RPGTask.TASK_TYPE) EditorGUILayout.EnumPopup("Task Type", currentlyViewedTask.taskType);
            switch (currentlyViewedTask.taskType)
            {
                case RPGTask.TASK_TYPE.enterRegion:
                    break;
                case RPGTask.TASK_TYPE.enterScene:
                    currentlyViewedTask.sceneName = DrawHorizontalTextField("Scene Name:", "", smallFieldHeight,
                        currentlyViewedTask.sceneName);
                    break;
                case RPGTask.TASK_TYPE.getItem:
                {
                    currentlyViewedTask.itemToGetREF = (RPGItem) EditorGUILayout.ObjectField("Item:",
                        RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedTask.itemToGetID, allItems),
                        typeof(RPGItem),
                        false, GUILayout.Height(15));

                    currentlyViewedTask.itemToGetID = currentlyViewedTask.itemToGetREF != null
                        ? currentlyViewedTask.itemToGetREF.ID
                        : -1;

                    currentlyViewedTask.taskValue = DrawHorizontalIntField("Count", "", smallFieldHeight,
                        currentlyViewedTask.taskValue);

                    currentlyViewedTask.keepItems = DrawHorizontalToggle("Keep Items:", "", smallFieldHeight,
                        currentlyViewedTask.keepItems);
                    break;
                }
                case RPGTask.TASK_TYPE.killNPC:
                {
                    currentlyViewedTask.npcToKillREF = (RPGNpc) EditorGUILayout.ObjectField("NPC:",
                        RPGBuilderUtilities.GetNPCFromIDEditor(currentlyViewedTask.npcToKillID, allNPCs),
                        typeof(RPGNpc),
                        false, GUILayout.Height(15));

                    currentlyViewedTask.npcToKillID = currentlyViewedTask.npcToKillREF != null
                        ? currentlyViewedTask.npcToKillREF.ID
                        : -1;

                    currentlyViewedTask.taskValue = DrawHorizontalIntField("Amount", "", smallFieldHeight,
                        currentlyViewedTask.taskValue);
                    break;
                }
                case RPGTask.TASK_TYPE.learnAbility:
                {
                    currentlyViewedTask.abilityToLearnREF = (RPGAbility) EditorGUILayout.ObjectField("Ability:",
                        RPGBuilderUtilities.GetAbilityFromIDEditor(currentlyViewedTask.abilityToLearnID, allAbilities),
                        typeof(RPGAbility), false, GUILayout.Height(15));

                    currentlyViewedTask.abilityToLearnID = currentlyViewedTask.abilityToLearnREF != null
                        ? currentlyViewedTask.abilityToLearnREF.ID
                        : -1;
                    break;
                }
                case RPGTask.TASK_TYPE.learnRecipe:
                    break;
                case RPGTask.TASK_TYPE.reachLevel:
                    currentlyViewedTask.taskValue = DrawHorizontalIntField("Level", "", smallFieldHeight,
                        currentlyViewedTask.taskValue);
                    break;
                case RPGTask.TASK_TYPE.reachSkillLevel:
                {
                    currentlyViewedTask.skillRequiredREF = (RPGSkill) EditorGUILayout.ObjectField("Skill:",
                        RPGBuilderUtilities.GetSkillFromIDEditor(currentlyViewedTask.skillRequiredID, allSkills),
                        typeof(RPGSkill), false, GUILayout.Height(15));

                    currentlyViewedTask.skillRequiredID = currentlyViewedTask.skillRequiredREF != null
                        ? currentlyViewedTask.skillRequiredREF.ID
                        : -1;

                    currentlyViewedTask.taskValue = DrawHorizontalIntField("Level", "", smallFieldHeight,
                        currentlyViewedTask.taskValue);
                    break;
                }
                case RPGTask.TASK_TYPE.talkToNPC:
                {
                    currentlyViewedTask.npcToTalkToREF = (RPGNpc) EditorGUILayout.ObjectField("NPC:",
                        RPGBuilderUtilities.GetNPCFromIDEditor(currentlyViewedTask.npcToTalkToID, allNPCs),
                        typeof(RPGNpc),
                        false, GUILayout.Height(15));

                    currentlyViewedTask.npcToTalkToID = currentlyViewedTask.npcToTalkToREF != null
                        ? currentlyViewedTask.npcToTalkToREF.ID
                        : -1;
                    break;
                }
                case RPGTask.TASK_TYPE.useItem:
                {
                    currentlyViewedTask.itemToUseREF = (RPGItem) EditorGUILayout.ObjectField("Item:",
                        RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedTask.itemToUseID, allItems),
                        typeof(RPGItem),
                        false, GUILayout.Height(15));

                    currentlyViewedTask.itemToUseID = currentlyViewedTask.itemToUseREF != null
                        ? currentlyViewedTask.itemToUseREF.ID
                        : -1;
                    break;
                }
                case RPGTask.TASK_TYPE.reachWeaponTemplateLevel:
                {
                    currentlyViewedTask.weaponTemplateRequireREF = (RPGWeaponTemplate) EditorGUILayout.ObjectField(
                        "Weapon Template:",
                        RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(currentlyViewedTask.weaponTemplateRequiredID,
                            allWeaponTemplates), typeof(RPGWeaponTemplate), false, GUILayout.Height(15));

                    currentlyViewedTask.weaponTemplateRequiredID = currentlyViewedTask.weaponTemplateRequireREF != null
                        ? currentlyViewedTask.weaponTemplateRequireREF.ID
                        : -1;

                    currentlyViewedTask.taskValue = DrawHorizontalIntField("Level", "", smallFieldHeight,
                        currentlyViewedTask.taskValue);
                    break;
                }
            }
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawQuestView()
    {
        if (currentlyViewedQuest == null)
        {
            if (allQuests.Count == 0)
            {
                CreateNew(AssetType.Quest);
                return;
            }

            currentlyViewedQuest = Instantiate(allQuests[0]) as RPGQuest;

        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedQuest;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.questModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.questModuleSection.showBaseInfo);
        if (editorFilters.questModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedQuest.ID);
            currentlyViewedQuest._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedQuest._name);
            currentlyViewedQuest.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedQuest.displayName);
            currentlyViewedQuest._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_QUEST_" + currentlyViewedQuest._name);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.questModuleSection.showUIData =
            HandleModuleBanner("UI PRESENTATION", editorFilters.questModuleSection.showUIData);
        if (editorFilters.questModuleSection.showUIData)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedQuest.description = DrawHorizontalDescriptionField("Description:", "",
                smallFieldHeight, currentlyViewedQuest.description);
            currentlyViewedQuest.ObjectiveText = DrawHorizontalDescriptionField("Objective:", "",
                smallFieldHeight, currentlyViewedQuest.ObjectiveText);
            currentlyViewedQuest.ProgressText = DrawHorizontalDescriptionField("Progress:", "",
                smallFieldHeight, currentlyViewedQuest.ProgressText);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.questModuleSection.showQuestSettings =
            HandleModuleBanner("SETTINGS", editorFilters.questModuleSection.showQuestSettings);
        if (editorFilters.questModuleSection.showQuestSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedQuest.canBeTurnedInWithoutNPC = DrawHorizontalToggle("Turn in without NPC", "",
                smallFieldHeight, currentlyViewedQuest.canBeTurnedInWithoutNPC);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.questModuleSection.showItemsGiven =
            HandleModuleBanner("ITEMS GIVEN", editorFilters.questModuleSection.showItemsGiven);
        if (editorFilters.questModuleSection.showItemsGiven)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedQuest.itemsGiven.Add(new RPGQuest.QuestItemsGivenDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList7 = serialObj.FindProperty("itemsGiven");
            currentlyViewedQuest.itemsGiven =
                GetTargetObjectOfProperty(ThisList7) as List<RPGQuest.QuestItemsGivenDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedQuest.itemsGiven.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedQuest.itemsGiven.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedQuest.itemsGiven[a].itemREF != null)
                    effectName = currentlyViewedQuest.itemsGiven[a].itemREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();

                currentlyViewedQuest.itemsGiven[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                    RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedQuest.itemsGiven[a].itemID,
                        allItems), typeof(RPGItem), false);

                currentlyViewedQuest.itemsGiven[a].itemID =
                    currentlyViewedQuest.itemsGiven[a].itemREF != null
                        ? currentlyViewedQuest.itemsGiven[a].itemREF.ID
                        : -1;

                currentlyViewedQuest.itemsGiven[a].count = DrawHorizontalIntField("Count", "",
                    smallFieldHeight, currentlyViewedQuest.itemsGiven[a].count);

            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.questModuleSection.showRequirements =
            HandleModuleBanner("REQUIREMENTS", editorFilters.questModuleSection.showRequirements);
        if (editorFilters.questModuleSection.showRequirements)
        {
            GUILayout.Space(10);
            currentlyViewedQuest.questRequirements = DrawRequirementList(currentlyViewedQuest.questRequirements);
        }

        GUILayout.Space(10);
        editorFilters.questModuleSection.showObjectives =
            HandleModuleBanner("OBJECTIVES", editorFilters.questModuleSection.showObjectives);
        if (editorFilters.questModuleSection.showObjectives)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Objective", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedQuest.objectives.Add(new RPGQuest.QuestObjectiveDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("objectives");
            currentlyViewedQuest.objectives = GetTargetObjectOfProperty(ThisList2) as List<RPGQuest.QuestObjectiveDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedQuest.objectives.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedQuest.objectives.RemoveAt(a);
                    return;
                }

                GUILayout.Space(10);
                EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                currentlyViewedQuest.objectives[a].objectiveType =
                    (RPGQuest.QuestObjectiveType) EditorGUILayout.EnumPopup(currentlyViewedQuest.objectives[a]
                        .objectiveType);
                EditorGUILayout.EndHorizontal();
                EditorGUILayout.BeginVertical();

                if (currentlyViewedQuest.objectives.Count > 0)
                    if (currentlyViewedQuest.objectives[a].objectiveType == RPGQuest.QuestObjectiveType.task)
                    {
                        currentlyViewedQuest.objectives[a].taskREF = (RPGTask) EditorGUILayout.ObjectField("Task:",
                            RPGBuilderUtilities.GetTaskFromIDEditor(currentlyViewedQuest.objectives[a].taskID,
                                allTasks), typeof(RPGTask), false);

                        currentlyViewedQuest.objectives[a].taskID = currentlyViewedQuest.objectives[a].taskREF != null
                            ? currentlyViewedQuest.objectives[a].taskREF.ID
                            : -1;
                    }

                EditorGUILayout.EndVertical();
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.questModuleSection.showAutomaticRewards =
            HandleModuleBanner("AUTOMATIC REWARDS", editorFilters.questModuleSection.showAutomaticRewards);
        if (editorFilters.questModuleSection.showAutomaticRewards)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Reward", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedQuest.rewardsGiven.Add(new RPGQuest.QuestRewardDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList3 = serialObj.FindProperty("rewardsGiven");
            currentlyViewedQuest.rewardsGiven = GetTargetObjectOfProperty(ThisList3) as List<RPGQuest.QuestRewardDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedQuest.rewardsGiven.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedQuest.rewardsGiven.RemoveAt(a);
                    return;
                }

                GUILayout.Space(10);
                EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                currentlyViewedQuest.rewardsGiven[a].rewardType =
                    (RPGQuest.QuestRewardType) EditorGUILayout.EnumPopup(
                        currentlyViewedQuest.rewardsGiven[a].rewardType);
                EditorGUILayout.EndHorizontal();
                EditorGUILayout.BeginVertical();

                if (currentlyViewedQuest.rewardsGiven.Count > 0)
                {
                    switch (currentlyViewedQuest.rewardsGiven[a].rewardType)
                    {
                        case RPGQuest.QuestRewardType.currency:
                        {
                            currentlyViewedQuest.rewardsGiven[a].currencyREF =
                                (RPGCurrency) EditorGUILayout.ObjectField(
                                    "Currency",
                                    RPGBuilderUtilities.GetCurrencyFromIDEditor(
                                        currentlyViewedQuest.rewardsGiven[a].currencyID,
                                        allCurrencies), typeof(RPGCurrency), false);

                            currentlyViewedQuest.rewardsGiven[a].currencyID =
                                currentlyViewedQuest.rewardsGiven[a].currencyREF != null
                                    ? currentlyViewedQuest.rewardsGiven[a].currencyREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsGiven[a].count =
                                DrawHorizontalIntField("Count", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsGiven[a].count);
                            break;
                        }
                        case RPGQuest.QuestRewardType.Experience:
                            currentlyViewedQuest.rewardsGiven[a].Experience =
                                DrawHorizontalIntField("Experience", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsGiven[a].Experience);
                            break;
                        case RPGQuest.QuestRewardType.item:
                        {
                            currentlyViewedQuest.rewardsGiven[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                                RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedQuest.rewardsGiven[a].itemID,
                                    allItems), typeof(RPGItem), false);

                            currentlyViewedQuest.rewardsGiven[a].itemID =
                                currentlyViewedQuest.rewardsGiven[a].itemREF != null
                                    ? currentlyViewedQuest.rewardsGiven[a].itemREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsGiven[a].count =
                                DrawHorizontalIntField("Count", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsGiven[a].count);
                            break;
                        }
                        case RPGQuest.QuestRewardType.treePoint:
                        {
                            currentlyViewedQuest.rewardsGiven[a].treePointREF =
                                (RPGTreePoint) EditorGUILayout.ObjectField(
                                    "Tree point",
                                    RPGBuilderUtilities.GetTreePointFromIDEditor(
                                        currentlyViewedQuest.rewardsGiven[a].treePointID, allTreePoints),
                                    typeof(RPGTreePoint), false);

                            currentlyViewedQuest.rewardsGiven[a].treePointID =
                                currentlyViewedQuest.rewardsGiven[a].treePointREF != null
                                    ? currentlyViewedQuest.rewardsGiven[a].treePointREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsGiven[a].count =
                                DrawHorizontalIntField("Count", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsGiven[a].count);
                            break;
                        }
                        case RPGQuest.QuestRewardType.FactionPoint:
                        {
                            currentlyViewedQuest.rewardsGiven[a].factionREF = (RPGFaction) EditorGUILayout.ObjectField(
                                "Faction",
                                RPGBuilderUtilities.GetFactionFromIDEditor(
                                    currentlyViewedQuest.rewardsGiven[a].factionID,
                                    allFactions), typeof(RPGFaction), false);

                            currentlyViewedQuest.rewardsGiven[a].factionID =
                                currentlyViewedQuest.rewardsGiven[a].factionREF != null
                                    ? currentlyViewedQuest.rewardsGiven[a].factionREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsGiven[a].count =
                                DrawHorizontalIntField("Count", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsGiven[a].count);
                            break;
                        }
                        case RPGQuest.QuestRewardType.weaponTemplateEXP:
                        {
                            currentlyViewedQuest.rewardsGiven[a].weaponTemplateREF =
                                (RPGWeaponTemplate) EditorGUILayout.ObjectField("Weapon Template",
                                    RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(
                                        currentlyViewedQuest.rewardsGiven[a].weaponTemplateID, allWeaponTemplates),
                                    typeof(RPGWeaponTemplate), false);

                            currentlyViewedQuest.rewardsGiven[a].weaponTemplateID =
                                currentlyViewedQuest.rewardsGiven[a].weaponTemplateREF != null
                                    ? currentlyViewedQuest.rewardsGiven[a].weaponTemplateREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsGiven[a].Experience =
                                DrawHorizontalIntField("Experience", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsGiven[a].Experience);
                            break;
                        }
                    }
                }

                EditorGUILayout.EndVertical();
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.questModuleSection.showRewardsToPick =
            HandleModuleBanner("REWARDS TO PICK", editorFilters.questModuleSection.showRewardsToPick);
        if (editorFilters.questModuleSection.showRewardsToPick)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Reward", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedQuest.rewardsToPick.Add(new RPGQuest.QuestRewardDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList4 = serialObj.FindProperty("rewardsToPick");
            currentlyViewedQuest.rewardsToPick = GetTargetObjectOfProperty(ThisList4) as List<RPGQuest.QuestRewardDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedQuest.rewardsToPick.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedQuest.rewardsToPick.RemoveAt(a);
                    return;
                }

                GUILayout.Space(10);
                EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(25));
                currentlyViewedQuest.rewardsToPick[a].rewardType =
                    (RPGQuest.QuestRewardType) EditorGUILayout.EnumPopup(
                        currentlyViewedQuest.rewardsToPick[a].rewardType);

                EditorGUILayout.EndHorizontal();
                EditorGUILayout.BeginVertical();

                if (currentlyViewedQuest.rewardsToPick.Count > 0)
                {
                    switch (currentlyViewedQuest.rewardsToPick[a].rewardType)
                    {
                        case RPGQuest.QuestRewardType.currency:
                        {
                            currentlyViewedQuest.rewardsToPick[a].currencyREF =
                                (RPGCurrency) EditorGUILayout.ObjectField(
                                    "Currency",
                                    RPGBuilderUtilities.GetCurrencyFromIDEditor(
                                        currentlyViewedQuest.rewardsToPick[a].currencyID,
                                        allCurrencies), typeof(RPGCurrency), false);

                            currentlyViewedQuest.rewardsToPick[a].currencyID =
                                currentlyViewedQuest.rewardsToPick[a].currencyREF != null
                                    ? currentlyViewedQuest.rewardsToPick[a].currencyREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsToPick[a].count =
                                DrawHorizontalIntField("Count", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsToPick[a].count);
                            break;
                        }
                        case RPGQuest.QuestRewardType.Experience:
                            currentlyViewedQuest.rewardsToPick[a].Experience =
                                DrawHorizontalIntField("Experience", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsToPick[a].Experience);
                            break;
                        case RPGQuest.QuestRewardType.item:
                        {
                            currentlyViewedQuest.rewardsToPick[a].itemREF = (RPGItem) EditorGUILayout.ObjectField(
                                "Item",
                                RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedQuest.rewardsToPick[a].itemID,
                                    allItems), typeof(RPGItem), false);

                            currentlyViewedQuest.rewardsToPick[a].itemID =
                                currentlyViewedQuest.rewardsToPick[a].itemREF != null
                                    ? currentlyViewedQuest.rewardsToPick[a].itemREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsToPick[a].count =
                                DrawHorizontalIntField("Count", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsToPick[a].count);
                            break;
                        }
                        case RPGQuest.QuestRewardType.treePoint:
                        {
                            currentlyViewedQuest.rewardsToPick[a].treePointREF =
                                (RPGTreePoint) EditorGUILayout.ObjectField(
                                    "Tree point",
                                    RPGBuilderUtilities.GetTreePointFromIDEditor(
                                        currentlyViewedQuest.rewardsToPick[a].treePointID, allTreePoints),
                                    typeof(RPGTreePoint), false);

                            currentlyViewedQuest.rewardsToPick[a].treePointID =
                                currentlyViewedQuest.rewardsToPick[a].treePointREF != null
                                    ? currentlyViewedQuest.rewardsToPick[a].treePointREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsToPick[a].count =
                                DrawHorizontalIntField("Count", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsToPick[a].count);
                            break;
                        }
                        case RPGQuest.QuestRewardType.FactionPoint:
                        {
                            currentlyViewedQuest.rewardsToPick[a].factionREF = (RPGFaction) EditorGUILayout.ObjectField(
                                "Faction",
                                RPGBuilderUtilities.GetFactionFromIDEditor(
                                    currentlyViewedQuest.rewardsToPick[a].factionID,
                                    allFactions), typeof(RPGFaction), false);

                            currentlyViewedQuest.rewardsToPick[a].factionID =
                                currentlyViewedQuest.rewardsToPick[a].factionREF != null
                                    ? currentlyViewedQuest.rewardsToPick[a].factionREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsToPick[a].count =
                                DrawHorizontalIntField("Count", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsToPick[a].count);
                            break;
                        }
                        case RPGQuest.QuestRewardType.weaponTemplateEXP:
                        {
                            currentlyViewedQuest.rewardsToPick[a].weaponTemplateREF =
                                (RPGWeaponTemplate) EditorGUILayout.ObjectField("Weapon Template",
                                    RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(
                                        currentlyViewedQuest.rewardsToPick[a].weaponTemplateID, allWeaponTemplates),
                                    typeof(RPGWeaponTemplate), false);

                            currentlyViewedQuest.rewardsToPick[a].weaponTemplateID =
                                currentlyViewedQuest.rewardsToPick[a].weaponTemplateREF != null
                                    ? currentlyViewedQuest.rewardsToPick[a].weaponTemplateREF.ID
                                    : -1;

                            currentlyViewedQuest.rewardsToPick[a].Experience =
                                DrawHorizontalIntField("Experience", "",
                                    smallFieldHeight,
                                    currentlyViewedQuest.rewardsToPick[a].Experience);
                            break;
                        }
                    }
                }

                EditorGUILayout.EndVertical();
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(30);
        }

        serialObj.ApplyModifiedProperties();
        GUILayout.EndScrollView();
    }


    private void DrawMerchantTableView()
    {
        if (currentlyViewedMerchantTable == null)
        {
            if (allMerchantTables.Count == 0)
            {
                CreateNew(AssetType.MerchantTable);
                return;
            }

            currentlyViewedMerchantTable = Instantiate(allMerchantTables[0]) as RPGMerchantTable;

        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedMerchantTable;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.merchantTableModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.merchantTableModuleSection.showBaseInfo);
        if (editorFilters.merchantTableModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedMerchantTable.ID);
            currentlyViewedMerchantTable._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedMerchantTable._name);
            currentlyViewedMerchantTable.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedMerchantTable.displayName);
            currentlyViewedMerchantTable._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_MERCHANT_TABLE_" + currentlyViewedMerchantTable._name);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.merchantTableModuleSection.showItems =
            HandleModuleBanner("ITEMS", editorFilters.merchantTableModuleSection.showItems);
        if (editorFilters.merchantTableModuleSection.showItems)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Item", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedMerchantTable.onSaleItems.Add(new RPGMerchantTable.ON_SALE_ITEMS_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("onSaleItems");
            currentlyViewedMerchantTable.onSaleItems =
                GetTargetObjectOfProperty(ThisList2) as List<RPGMerchantTable.ON_SALE_ITEMS_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedMerchantTable.onSaleItems.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedMerchantTable.onSaleItems.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedMerchantTable.onSaleItems[a].itemREF != null)
                    effectName = currentlyViewedMerchantTable.onSaleItems[a].itemREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedMerchantTable.onSaleItems[a].itemREF = (RPGItem) EditorGUILayout.ObjectField("Item",
                    RPGBuilderUtilities.GetItemFromIDEditor(currentlyViewedMerchantTable.onSaleItems[a].itemID,
                        allItems), typeof(RPGItem), false);

                currentlyViewedMerchantTable.onSaleItems[a].itemID =
                    currentlyViewedMerchantTable.onSaleItems[a].itemREF != null
                        ? currentlyViewedMerchantTable.onSaleItems[a].itemREF.ID
                        : -1;

                currentlyViewedMerchantTable.onSaleItems[a].currencyREF = (RPGCurrency) EditorGUILayout.ObjectField(
                    "Currency",
                    RPGBuilderUtilities.GetCurrencyFromIDEditor(currentlyViewedMerchantTable.onSaleItems[a].currencyID,
                        allCurrencies), typeof(RPGCurrency), false);

                currentlyViewedMerchantTable.onSaleItems[a].currencyID =
                    currentlyViewedMerchantTable.onSaleItems[a].currencyREF != null
                        ? currentlyViewedMerchantTable.onSaleItems[a].currencyREF.ID
                        : -1;

                currentlyViewedMerchantTable.onSaleItems[a].cost = DrawHorizontalIntField("Cost", "",
                    smallFieldHeight,
                    currentlyViewedMerchantTable.onSaleItems[a].cost);

                GUILayout.Space(10);
                if (currentlyViewedMerchantTable.onSaleItems[a].currencyREF != null)
                {
                    if (RPGBuilderUtilities.GetCurrencyFromIDEditor(
                        currentlyViewedMerchantTable.onSaleItems[a].currencyREF.convertToCurrencyID,
                        allCurrencies) != null) continue;
                    if (RPGBuilderUtilities
                            .GetCurrencyFromIDEditor(currentlyViewedMerchantTable.onSaleItems[a].currencyID,
                                allCurrencies).maxValue > 0 &&
                        currentlyViewedMerchantTable.onSaleItems[a].cost > RPGBuilderUtilities
                            .GetCurrencyFromIDEditor(currentlyViewedMerchantTable.onSaleItems[a].currencyID,
                                allCurrencies)
                            .maxValue)
                    {
                        currentlyViewedMerchantTable.onSaleItems[a].cost = RPGBuilderUtilities
                            .GetCurrencyFromIDEditor(currentlyViewedMerchantTable.onSaleItems[a].currencyID,
                                allCurrencies).maxValue - 1;
                    }
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawCurrencyView()
    {
        if (currentlyViewedCurrency == null)
        {
            if (allCurrencies.Count == 0)
            {
                CreateNew(AssetType.Currency);
                return;
            }

            currentlyViewedCurrency = Instantiate(allCurrencies[0]) as RPGCurrency;

        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedCurrency;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.currencyModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.currencyModuleSection.showBaseInfo);
        if (editorFilters.currencyModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedCurrency.icon = DrawIconField(currentlyViewedCurrency.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedCurrency.ID);
            currentlyViewedCurrency._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedCurrency._name);
            currentlyViewedCurrency.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedCurrency.displayName);
            currentlyViewedCurrency._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_CURRENCY_" + currentlyViewedCurrency._name);
            currentlyViewedCurrency.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedCurrency.description);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.currencyModuleSection.showSetupSettings =
            HandleModuleBanner("SETUP SETTINGS", editorFilters.currencyModuleSection.showSetupSettings);
        if (editorFilters.currencyModuleSection.showSetupSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedCurrency.minValue = DrawHorizontalIntField("Min.", "",
                smallFieldHeight,
                currentlyViewedCurrency.minValue);
            currentlyViewedCurrency.maxValue = DrawHorizontalIntField("Max.", "",
                smallFieldHeight,
                currentlyViewedCurrency.maxValue);
            
            if (currentlyViewedCurrency.maxValue < currentlyViewedCurrency.minValue)
                currentlyViewedCurrency.maxValue = currentlyViewedCurrency.minValue;
            if (currentlyViewedCurrency.minValue > currentlyViewedCurrency.maxValue)
                currentlyViewedCurrency.maxValue = currentlyViewedCurrency.minValue;

            currentlyViewedCurrency.baseValue = DrawHorizontalIntField("Starts At", "",
                smallFieldHeight,
                currentlyViewedCurrency.baseValue);
            if (currentlyViewedCurrency.baseValue >= currentlyViewedCurrency.maxValue &&
                currentlyViewedCurrency.maxValue > 0)
                currentlyViewedCurrency.baseValue = currentlyViewedCurrency.maxValue - 1;
            
            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        GUILayout.Space(10);
        editorFilters.currencyModuleSection.showConversion =
            HandleModuleBanner("CONVERSION SETTINGS", editorFilters.currencyModuleSection.showConversion);
        if (editorFilters.currencyModuleSection.showConversion)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedCurrency.AmountToConvert = DrawHorizontalIntField("Amt. For Conversion", "",
                smallFieldHeight,
                currentlyViewedCurrency.AmountToConvert);
            if (currentlyViewedCurrency.AmountToConvert >= currentlyViewedCurrency.maxValue)
                currentlyViewedCurrency.AmountToConvert = currentlyViewedCurrency.maxValue;

            currentlyViewedCurrency.convertToCurrencyREF = (RPGCurrency) EditorGUILayout.ObjectField("To Currency:",
                RPGBuilderUtilities.GetCurrencyFromIDEditor(currentlyViewedCurrency.convertToCurrencyID, allCurrencies),
                typeof(RPGCurrency), false, GUILayout.Height(15));

            currentlyViewedCurrency.convertToCurrencyID = currentlyViewedCurrency.convertToCurrencyREF != null
                ? currentlyViewedCurrency.convertToCurrencyREF.ID
                : -1;

            currentlyViewedCurrency.lowestCurrencyREF = (RPGCurrency) EditorGUILayout.ObjectField("Lowest Currency:",
                RPGBuilderUtilities.GetCurrencyFromIDEditor(currentlyViewedCurrency.lowestCurrencyID, allCurrencies),
                typeof(RPGCurrency), false, GUILayout.Height(15));

            currentlyViewedCurrency.lowestCurrencyID = currentlyViewedCurrency.lowestCurrencyREF != null
                ? currentlyViewedCurrency.lowestCurrencyREF.ID
                : -1;

            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        if (currentlyViewedCurrency.lowestCurrencyREF != null &&
            currentlyViewedCurrency.lowestCurrencyID == currentlyViewedCurrency.ID)
        {
            GUILayout.Space(10);
            editorFilters.currencyModuleSection.showSuperiorCurrencies =
                HandleModuleBanner("SUPERIOR CURRENCIES", editorFilters.currencyModuleSection.showSuperiorCurrencies);
            if (editorFilters.currencyModuleSection.showSuperiorCurrencies)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace, false);
                if (GUILayout.Button("+ Add Currency", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedCurrency.aboveCurrencies.Add(new RPGCurrency.AboveCurrencyDATA());
                }
                EndHorizontalMargin(middleButtonSpace, false);

                var ThisList2 = serialObj.FindProperty("aboveCurrencies");
                currentlyViewedCurrency.aboveCurrencies =
                    GetTargetObjectOfProperty(ThisList2) as List<RPGCurrency.AboveCurrencyDATA>;

                StartHorizontalMargin(bigHorizontalSpace, true);
                for (var a = 0; a < currentlyViewedCurrency.aboveCurrencies.Count; a++)
                {
                    GUILayout.Space(10);
                    var requirementNumber = a + 1;
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                    {
                        currentlyViewedCurrency.aboveCurrencies.RemoveAt(a);
                        return;
                    }

                    var effectName = "";
                    if (currentlyViewedCurrency.aboveCurrencies[a].currencyREF != null)
                        effectName = currentlyViewedCurrency.aboveCurrencies[a].currencyREF._name;
                    EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                    EditorGUILayout.EndHorizontal();
                    currentlyViewedCurrency.aboveCurrencies[a].currencyREF = (RPGCurrency) EditorGUILayout.ObjectField("Currency",
                        RPGBuilderUtilities.GetCurrencyFromIDEditor(
                            currentlyViewedCurrency.aboveCurrencies[a].currencyID,
                            allCurrencies), typeof(RPGCurrency), false);
                    
                        currentlyViewedCurrency.aboveCurrencies[a].currencyID = currentlyViewedCurrency.aboveCurrencies[a].currencyREF != null ?
                            currentlyViewedCurrency.aboveCurrencies[a].currencyREF.ID : -1;
                }
                EndHorizontalMargin(bigHorizontalSpace, true);
            }
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawLevelTemplateView()
    {
        if (currentlyViewedLevelTemplate == null)
        {
            if (allLevelsTemplate.Count == 0)
            {
                CreateNew(AssetType.LevelTemplate);
                return;
            }

            currentlyViewedLevelTemplate = Instantiate(allLevelsTemplate[0]) as RPGLevelsTemplate;

        }
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedLevelTemplate;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.levelTemplateModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.levelTemplateModuleSection.showBaseInfo);
        if (editorFilters.levelTemplateModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedLevelTemplate.ID);
            currentlyViewedLevelTemplate._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedLevelTemplate._name);
            currentlyViewedLevelTemplate._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_LEVEL_TEMPLATE_" + currentlyViewedLevelTemplate._name);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.levelTemplateModuleSection.showTemplate =
            HandleModuleBanner("TEMPLATE", editorFilters.levelTemplateModuleSection.showTemplate);
        if (editorFilters.levelTemplateModuleSection.showTemplate)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            currentlyViewedLevelTemplate.levels =
                DrawHorizontalIntField("Levels", "",
                    smallFieldHeight,
                    currentlyViewedLevelTemplate.levels);
            currentlyViewedLevelTemplate.baseXPValue =
                DrawHorizontalIntField("Base XP", "",
                    smallFieldHeight,
                    currentlyViewedLevelTemplate.baseXPValue);
            currentlyViewedLevelTemplate.increaseAmount =
                DrawHorizontalFloatField("Increase by %", "",
                    smallFieldHeight,
                    currentlyViewedLevelTemplate.increaseAmount);

            GUILayout.Space(10);
            if (GUILayout.Button("Click to Generate", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedLevelTemplate.allLevels = new List<RPGLevelsTemplate.LEVELS_DATA>();
                float curXP = currentlyViewedLevelTemplate.baseXPValue;

                var curIncreaseAmount = currentlyViewedLevelTemplate.increaseAmount / 100;

                for (var i = 0; i < currentlyViewedLevelTemplate.levels; i++)
                {
                    var newLevel = new RPGLevelsTemplate.LEVELS_DATA();
                    var currentLevel = i + 1;

                    if (i > 0) curXP += curXP * curIncreaseAmount;

                    if (curXP > 2000000000) curXP = 2000000000;

                    newLevel.XPRequired = (int) curXP;
                    newLevel.levelName = "" + currentLevel;
                    newLevel.level = currentLevel;

                    currentlyViewedLevelTemplate.allLevels.Add(newLevel);
                }
            }

            GUILayout.Space(10);

            var serialProp = serialObj.FindProperty("allLevels");
            EditorGUILayout.PropertyField(serialProp, true);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void AssetActions (UnityEngine.Object dirtyObject, bool refresh)
    {
        EditorUtility.DisplayProgressBar("RPG Builder Editor", "Processing Data", 0.5f);
        EditorUtility.SetDirty(dirtyObject);
        AssetDatabase.SaveAssets();
        if(refresh) AssetDatabase.Refresh();
    }

    private int HandleAssetIDSaving (AssetIDHandler.ASSET_TYPE_ID AssetIDType)
    {
        var assetID = -1;
        var currentIDFile = DataSavingSystem.LoadAssetID(AssetIDType);
        if (currentIDFile != null)
        {
            assetID = currentIDFile.id;
            assetID++;
            currentIDFile.id = assetID;
            DataSavingSystem.SaveAssetID(currentIDFile);
        }
        else
        {
            var file = new AssetIDHandler(AssetIDType, 0);
            DataSavingSystem.SaveAssetID(file);
            assetID = 0;
        }
        return assetID;
    }

    private void AssetActionsAfterCreate ()
    {
        EditorUtility.DisplayProgressBar("RPG Builder Editor", "Processing Data", 0.5f);
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
    }

    private void RequestFilterCheck()
    {
        targetFiltersNeedChecking = true;
        updateFiltersNeedChecking = true;
        cachedRequirementResults = null;
    }
    private void RequestElementListRedraw()
    {
        cachedRequirementResults = null;
        updateElementList = true;
    }

    private void SaveAsset(string elementName, string fileName, UnityEngine.Object savedObject, bool isInjectSave)
    {
        if (elementName == null || elementName.Length <= 0 || fileName == null || fileName.Length <= 0) return;
        var directory = "";
        var AssetIDType = AssetIDHandler.ASSET_TYPE_ID.ability;
        UnityEngine.Object existingELEMENT = null;
        switch (savedObject.GetType().ToString())
        {
            case "RPGAbility":
                
                directory = "Abilities/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.ability;
                var curViewedAbility = (RPGAbility)savedObject;
                existingELEMENT = (RPGAbility)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGAbility));
                
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGAbility)existingELEMENT;
                    if (isInjectSave)
                    {
                        cachedFileName = thisElement._fileName;
                        thisElement.ID = -1;
                    }
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedAbility.ID = thisElement.ID;
                    thisElement.updateThis(curViewedAbility);

                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedAbility._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedAbility._fileName);
                        AssetActions(thisElement, true);
                        LoadAbilities();
                        SelectAbility(curViewElementIndex);
                    }
                }
                else
                {
                    if (isInjectSave) return;
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedAbility.ID = ID;
                    AssetDatabase.CreateAsset(curViewedAbility, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedAbility._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadAbilities();
                    SelectNewAbility(curViewedAbility._fileName);
                }
                break;
            case "RPGEffect":
                directory = "Effects/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.effect;
                var curViewedEffect = (RPGEffect)savedObject;
                existingELEMENT = (RPGEffect)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGEffect));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGEffect)existingELEMENT;
                    if (isInjectSave)
                    {
                        cachedFileName = thisElement._fileName;
                        thisElement.ID = -1;
                    }
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedEffect.ID = thisElement.ID;
                    thisElement.updateThis(curViewedEffect);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedEffect._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedEffect._fileName);
                        AssetActions(thisElement, true);
                        LoadEffects();
                        SelectEffect(curViewElementIndex);
                    }
                }
                else
                {
                    if (isInjectSave) return;
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedEffect.ID = ID;
                    AssetDatabase.CreateAsset(curViewedEffect, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedEffect._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadEffects();
                    SelectNewEffect(curViewedEffect._fileName);
                }
                break;
            case "RPGNpc":
                directory = "NPCs/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.npc;
                var curViewedNPC = (RPGNpc)savedObject;
                existingELEMENT = (RPGNpc)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGNpc));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGNpc)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedNPC.ID = thisElement.ID;
                    thisElement.updateThis(curViewedNPC);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedNPC._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedNPC._fileName);
                        AssetActions(thisElement, true);
                        LoadNPCs();
                        SelectNPC(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedNPC.ID = ID;
                    AssetDatabase.CreateAsset(curViewedNPC, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedNPC._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadNPCs();
                    SelectNewNPC(curViewedNPC._fileName);
                }
                break;
            case "RPGStat":
                directory = "Stats/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.stat;
                var curViewedStat = (RPGStat)savedObject;
                existingELEMENT = (RPGStat)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGStat));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGStat)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedStat.ID = thisElement.ID;
                    thisElement.updateThis(curViewedStat);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedStat._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedStat._fileName);
                        AssetActions(thisElement, true);
                        LoadStats();
                        SelectStat(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedStat.ID = ID;
                    AssetDatabase.CreateAsset(curViewedStat, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedStat._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadStats();
                    SelectNewStat(curViewedStat._fileName);
                }
                break;
            case "RPGTreePoint":
                directory = "TreePoints/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.treePoint;
                var curViewedTreePoint = (RPGTreePoint)savedObject;
                existingELEMENT = (RPGTreePoint)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGTreePoint));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGTreePoint)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedTreePoint.ID = thisElement.ID;
                    thisElement.updateThis(curViewedTreePoint);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedTreePoint._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedTreePoint._fileName);
                        AssetActions(thisElement, true);
                        LoadTreePoints();
                        SelectTreePoint(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedTreePoint.ID = ID;
                    AssetDatabase.CreateAsset(curViewedTreePoint, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedTreePoint._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadTreePoints();
                    SelectNewTreePoint(curViewedTreePoint._fileName);
                }
                break;
            case "RPGItem":
                directory = "Items/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.item;
                var curViewedItem = (RPGItem)savedObject;
                existingELEMENT = (RPGItem)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGItem));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGItem)existingELEMENT;
                    if (thisElement.ID == -1)
                    {
                        thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    }
                    curViewedItem.ID = thisElement.ID;
                    if (curViewedItem.itemType != "ARMOR")
                    {
                        curViewedItem.armorType = "";
                        curViewedItem.equipmentSlot = "";
                    }
                    if (curViewedItem.itemType != "WEAPON")
                    {
                        curViewedItem.weaponType = "";
                        curViewedItem.slotType = "";
                        curViewedItem.weaponModel = null;
                    }
                    if (curViewedItem.itemType != "ARMOR" && curViewedItem.itemType != "WEAPON")
                    {
                        curViewedItem.itemModelName = "";
                    }
                    thisElement.updateThis(curViewedItem);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedItem._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedItem._fileName);
                        AssetActions(thisElement, true);
                        LoadItems();
                        SelectItem(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedItem.ID = ID;
                    AssetDatabase.CreateAsset(curViewedItem, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedItem._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadItems();
                    SelectNewItem(curViewedItem._fileName);
                }
                break;
            case "RPGSkill":
                directory = "Skills/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.skill;
                var curViewedSkill = (RPGSkill)savedObject;
                existingELEMENT = (RPGSkill)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGSkill));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGSkill)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedSkill.ID = thisElement.ID;
                    thisElement.updateThis(curViewedSkill);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedSkill._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedSkill._fileName);
                        AssetActions(thisElement, true);
                        LoadSkills();
                        SelectSkill(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedSkill.ID = ID;
                    AssetDatabase.CreateAsset(curViewedSkill, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedSkill._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadSkills();
                    SelectNewSkill(curViewedSkill._fileName);
                }
                break;
            case "RPGLevelsTemplate":
                directory = "LevelsTemplate/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.levelTemplate;
                var curViewedLevelTemplate = (RPGLevelsTemplate)savedObject;
                existingELEMENT = (RPGLevelsTemplate)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGLevelsTemplate));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGLevelsTemplate)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedLevelTemplate.ID = thisElement.ID;
                    thisElement.updateThis(curViewedLevelTemplate);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedLevelTemplate._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedLevelTemplate._fileName);
                        AssetActions(thisElement, true);
                        LoadLevelsTemplate();
                        SelectLevelTemplate(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedLevelTemplate.ID = ID;
                    AssetDatabase.CreateAsset(curViewedLevelTemplate, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedLevelTemplate._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadLevelsTemplate();
                    SelectNewLevelTemplate(curViewedLevelTemplate._fileName);
                }
                break;
            case "RPGRace":
                directory = "Races/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.race;
                var curViewedRace = (RPGRace)savedObject;
                existingELEMENT = (RPGRace)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGRace));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGRace)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedRace.ID = thisElement.ID;
                    thisElement.updateThis(curViewedRace);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedRace._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedRace._fileName);
                        AssetActions(thisElement, true);
                        LoadRaces();
                        SelectRace(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedRace.ID = ID;
                    AssetDatabase.CreateAsset(curViewedRace, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedRace._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadRaces();
                    SelectNewRace(curViewedRace._fileName);
                }
                break;
            case "RPGClass":
                directory = "Classes/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID._class;
                var curViewedClass = (RPGClass)savedObject;
                existingELEMENT = (RPGClass)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGClass));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGClass)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedClass.ID = thisElement.ID;
                    thisElement.updateThis(curViewedClass);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedClass._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedClass._fileName);
                        AssetActions(thisElement, true);
                        LoadClasses();
                        SelectClass(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedClass.ID = ID;
                    AssetDatabase.CreateAsset(curViewedClass, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedClass._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadClasses();
                    SelectNewClass(curViewedClass._fileName);
                }
                break;
            case "RPGLootTable":
                directory = "LootTables/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.lootTable;
                var curViewedLootTable = (RPGLootTable)savedObject;
                existingELEMENT = (RPGLootTable)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGLootTable));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGLootTable)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedLootTable.ID = thisElement.ID;
                    thisElement.updateThis(curViewedLootTable);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedLootTable._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedLootTable._fileName);
                        AssetActions(thisElement, true);
                        LoadLootTables();
                        SelectLootTable(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedLootTable.ID = ID;
                    AssetDatabase.CreateAsset(curViewedLootTable, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedLootTable._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadLootTables();
                    SelectNewLootTable(curViewedLootTable._fileName);
                }
                break;
            case "RPGMerchantTable":
                directory = "MerchantTables/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.merchantTable;
                var curViewedMerchantTable = (RPGMerchantTable)savedObject;
                existingELEMENT = (RPGMerchantTable)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGMerchantTable));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGMerchantTable)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedMerchantTable.ID = thisElement.ID;
                    thisElement.updateThis(curViewedMerchantTable);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedMerchantTable._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedMerchantTable._fileName);
                        AssetActions(thisElement, true);
                        LoadMerchantTables();
                        SelectMerchantTable(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedMerchantTable.ID = ID;
                    AssetDatabase.CreateAsset(curViewedMerchantTable, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedMerchantTable._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadMerchantTables();
                    SelectNewMerchantTable(curViewedMerchantTable._fileName);
                }
                break;
            case "RPGCurrency":
                directory = "Currencies/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.currency;
                var curViewedCurrency = (RPGCurrency)savedObject;
                existingELEMENT = (RPGCurrency)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGCurrency));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGCurrency)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedCurrency.ID = thisElement.ID;
                    thisElement.updateThis(curViewedCurrency);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedCurrency._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedCurrency._fileName);
                        AssetActions(thisElement, true);
                        LoadCurrencies();
                        SelectCurrency(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedCurrency.ID = ID;
                    AssetDatabase.CreateAsset(curViewedCurrency, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedCurrency._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadCurrencies();
                    SelectNewCurrency(curViewedCurrency._fileName);
                }
                break;
            case "RPGCraftingRecipe":
                directory = "CraftingRecipes/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.craftingRecipe;
                var curViewedCraftingRecipe = (RPGCraftingRecipe)savedObject;
                existingELEMENT = (RPGCraftingRecipe)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGCraftingRecipe));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGCraftingRecipe)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedCraftingRecipe.ID = thisElement.ID;
                    thisElement.updateThis(curViewedCraftingRecipe);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedCraftingRecipe._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedCraftingRecipe._fileName);
                        AssetActions(thisElement, true);
                        LoadCraftingRecipes();
                        SelectCraftingRecipe(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedCraftingRecipe.ID = ID;
                    AssetDatabase.CreateAsset(curViewedCraftingRecipe, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedCraftingRecipe._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadCraftingRecipes();
                    SelectNewCraftingRecipe(curViewedCraftingRecipe._fileName);
                }
                break;
            case "RPGCraftingStation":
                directory = "CraftingStations/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.craftingStation;
                var curViewedCraftingStation = (RPGCraftingStation)savedObject;
                existingELEMENT = (RPGCraftingStation)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGCraftingStation));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGCraftingStation)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedCraftingStation.ID = thisElement.ID;
                    thisElement.updateThis(curViewedCraftingStation);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedCraftingStation._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedCraftingStation._fileName);
                        AssetActions(thisElement, true);
                        LoadCraftingStations();
                        SelectCraftingStation(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedCraftingStation.ID = ID;
                    AssetDatabase.CreateAsset(curViewedCraftingStation, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedCraftingStation._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadCraftingStations();
                    SelectNewCraftingStation(curViewedCraftingStation._fileName);
                }
                break;
            case "RPGTalentTree":
                directory = "TalentTrees/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.talentTree;
                var curViewedTalentTree = (RPGTalentTree)savedObject;
                existingELEMENT = (RPGTalentTree)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGTalentTree));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGTalentTree)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedTalentTree.ID = thisElement.ID;
                    thisElement.updateThis(curViewedTalentTree);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedTalentTree._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedTalentTree._fileName);
                        AssetActions(thisElement, true);
                        LoadTalentTrees();
                        SelectTalentTree(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedTalentTree.ID = ID;
                    AssetDatabase.CreateAsset(curViewedTalentTree, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedTalentTree._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadTalentTrees();
                    SelectNewTalentTree(curViewedTalentTree._fileName);
                }
                break;
            case "RPGBonus":
                directory = "Bonuses/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.bonus;
                var curViewedBonus = (RPGBonus)savedObject;
                existingELEMENT = (RPGBonus)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGBonus));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGBonus)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedBonus.ID = thisElement.ID;
                    thisElement.updateThis(curViewedBonus);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedBonus._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedBonus._fileName);
                        AssetActions(thisElement, true);
                        LoadBonuses();
                        SelectBonus(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedBonus.ID = ID;
                    AssetDatabase.CreateAsset(curViewedBonus, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedBonus._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadBonuses();
                    SelectNewBonus(curViewedBonus._fileName);
                }
                break;
            case "RPGTask":
                directory = "Tasks/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.task;
                var curViewedTask = (RPGTask)savedObject;
                existingELEMENT = (RPGTask)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGTask));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGTask)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedTask.ID = thisElement.ID;
                    thisElement.updateThis(curViewedTask);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedTask._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedTask._fileName);
                        AssetActions(thisElement, true);
                        LoadTasks();
                        SelectTask(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedTask.ID = ID;
                    AssetDatabase.CreateAsset(curViewedTask, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedTask._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadTasks();
                    SelectNewTask(curViewedTask._fileName);
                }
                break;
            case "RPGQuest":
                directory = "Quests/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.quest;
                var curViewedQuest = (RPGQuest)savedObject;
                existingELEMENT = (RPGQuest)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGQuest));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGQuest)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedQuest.ID = thisElement.ID;
                    thisElement.updateThis(curViewedQuest);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedQuest._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedQuest._fileName);
                        AssetActions(thisElement, true);
                        LoadQuests();
                        SelectQuest(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedQuest.ID = ID;
                    AssetDatabase.CreateAsset(curViewedQuest, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedQuest._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadQuests();
                    SelectNewQuest(curViewedQuest._fileName);
                }
                break;
            case "RPGWorldPosition":
                directory = "WorldPositions/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.worldPosition;
                var curViewedWorldPosition = (RPGWorldPosition)savedObject;
                existingELEMENT = (RPGWorldPosition)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGWorldPosition));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGWorldPosition)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedWorldPosition.ID = thisElement.ID;
                    thisElement.updateThis(curViewedWorldPosition);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedWorldPosition._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedWorldPosition._fileName);
                        AssetActions(thisElement, true);
                        LoadWorldPositions();
                        SelectWorldPosition(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedWorldPosition.ID = ID;
                    AssetDatabase.CreateAsset(curViewedWorldPosition, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedWorldPosition._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadWorldPositions();
                    SelectNewWorldPosition(curViewedWorldPosition._fileName);
                }
                break;
            case "RPGResourceNode":
                directory = "ResourceNodes/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.resourceNode;
                var curViewedResourceNode = (RPGResourceNode)savedObject;
                existingELEMENT = (RPGResourceNode)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGResourceNode));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGResourceNode)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedResourceNode.ID = thisElement.ID;
                    thisElement.updateThis(curViewedResourceNode);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedResourceNode._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedResourceNode._fileName);
                        AssetActions(thisElement, true);
                        LoadResourceNodes();
                        SelectResourceNode(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedResourceNode.ID = ID;
                    AssetDatabase.CreateAsset(curViewedResourceNode, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedResourceNode._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadResourceNodes();
                    SelectNewResourceNode(curViewedResourceNode._fileName);
                }
                break;
            case "RPGGameScene":
                directory = "GameScenes/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.gameScene;
                var curViewedGameScene = (RPGGameScene)savedObject;
                existingELEMENT = (RPGGameScene)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGGameScene));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGGameScene)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedGameScene.ID = thisElement.ID;
                    thisElement.updateThis(curViewedGameScene);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedGameScene._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedGameScene._fileName);
                        AssetActions(thisElement, true);
                        LoadGameScenes();
                        SelectGameScene(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedGameScene.ID = ID;
                    AssetDatabase.CreateAsset(curViewedGameScene, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedGameScene._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadGameScenes();
                    SelectNewGameScene(curViewedGameScene._fileName);
                }
                break;
            case "RPGGearSet":
                directory = "GearSets/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.gearSet;
                var curViewedGearSet = (RPGGearSet)savedObject;
                existingELEMENT = (RPGGearSet)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGGearSet));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGGearSet)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedGearSet.ID = thisElement.ID;
                    thisElement.updateThis(curViewedGearSet);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedGearSet._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedGearSet._fileName);
                        AssetActions(thisElement, true);
                        LoadGearSet();
                        SelectGearSet(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedGearSet.ID = ID;
                    AssetDatabase.CreateAsset(curViewedGearSet, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedGearSet._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadGearSet();
                    SelectNewGearSet(curViewedGearSet._fileName);
                }
                break;
            case "RPGEnchantment":
                directory = "Enchantments/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.enchantment;
                var curViewedEnchantment = (RPGEnchantment)savedObject;
                existingELEMENT = (RPGEnchantment)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGEnchantment));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGEnchantment)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedEnchantment.ID = thisElement.ID;
                    thisElement.updateThis(curViewedEnchantment);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedEnchantment._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedEnchantment._fileName);
                        AssetActions(thisElement, true);
                        LoadEnchantments();
                        SelectEnchantment(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedEnchantment.ID = ID;
                    AssetDatabase.CreateAsset(curViewedEnchantment, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedEnchantment._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadEnchantments();
                    SelectNewEnchantment(curViewedEnchantment._fileName);
                }
                break;
            case "RPGSpellbook":
                directory = "Spellbooks/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.spellbook;
                var curViewedSpellbook = (RPGSpellbook)savedObject;
                existingELEMENT = (RPGSpellbook)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGSpellbook));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGSpellbook)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedSpellbook.ID = thisElement.ID;
                    thisElement.updateThis(curViewedSpellbook);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedSpellbook._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedSpellbook._fileName);
                        AssetActions(thisElement, true);
                        LoadSpellbooks();
                        SelectSpellbook(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedSpellbook.ID = ID;
                    AssetDatabase.CreateAsset(curViewedSpellbook, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedSpellbook._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadSpellbooks();
                    SelectNewSpellbook(curViewedSpellbook._fileName);
                }
                break;
            case "RPGFaction":
                directory = "Factions/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.faction;
                var curViewedFaction = (RPGFaction)savedObject;
                existingELEMENT = (RPGFaction)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGFaction));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGFaction)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedFaction.ID = thisElement.ID;
                    thisElement.updateThis(curViewedFaction);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedFaction._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedFaction._fileName);
                        AssetActions(thisElement, true);
                        LoadFactions();
                        SelectFaction(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedFaction.ID = ID;
                    AssetDatabase.CreateAsset(curViewedFaction, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedFaction._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadFactions();
                    SelectNewFaction(curViewedFaction._fileName);
                }
                break;
            case "RPGWeaponTemplate":
                directory = "WeaponTemplates/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.weaponTemplate;
                var curViewedWeaponTemplate = (RPGWeaponTemplate)savedObject;
                existingELEMENT = (RPGWeaponTemplate)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGWeaponTemplate));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGWeaponTemplate)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedWeaponTemplate.ID = thisElement.ID;
                    thisElement.updateThis(curViewedWeaponTemplate);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedWeaponTemplate.fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedWeaponTemplate.fileName);
                        AssetActions(thisElement, true);
                        LoadWeaponTemplates();
                        SelectWeaponTemplate(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedWeaponTemplate.ID = ID;
                    AssetDatabase.CreateAsset(curViewedWeaponTemplate, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedWeaponTemplate.fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadWeaponTemplates();
                    SelectNewWeaponTemplate(curViewedWeaponTemplate.fileName);
                }
                break;
            case "RPGDialogue":
                directory = "Dialogues/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.dialogue;
                var curViewedDialogue = (RPGDialogue)savedObject;
                existingELEMENT = (RPGDialogue)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGDialogue));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGDialogue)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedDialogue.ID = thisElement.ID;
                    thisElement.updateThis(curViewedDialogue);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedDialogue._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedDialogue._fileName);
                        AssetActions(thisElement, true);
                        LoadDialogues();
                        SelectDialogue(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedDialogue.ID = ID;
                    AssetDatabase.CreateAsset(curViewedDialogue, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedDialogue._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadDialogues();
                    SelectNewDialogue(curViewedDialogue._fileName);
                }
                break;
            case "RPGGameModifier":
                directory = "GameModifiers/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.gameModifier;
                var curViewedGameModifier = (RPGGameModifier)savedObject;
                existingELEMENT = (RPGGameModifier)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGGameModifier));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGGameModifier)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedGameModifier.ID = thisElement.ID;
                    thisElement.updateThis(curViewedGameModifier);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedGameModifier._fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedGameModifier._fileName);
                        AssetActions(thisElement, true);
                        LoadGameModifiers();
                        SelectGameModifier(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedGameModifier.ID = ID;
                    AssetDatabase.CreateAsset(curViewedGameModifier, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedGameModifier._fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadGameModifiers();
                    SelectNewGameModifier(curViewedGameModifier._fileName);
                }
                break;
            
            case "RPGSpecies":
                directory = "Species/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.species;
                var curViewedSpecies = (RPGSpecies)savedObject;
                existingELEMENT = (RPGSpecies)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGSpecies));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGSpecies)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedSpecies.ID = thisElement.ID;
                    thisElement.updateThis(curViewedSpecies);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedSpecies.fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedSpecies.fileName);
                        AssetActions(thisElement, true);
                        LoadSpecies();
                        SelectSpecies(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedSpecies.ID = ID;
                    AssetDatabase.CreateAsset(curViewedSpecies, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedSpecies.fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadSpecies();
                    SelectNewSpecies(curViewedSpecies.fileName);
                }
                break;
            
            case "RPGCombo":
                directory = "Combos/";
                AssetIDType = AssetIDHandler.ASSET_TYPE_ID.combo;
                var curViewedCombo = (RPGCombo)savedObject;
                existingELEMENT = (RPGCombo)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName + ".asset", typeof(RPGCombo));
                if (existingELEMENT != null)
                {
                    var thisElement = (RPGCombo)existingELEMENT;
                    if (thisElement.ID == -1) thisElement.ID = HandleAssetIDSaving(AssetIDType);
                    curViewedCombo.ID = thisElement.ID;
                    thisElement.updateThis(curViewedCombo);
                    if (!isInjectSave)
                    {
                        EditorUtility.SetDirty(thisElement);
                        if (cachedFileName != curViewedCombo.fileName)
                            AssetDatabase.RenameAsset(
                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + cachedFileName +
                                ".asset", curViewedCombo.fileName);
                        AssetActions(thisElement, true);
                        LoadCombos();
                        SelectCombo(curViewElementIndex);
                    }
                }
                else
                {
                    var ID = HandleAssetIDSaving(AssetIDType);
                    curViewedCombo.ID = ID;
                    AssetDatabase.CreateAsset(curViewedCombo, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + directory + curViewedCombo.fileName + ".asset");
                    AssetActionsAfterCreate();
                    LoadCombos();
                    SelectNewCombo(curViewedCombo.fileName);
                }
                break;
        }
        
        EditorUtility.ClearProgressBar();
    }


    private void Save(AssetType ASSET_TYPE)
    {
        if (EditorApplication.isCompiling)
        {
            Debug.LogError("You cannot interact with the RPG Builder while the editor is compiling");
            return;
        }
        
        switch (ASSET_TYPE)
        {
            case AssetType.Ability:
                SaveAsset(currentlyViewedAbility._name, currentlyViewedAbility._fileName, currentlyViewedAbility, false);
                break;
            case AssetType.Effect:
                SaveAsset(currentlyViewedEffect._name, currentlyViewedEffect._fileName, currentlyViewedEffect, false);
                break;
            case AssetType.NPC:
                if (currentlyViewedNPC.factionID != -1)
                {
                    SaveAsset(currentlyViewedNPC._name, currentlyViewedNPC._fileName, currentlyViewedNPC, false);
                }
                else
                {
                    EditorUtility.DisplayDialog("Warning", "A Faction is required", "OK");
                }
                break;
            case AssetType.Stat:
                SaveAsset(currentlyViewedStat._name, currentlyViewedStat._fileName, currentlyViewedStat, false);
                break;
            case AssetType.TreePoint:
                SaveAsset(currentlyViewedTreePoint._name, currentlyViewedTreePoint._fileName, currentlyViewedTreePoint, false);
                break;
            case AssetType.Item:
                SaveAsset(currentlyViewedItem._name, currentlyViewedItem._fileName, currentlyViewedItem, false);
                break;
            case AssetType.Skill:
                SaveAsset(currentlyViewedSkill._name, currentlyViewedSkill._fileName, currentlyViewedSkill, false);
                break;
            case AssetType.LevelTemplate:
                SaveAsset(currentlyViewedLevelTemplate._name, currentlyViewedLevelTemplate._fileName, currentlyViewedLevelTemplate, false);
                break;
            case AssetType.Race:
                if (currentlyViewedRace.factionID != -1)
                {
                    SaveAsset(currentlyViewedRace._name, currentlyViewedRace._fileName, currentlyViewedRace, false);
                }
                else
                {
                    EditorUtility.DisplayDialog("Warning", "A Faction is required", "OK");
                }
                break;
            case AssetType.Class:
                SaveAsset(currentlyViewedClass._name, currentlyViewedClass._fileName, currentlyViewedClass, false);
                break;
            case AssetType.LootTable:
                SaveAsset(currentlyViewedLootTable._name, currentlyViewedLootTable._fileName, currentlyViewedLootTable, false);
                break;
            case AssetType.MerchantTable:
                SaveAsset(currentlyViewedMerchantTable._name, currentlyViewedMerchantTable._fileName, currentlyViewedMerchantTable, false);
                break;
            case AssetType.Currency:
                SaveAsset(currentlyViewedCurrency._name, currentlyViewedCurrency._fileName, currentlyViewedCurrency, false);
                break;
            case AssetType.CraftingRecipe:
                SaveAsset(currentlyViewedCraftingRecipe._name, currentlyViewedCraftingRecipe._fileName, currentlyViewedCraftingRecipe, false);
                break;
            case AssetType.CraftingStation:
                SaveAsset(currentlyViewedCraftingStation._name, currentlyViewedCraftingStation._fileName, currentlyViewedCraftingStation, false);
                break;
            case AssetType.TalentTree:
                SaveAsset(currentlyViewedTalentTree._name, currentlyViewedTalentTree._fileName, currentlyViewedTalentTree, false);
                break;
            case AssetType.Bonus:
                SaveAsset(currentlyViewedBonus._name, currentlyViewedBonus._fileName, currentlyViewedBonus, false);
                break;
            case AssetType.Task:
                SaveAsset(currentlyViewedTask._name, currentlyViewedTask._fileName, currentlyViewedTask, false);
                break;
            case AssetType.Quest:
                SaveAsset(currentlyViewedQuest._name, currentlyViewedQuest._fileName, currentlyViewedQuest, false);
                break;
            case AssetType.WorldPosition:
                SaveAsset(currentlyViewedWorldPosition._name, currentlyViewedWorldPosition._fileName, currentlyViewedWorldPosition, false);
                break;
            case AssetType.ResourceNode:
                SaveAsset(currentlyViewedResourceNode._name, currentlyViewedResourceNode._fileName, currentlyViewedResourceNode, false);
                break;
            case AssetType.GameScene:
                SaveAsset(currentlyViewedGameScene._name, currentlyViewedGameScene._fileName, currentlyViewedGameScene, false);
                break;
            case AssetType.GearSet:
                SaveAsset(currentlyViewedGearSet._name, currentlyViewedGearSet._fileName, currentlyViewedGearSet, false);
                break;
            case AssetType.Enchantment:
                SaveAsset(currentlyViewedEnchantment._name, currentlyViewedEnchantment._fileName, currentlyViewedEnchantment, false);
                break;
            case AssetType.Spellbook:
                SaveAsset(currentlyViewedSpellbook._name, currentlyViewedSpellbook._fileName, currentlyViewedSpellbook, false);
                break;
            case AssetType.Faction:
                SaveAsset(currentlyViewedFaction._name, currentlyViewedFaction._fileName, currentlyViewedFaction, false);
                break;
            case AssetType.WeaponTemplate:
                SaveAsset(currentlyViewedWeaponTemplate._name, currentlyViewedWeaponTemplate.fileName, currentlyViewedWeaponTemplate, false);
                break;
            case AssetType.Dialogue:
                SaveAsset(currentlyViewedDialogue._name, currentlyViewedDialogue._fileName, currentlyViewedDialogue, false);
                break;
            case AssetType.GameModifier:
                SaveAsset(currentlyViewedGameModifier._name, currentlyViewedGameModifier._fileName, currentlyViewedGameModifier, false);
                break;
            case AssetType.Species:
                SaveAsset(currentlyViewedSpecies._name, currentlyViewedSpecies.fileName, currentlyViewedSpecies, false);
                break;
            case AssetType.Combo:
                SaveAsset(currentlyViewedCombo._name, currentlyViewedCombo.fileName, currentlyViewedCombo, false);
                break;
            case AssetType.CombatSettings:
                var existingCombatSettings = (RPGCombatDATA)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "CombatSettings" + ".asset", typeof(RPGCombatDATA));
                if (existingCombatSettings != null)
                {
                    existingCombatSettings.updateThis(combatSettings);
                    AssetActions(existingCombatSettings, true);
                    LoadSettings();
                }
                else
                {
                    AssetDatabase.CreateAsset(combatSettings, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "CombatSettings" + ".asset");
                    AssetActionsAfterCreate();
                    LoadSettings();
                }
                EditorUtility.ClearProgressBar();
                break;
            case AssetType.ItemSettings:
                var existingItemSettings = (RPGItemDATA)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "ItemSettings" + ".asset", typeof(RPGItemDATA));
                if (existingItemSettings != null)
                {
                    existingItemSettings.updateThis(itemSettings);
                    AssetActions(existingItemSettings, true);
                    LoadSettings();
                }
                else
                {
                    AssetDatabase.CreateAsset(itemSettings, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "ItemSettings" + ".asset");
                    AssetActionsAfterCreate();
                    LoadSettings();
                }
                EditorUtility.ClearProgressBar();
                break;
            case AssetType.GeneralSettings:
                var existingGeneralSettings = (RPGGeneralDATA)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "GeneralSettings" + ".asset", typeof(RPGGeneralDATA));
                if (existingGeneralSettings != null)
                {
                    existingGeneralSettings.updateThis(generalSettings);
                    AssetActions(existingGeneralSettings, true);
                    LoadSettings();
                }
                else
                {
                    AssetDatabase.CreateAsset(combatSettings, editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "GeneralSettings" + ".asset");
                    AssetActionsAfterCreate();
                    LoadSettings();
                }
                EditorUtility.ClearProgressBar();
                break;
            case AssetType.EditorSettings:
                if (editorDATA != null)
                {
                    EditorUtility.DisplayProgressBar("RPG Builder Editor", "Processing Data", 0.5f);
                    EditorUtility.SetDirty(editorDATA);
                    AssetDatabase.SaveAssets();
                    AssetDatabase.Refresh();
                }
                else
                {
                    Debug.LogError("Cannot find RPGBuilderEditorData");
                }
                EditorUtility.ClearProgressBar();
                break;
        }

        cachedElementListScrollPosition = elementListScrollPosition;
        RequestFilterCheck();
        RequestElementListRedraw();
    }

    private void CreateNew(AssetType ASSET_TYPE)
    {
        if (EditorApplication.isCompiling)
        { 
            Debug.LogError("You cannot interact with the RPG Builder while the editor is compiling");
            return;
        }
        if(currentlyViewedAbility!=null)currentlyViewedAbility.ranks.Clear();
        if(currentlyViewedEffect!=null)currentlyViewedEffect.ranks.Clear();
        if(currentlyViewedResourceNode!=null)currentlyViewedResourceNode.ranks.Clear();
        if(currentlyViewedCraftingRecipe!=null)currentlyViewedCraftingRecipe.ranks.Clear();
        if(currentlyViewedBonus!=null)currentlyViewedBonus.ranks.Clear();
        switch (ASSET_TYPE)
        {
            case AssetType.Ability:
                currentlyViewedAbility = CreateInstance<RPGAbility>();
                break;
            case AssetType.Effect:
                currentlyViewedEffect = CreateInstance<RPGEffect>();
                break;
            case AssetType.Item:
                currentlyViewedItem = CreateInstance<RPGItem>();
                break;
            case AssetType.NPC:
                currentlyViewedNPC = CreateInstance<RPGNpc>();
                break;
            case AssetType.Stat:
                currentlyViewedStat = CreateInstance<RPGStat>();
                break;
            case AssetType.Skill:
                currentlyViewedSkill = CreateInstance<RPGSkill>();
                break;
            case AssetType.LevelTemplate:
                currentlyViewedLevelTemplate = CreateInstance<RPGLevelsTemplate>();
                break;
            case AssetType.Race:
                currentlyViewedRace = CreateInstance<RPGRace>();
                break;
            case AssetType.Class:
                currentlyViewedClass = CreateInstance<RPGClass>();
                break;
            case AssetType.TalentTree:
                tempNodeLIst.Clear();
                currentlyViewedTalentTree = CreateInstance<RPGTalentTree>();
                break;
            case AssetType.TreePoint:
                currentlyViewedTreePoint = CreateInstance<RPGTreePoint>();
                break;
            case AssetType.LootTable:
                currentlyViewedLootTable = CreateInstance<RPGLootTable>();
                break;
            case AssetType.WorldPosition:
                currentlyViewedWorldPosition = CreateInstance<RPGWorldPosition>();
                break;
            case AssetType.MerchantTable:
                currentlyViewedMerchantTable = CreateInstance<RPGMerchantTable>();
                break;
            case AssetType.Currency:
                currentlyViewedCurrency = CreateInstance<RPGCurrency>();
                break;
            case AssetType.Task:
                currentlyViewedTask = CreateInstance<RPGTask>();
                break;
            case AssetType.Quest:
                currentlyViewedQuest = CreateInstance<RPGQuest>();
                break;
            case AssetType.CraftingRecipe:
                currentlyViewedCraftingRecipe = CreateInstance<RPGCraftingRecipe>();
                break;
            case AssetType.CraftingStation:
                currentlyViewedCraftingStation = CreateInstance<RPGCraftingStation>();
                break;
            case AssetType.ResourceNode:
                currentlyViewedResourceNode = CreateInstance<RPGResourceNode>();
                break;
            case AssetType.Bonus:
                currentlyViewedBonus = CreateInstance<RPGBonus>();
                break;
            case AssetType.GameScene:
                currentlyViewedGameScene = CreateInstance<RPGGameScene>();
                break;
            case AssetType.GearSet:
                currentlyViewedGearSet = CreateInstance<RPGGearSet>();
                break;
            case AssetType.Enchantment:
                currentlyViewedEnchantment = CreateInstance<RPGEnchantment>();
                break;
            case AssetType.Spellbook:
                currentlyViewedSpellbook = CreateInstance<RPGSpellbook>();
                break;
            case AssetType.Faction:
                currentlyViewedFaction = CreateInstance<RPGFaction>();
                break;
            case AssetType.WeaponTemplate:
                currentlyViewedWeaponTemplate = CreateInstance<RPGWeaponTemplate>();
                break;
            case AssetType.Dialogue:
                currentlyViewedDialogue = CreateInstance<RPGDialogue>();
                break;
            case AssetType.GameModifier:
                currentlyViewedGameModifier = CreateInstance<RPGGameModifier>();
                break;
            case AssetType.Species:
                currentlyViewedSpecies = CreateInstance<RPGSpecies>();
                break;
            case AssetType.Combo:
                currentlyViewedCombo = CreateInstance<RPGCombo>();
                break;
        }

        cachedFileName = "";
        cachedElementName = "";
        curViewElementIndex = -1;
    }

    private void Duplicate(AssetType ASSET_TYPE)
    {
        if (EditorApplication.isCompiling)
        {
            Debug.LogError("You cannot interact with the RPG Builder while the editor is compiling");
            return;
        }
        switch (ASSET_TYPE)
        {
            case AssetType.Ability:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGAbility)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Abilities/" + cachedFileName + ".asset", typeof(RPGAbility));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.ability);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Abilities/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Abilities/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGAbility)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Abilities/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGAbility));
                        duplicated._name = currentlyViewedAbility._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;
                        
                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadAbilities();
                        SelectAbility(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Effect:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGEffect)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Effects/" + cachedFileName + ".asset", typeof(RPGEffect));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.effect);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Effects/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Effects/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGEffect)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Effects/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGEffect));
                        duplicated._name = currentlyViewedEffect._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadEffects();
                        SelectEffect(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Item:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGItem)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Items/" + cachedFileName + ".asset", typeof(RPGItem));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.item);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Items/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Items/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGItem)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Items/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGItem));
                        duplicated._name = currentlyViewedItem._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadItems();
                        SelectItem(curViewElementIndex + 1);
                    }
                }
                break;

            case AssetType.NPC:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGNpc)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "NPCs/" + cachedFileName + ".asset", typeof(RPGNpc));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.npc);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "NPCs/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "NPCs/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGNpc)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "NPCs/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGNpc));
                        duplicated._name = currentlyViewedNPC._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadNPCs();
                        SelectNPC(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Stat:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGStat)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Stats/" + cachedFileName + ".asset", typeof(RPGStat));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.stat);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Stats/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Stats/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGStat)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Stats/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGStat));
                        duplicated._name = currentlyViewedStat._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadStats();
                        SelectStat(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Skill:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGSkill)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Skills/" + cachedFileName + ".asset", typeof(RPGSkill));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.skill);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Skills/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Skills/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGSkill)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Skills/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGSkill));
                        duplicated._name = currentlyViewedSkill._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadSkills();
                        SelectSkill(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.LevelTemplate:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGLevelsTemplate)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LevelsTemplate/" + cachedFileName + ".asset", typeof(RPGLevelsTemplate));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.levelTemplate);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LevelsTemplate/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LevelsTemplate/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGLevelsTemplate)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LevelsTemplate/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGLevelsTemplate));
                        duplicated._name = currentlyViewedLevelTemplate._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadLevelsTemplate();
                        SelectLevelTemplate(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Race:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGRace)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Races/" + cachedFileName + ".asset", typeof(RPGRace));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.race);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Races/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Races/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGRace)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Races/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGRace));
                        duplicated._name = currentlyViewedRace._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadRaces();
                        SelectRace(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Class:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGClass)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Classes/" + cachedFileName + ".asset", typeof(RPGClass));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID._class);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Classes/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Classes/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGClass)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Classes/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGClass));
                        duplicated._name = currentlyViewedClass._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadClasses();
                        SelectClass(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.TalentTree:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGTalentTree)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TalentTrees/" + cachedFileName + ".asset", typeof(RPGTalentTree));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.talentTree);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TalentTrees/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TalentTrees/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGTalentTree)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TalentTrees/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGTalentTree));
                        duplicated._name = currentlyViewedTalentTree._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadTalentTrees();
                        SelectTalentTree(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.TreePoint:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGTreePoint)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TreePoints/" + cachedFileName + ".asset", typeof(RPGTreePoint));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.treePoint);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TreePoints/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TreePoints/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGTreePoint)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TreePoints/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGTreePoint));
                        duplicated._name = currentlyViewedTreePoint._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadTreePoints();
                        SelectTreePoint(curViewElementIndex + 1);
                    }
                }
                break;

            case AssetType.LootTable:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGLootTable)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LootTables/" + cachedFileName + ".asset", typeof(RPGLootTable));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.lootTable);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LootTables/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LootTables/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGLootTable)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LootTables/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGLootTable));
                        duplicated._name = currentlyViewedLootTable._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadLootTables();
                        SelectLootTable(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.WorldPosition:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGWorldPosition)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WorldPositions/" + cachedFileName + ".asset", typeof(RPGWorldPosition));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.worldPosition);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WorldPositions/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WorldPositions/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGWorldPosition)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WorldPositions/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGWorldPosition));
                        duplicated._name = currentlyViewedWorldPosition._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadWorldPositions();
                        SelectWorldPosition(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.MerchantTable:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGMerchantTable)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "MerchantTables/" + cachedFileName + ".asset", typeof(RPGMerchantTable));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.merchantTable);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "MerchantTables/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "MerchantTables/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGMerchantTable)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "MerchantTables/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGMerchantTable));
                        duplicated._name = currentlyViewedMerchantTable._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadMerchantTables();
                        SelectMerchantTable(curViewElementIndex + 1);
                    }
                }
                break;

            case AssetType.Currency:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGCurrency)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Currencies/" + cachedFileName + ".asset", typeof(RPGCurrency));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.currency);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Currencies/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Currencies/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGCurrency)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Currencies/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGCurrency));
                        duplicated._name = currentlyViewedCurrency._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;


                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadCurrencies();
                        SelectCurrency(curViewElementIndex + 1);
                    }
                }
                break;

            case AssetType.Task:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingTask = (RPGTask)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Tasks/" + cachedFileName + ".asset", typeof(RPGTask));
                    if (existingTask != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.task);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Tasks/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Tasks/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGTask)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Tasks/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGTask));
                        duplicated._name = currentlyViewedTask._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;
                        
                        EditorUtility.SetDirty(existingTask);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadTasks();
                        SelectTask(curViewElementIndex + 1);
                    }
                }
                break;

            case AssetType.Quest:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingTask = (RPGQuest)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Quests/" + cachedFileName + ".asset", typeof(RPGQuest));
                    if (existingTask != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.quest);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Quests/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Quests/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGQuest)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Quests/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGQuest));
                        duplicated._name = currentlyViewedQuest._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;


                        EditorUtility.SetDirty(existingTask);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadQuests();
                        SelectQuest(curViewElementIndex + 1);
                    }
                }
                break;

            case AssetType.CraftingRecipe:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingTask = (RPGCraftingRecipe)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingRecipes/" + cachedFileName + ".asset", typeof(RPGCraftingRecipe));
                    if (existingTask != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.craftingRecipe);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingRecipes/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingRecipes/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGCraftingRecipe)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingRecipes/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGCraftingRecipe));
                        duplicated._name = currentlyViewedCraftingRecipe._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingTask);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadCraftingRecipes();
                        SelectCraftingRecipe(curViewElementIndex + 1);
                    }
                }
                break;

            case AssetType.CraftingStation:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingTask = (RPGCraftingStation)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingStations/" + cachedFileName + ".asset", typeof(RPGCraftingStation));
                    if (existingTask != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.craftingStation);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingStations/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingStations/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGCraftingStation)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingStations/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGCraftingStation));
                        duplicated._name = currentlyViewedCraftingStation._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;


                        EditorUtility.SetDirty(existingTask);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadCraftingStations();
                        SelectCraftingStation(curViewElementIndex + 1);
                    }
                }
                break;

            case AssetType.ResourceNode:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingTask = (RPGResourceNode)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "ResourceNodes/" + cachedFileName + ".asset", typeof(RPGResourceNode));
                    if (existingTask != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.resourceNode);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "ResourceNodes/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "ResourceNodes/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGResourceNode)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "ResourceNodes/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGResourceNode));
                        duplicated._name = currentlyViewedResourceNode._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingTask);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadResourceNodes();
                        SelectResourceNode(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Bonus:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGBonus)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Bonuses/" + cachedFileName + ".asset", typeof(RPGBonus));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.bonus);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Bonuses/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Bonuses/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGBonus)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Bonuses/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGBonus));
                        duplicated._name = currentlyViewedBonus._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadBonuses();
                        SelectBonus(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.GameScene:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGGameScene)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameScenes/" + cachedFileName + ".asset", typeof(RPGGameScene));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.gameScene);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameScenes/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameScenes/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGGameScene)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameScenes/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGGameScene));
                        duplicated._name = currentlyViewedGameScene._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadGameScenes();
                        SelectGameScene(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.GearSet:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGGearSet)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GearSets/" + cachedFileName + ".asset", typeof(RPGGearSet));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.gearSet);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GearSets/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GearSets/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGGearSet)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GearSets/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGGearSet));
                        duplicated._name = currentlyViewedGearSet._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadGearSet();
                        SelectGearSet(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Enchantment:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGEnchantment)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Enchantments/" + cachedFileName + ".asset", typeof(RPGEnchantment));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.enchantment);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Enchantments/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Enchantments/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGEnchantment)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Enchantments/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGEnchantment));
                        duplicated._name = currentlyViewedEnchantment._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadEnchantments();
                        SelectEnchantment(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Spellbook:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingAbility = (RPGSpellbook)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Spellbooks/" + cachedFileName + ".asset", typeof(RPGSpellbook));
                    if (existingAbility != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.spellbook);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Spellbooks/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Spellbooks/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGSpellbook)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Spellbooks/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGSpellbook));
                        duplicated._name = currentlyViewedSpellbook._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingAbility);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadSpellbooks();
                        SelectSpellbook(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Faction:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingFaction = (RPGFaction)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Factions/" + cachedFileName + ".asset", typeof(RPGFaction));
                    if (existingFaction != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.faction);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Factions/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Factions/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGFaction)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Factions/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGFaction));
                        duplicated._name = currentlyViewedFaction._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingFaction);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadFactions();
                        SelectFaction(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.WeaponTemplate:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingWeaponTemplate = (RPGWeaponTemplate)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WeaponTemplates/" + cachedFileName + ".asset", typeof(RPGWeaponTemplate));
                    if (existingWeaponTemplate != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.weaponTemplate);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WeaponTemplates/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WeaponTemplates/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGWeaponTemplate)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WeaponTemplates/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGWeaponTemplate));
                        duplicated._name = currentlyViewedWeaponTemplate._name + " Copy_ID" + ID;
                        duplicated.fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingWeaponTemplate);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadWeaponTemplates();
                        SelectWeaponTemplate(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Dialogue:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingDialogue = (RPGDialogue)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Dialogues/" + cachedFileName + ".asset", typeof(RPGDialogue));
                    if (existingDialogue != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.dialogue);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Dialogues/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Dialogues/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGDialogue)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Dialogues/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGDialogue));
                        duplicated._name = currentlyViewedDialogue._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingDialogue);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadDialogues();
                        SelectDialogue(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.GameModifier:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingGameModifier = (RPGGameModifier)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameModifiers/" + cachedFileName + ".asset", typeof(RPGGameModifier));
                    if (existingGameModifier != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.gameModifier);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameModifiers/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameModifiers/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGGameModifier)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameModifiers/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGGameModifier));
                        duplicated._name = currentlyViewedGameModifier._name + " Copy_ID" + ID;
                        duplicated._fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingGameModifier);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadGameModifiers();
                        SelectGameModifier(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Species:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingSpecies = (RPGSpecies)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Species/" + cachedFileName + ".asset", typeof(RPGSpecies));
                    if (existingSpecies != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.species);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Species/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Species/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGSpecies)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Species/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGSpecies));
                        duplicated._name = currentlyViewedSpecies._name + " Copy_ID" + ID;
                        duplicated.fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingSpecies);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadSpecies();
                        SelectSpecies(curViewElementIndex + 1);
                    }
                }
                break;
            case AssetType.Combo:
                if (cachedFileName != null && cachedFileName.Length > 0 && curViewElementIndex != -1)
                {
                    var existingCombo = (RPGCombo)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Combos/" + cachedFileName + ".asset", typeof(RPGCombo));
                    if (existingCombo != null)
                    {
                        var ID = HandleAssetIDSaving(AssetIDHandler.ASSET_TYPE_ID.combo);
                        AssetDatabase.CopyAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Combos/" + cachedFileName + ".asset", editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Combos/" + cachedFileName + " Copy_ID" + ID + ".asset");

                        AssetActionsAfterCreate();

                        var duplicated = (RPGCombo)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Combos/" + cachedFileName + " Copy_ID" + ID + ".asset", typeof(RPGCombo));
                        duplicated._name = currentlyViewedCombo._name + " Copy_ID" + ID;
                        duplicated.fileName = cachedFileName + " Copy_ID" + ID;

                        duplicated.ID = ID;

                        EditorUtility.SetDirty(existingCombo);
                        EditorUtility.SetDirty(duplicated);
                        AssetActionsAfterCreate();

                        LoadCombos();
                        SelectCombo(curViewElementIndex + 1);
                    }
                }
                break;
        }
        
        EditorUtility.ClearProgressBar();
        
        cachedElementListScrollPosition = elementListScrollPosition;
        RequestFilterCheck();
        RequestElementListRedraw();
    }

    private void Delete(AssetType ASSET_TYPE, bool singleDelete)
    {
        if (EditorApplication.isCompiling)
        {
            Debug.LogError("You cannot interact with the RPG Builder while the editor is compiling");
            return;
        }
        switch (ASSET_TYPE)
        {
            case AssetType.Ability:
                var existingAbility = (RPGAbility)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Abilities/" + cachedFileName + ".asset", typeof(RPGAbility));
                if (existingAbility != null)
                {
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Abilities/" + cachedFileName + ".asset");
                }
                else
                {
                    Debug.LogError("Ability does not exist");
                }

                if (singleDelete)
                {
                    LoadAbilities();
                    SelectAbility(0);
                }

                break;
            case AssetType.Effect:
                var existingEffect = (RPGEffect)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Effects/" + cachedFileName + ".asset", typeof(RPGEffect));
                if (existingEffect != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Effects/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Effect does not exist");

                if (singleDelete)
                {
                    LoadEffects();
                    SelectEffect(0);
                }

                break;
            case AssetType.Item:
                var existingItem = (RPGItem)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Items/" + cachedFileName + ".asset", typeof(RPGItem));
                if (existingItem != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Items/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Item does not exist");

                if (singleDelete)
                {
                    LoadItems();
                    SelectItem(0);
                }

                break;

            case AssetType.NPC:
                var existingNPC = (RPGNpc)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "NPCs/" + cachedFileName + ".asset", typeof(RPGNpc));
                if (existingNPC != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "NPCs/" + cachedFileName + ".asset");
                else
                    Debug.LogError("NPC does not exist");

                if (singleDelete)
                {
                    LoadNPCs();
                    SelectNPC(0);
                }

                break;
            case AssetType.Stat:
                var existingStats = (RPGStat)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Stats/" + cachedFileName + ".asset", typeof(RPGStat));
                if (existingStats != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Stats/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Stats does not exist");

                if (singleDelete)
                {
                    LoadStats();
                    SelectStat(0);
                }

                break;
            case AssetType.Skill:
                var existingSkill = (RPGSkill)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Skills/" + cachedFileName + ".asset", typeof(RPGSkill));
                if (existingSkill != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Skills/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Skill does not exist");

                if (singleDelete)
                {
                    LoadSkills();
                    SelectSkill(0);
                }

                break;
            case AssetType.LevelTemplate:
                var existingLevelTemplate = (RPGLevelsTemplate)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LevelsTemplate/" + cachedFileName + ".asset", typeof(RPGLevelsTemplate));
                if (existingLevelTemplate != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LevelsTemplate/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Level Template does not exist");

                if (singleDelete)
                {
                    LoadLevelsTemplate();
                    SelectLevelTemplate(0);
                }

                break;
            case AssetType.Race:
                var existingRace = (RPGRace)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Races/" + cachedFileName + ".asset", typeof(RPGRace));
                if (existingRace != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Races/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Races does not exist");

                if (singleDelete)
                {
                    LoadRaces();
                    SelectRace(0);
                }

                break;
            case AssetType.Class:
                var existingClass = (RPGClass)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Classes/" + cachedFileName + ".asset", typeof(RPGClass));
                if (existingClass != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Classes/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Classes does not exist");

                if (singleDelete)
                {
                    LoadClasses();
                    SelectClass(0);
                }

                break;
            case AssetType.TalentTree:
                var existingAbilityTree = (RPGTalentTree)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TalentTrees/" + cachedFileName + ".asset", typeof(RPGTalentTree));
                if (existingAbilityTree != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TalentTrees/" + cachedFileName + ".asset");
                else
                    Debug.LogError("TalentTrees does not exist");

                if (singleDelete)
                {
                    LoadTalentTrees();
                    SelectTalentTree(0);
                }

                break;
            case AssetType.TreePoint:
                var existingTreePoint = (RPGTreePoint)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TreePoints/" + cachedFileName + ".asset", typeof(RPGTreePoint));
                if (existingTreePoint != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "TreePoints/" + cachedFileName + ".asset");
                else
                    Debug.LogError("TreePoint does not exist");

                if (singleDelete)
                {
                    LoadTreePoints();
                    SelectTreePoint(0);
                }

                break;
            case AssetType.LootTable:
                var existingLootTable = (RPGLootTable)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LootTables/" + cachedFileName + ".asset", typeof(RPGLootTable));
                if (existingLootTable != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "LootTables/" + cachedFileName + ".asset");
                else
                    Debug.LogError("LootTable does not exist");

                if (singleDelete)
                {
                    LoadLootTables();
                    SelectLootTable(0);
                }

                break;
            case AssetType.WorldPosition:
                var existingWorldPosition = (RPGWorldPosition)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WorldPositions/" + cachedFileName + ".asset", typeof(RPGWorldPosition));
                if (existingWorldPosition != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WorldPositions/" + cachedFileName + ".asset");
                else
                    Debug.LogError("WorldPosition does not exist");

                if (singleDelete)
                {
                    LoadWorldPositions();
                    SelectWorldPosition(0);
                }

                break;
            case AssetType.MerchantTable:
                var existingMerchantTable = (RPGMerchantTable)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "MerchantTables/" + cachedFileName + ".asset", typeof(RPGMerchantTable));
                if (existingMerchantTable != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "MerchantTables/" + cachedFileName + ".asset");
                else
                    Debug.LogError("MerchantTable does not exist");

                if (singleDelete)
                {
                    LoadMerchantTables();
                    SelectMerchantTable(0);
                }

                break;
            case AssetType.Currency:
                var existingCurrency = (RPGCurrency)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Currencies/" + cachedFileName + ".asset", typeof(RPGCurrency));
                if (existingCurrency != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Currencies/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Currency does not exist");

                if (singleDelete)
                {
                    LoadCurrencies();
                    SelectCurrency(0);
                }

                break;
            case AssetType.Task:
                var existingTask = (RPGTask)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Tasks/" + cachedFileName + ".asset", typeof(RPGTask));
                if (existingTask != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Tasks/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Task does not exist");

                if (singleDelete)
                {
                    LoadTasks();
                    SelectTask(0);
                }

                break;
            case AssetType.Quest:
                var existingQuest = (RPGQuest)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Quests/" + cachedFileName + ".asset", typeof(RPGQuest));
                if (existingQuest != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Quests/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Quest does not exist");

                if (singleDelete)
                {
                    LoadQuests();
                    SelectQuest(0);
                }

                break;
            case AssetType.CraftingRecipe:
                var existingCraftingRecipe = (RPGCraftingRecipe)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingRecipes/" + cachedFileName + ".asset", typeof(RPGCraftingRecipe));
                if (existingCraftingRecipe != null)
                {
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingRecipes/" + cachedFileName + ".asset");
                }
                else
                {
                    Debug.LogError("Crafting recipe does not exist");
                }

                if (singleDelete)
                {
                    LoadCraftingRecipes();
                    SelectCraftingRecipe(0);
                }

                break;
            case AssetType.CraftingStation:
                var existingCraftingStation = (RPGCraftingStation)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingStations/" + cachedFileName + ".asset", typeof(RPGCraftingStation));
                if (existingCraftingStation != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "CraftingStations/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Crafting station does not exist");

                if (singleDelete)
                {
                    LoadCraftingStations();
                    SelectCraftingStation(0);
                }

                break;
            case AssetType.ResourceNode:
                var existingResourceNode = (RPGResourceNode)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "ResourceNodes/" + cachedFileName + ".asset", typeof(RPGResourceNode));
                if (existingResourceNode != null)
                {
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "ResourceNodes/" + cachedFileName + ".asset");
                }
                else
                {
                    Debug.LogError("Resource Node does not exist");
                }

                if (singleDelete)
                {
                    LoadResourceNodes();
                    SelectResourceNode(0);
                }

                break;
            case AssetType.Bonus:
                var existingBonus = (RPGBonus)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Bonuses/" + cachedFileName + ".asset", typeof(RPGBonus));
                if (existingBonus != null)
                {
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Bonuses/" + cachedFileName + ".asset");
                }
                else
                {
                    Debug.LogError("Bonus Node does not exist");
                }

                if (singleDelete)
                {
                    LoadBonuses();
                    SelectBonus(0);
                }

                break;
            case AssetType.GameScene:
                var existingGameScene = (RPGGameScene)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameScenes/" + cachedFileName + ".asset", typeof(RPGGameScene));
                if (existingGameScene != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameScenes/" + cachedFileName + ".asset");
                else
                    Debug.LogError("GameScene does not exist");

                if (singleDelete)
                {
                    LoadGameScenes();
                    SelectGameScene(0);
                }

                break;
            case AssetType.GearSet:
                var existingGearSet = (RPGGearSet)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GearSets/" + cachedFileName + ".asset", typeof(RPGGearSet));
                if (existingGearSet != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GearSets/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Gear Set does not exist");

                if (singleDelete)
                {
                    LoadGearSet();
                    SelectGearSet(0);
                }

                break;
            case AssetType.Enchantment:
                var existingEnchantment = (RPGEnchantment)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Enchantments/" + cachedFileName + ".asset", typeof(RPGEnchantment));
                if (existingEnchantment != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Enchantments/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Enchantment does not exist");

                if (singleDelete)
                {
                    LoadEnchantments();
                    SelectEnchantment(0);
                }

                break;
            case AssetType.Spellbook:
                var existingSpellBook = (RPGSpellbook)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Spellbooks/" + cachedFileName + ".asset", typeof(RPGSpellbook));
                if (existingSpellBook != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Spellbooks/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Spellbook does not exist");

                if (singleDelete)
                {
                    LoadSpellbooks();
                    SelectSpellbook(0);
                }

                break;
            case AssetType.Faction:
                var existingFaction = (RPGFaction)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Factions/" + cachedFileName + ".asset", typeof(RPGFaction));
                if (existingFaction != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Factions/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Faction does not exist");

                if (singleDelete)
                {
                    LoadFactions();
                    SelectFaction(0);
                }

                break;
            case AssetType.WeaponTemplate:
                var existingWeaponTemplate = (RPGWeaponTemplate)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WeaponTemplates/" + cachedFileName + ".asset", typeof(RPGWeaponTemplate));
                if (existingWeaponTemplate != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "WeaponTemplates/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Weapon Template does not exist");

                if (singleDelete)
                {
                    LoadWeaponTemplates();
                    SelectWeaponTemplate(0);
                }

                break;
            case AssetType.Dialogue:
                var existingDialogue = (RPGDialogue)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Dialogues/" + cachedFileName + ".asset", typeof(RPGDialogue));
                if (existingDialogue != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Dialogues/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Dialogue does not exist");

                if (singleDelete)
                {
                    LoadDialogues();
                    SelectDialogue(0);
                }

                break;
            case AssetType.GameModifier:
                var existingGameModifier = (RPGGameModifier)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameModifiers/" + cachedFileName + ".asset", typeof(RPGGameModifier));
                if (existingGameModifier != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "GameModifiers/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Game Modifier does not exist");

                if (singleDelete)
                {
                    LoadGameModifiers();
                    SelectGameModifier(0);
                }

                break;
            case AssetType.Species:
                var existingSpecies = (RPGSpecies)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Species/" + cachedFileName + ".asset", typeof(RPGSpecies));
                if (existingSpecies != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Species/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Species does not exist");

                if (singleDelete)
                {
                    LoadSpecies();
                    SelectSpecies(0);
                }

                break;
            case AssetType.Combo:
                var existingCombo = (RPGCombo)AssetDatabase.LoadAssetAtPath(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Combos/" + cachedFileName + ".asset", typeof(RPGCombo));
                if (existingCombo != null)
                    AssetDatabase.DeleteAsset(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Combos/" + cachedFileName + ".asset");
                else
                    Debug.LogError("Combo does not exist");

                if (singleDelete)
                {
                    LoadCombos();
                    SelectCombo(0);
                }

                break;
        }


        if (singleDelete)
        {
            cachedElementListScrollPosition = elementListScrollPosition;
            RequestFilterCheck();
            RequestElementListRedraw();
        }
    }

    private void SelectAbility(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Ability;
        currentFilterList = editorFilters.abilityFilters;
        if (allAbilities.Count == 0)
        {
            CreateNew(AssetType.Ability);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allAbilities[abilityIndex]._fileName;
        cachedElementName = allAbilities[abilityIndex]._name;
        currentlyViewedAbility = Instantiate(allAbilities[abilityIndex]) as RPGAbility;
        GUI.FocusControl(null);
    }

    private void SelectNewAbility(string fileName)
    {
        RPGAbility newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allAbilities.Count; i++)
            if (allAbilities[i]._fileName == fileName)
            {
                newAb = allAbilities[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            cachedElementName = newAb._name;
            currentlyViewedAbility = Instantiate(allAbilities[abIndex]) as RPGAbility;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allAbilities[0]._fileName;
            cachedElementName = allAbilities[0]._name;
            currentlyViewedAbility = Instantiate(allAbilities[0]) as RPGAbility;
        }
        GUI.FocusControl(null);
    }

    private void SelectBonus(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Bonus;
        currentFilterList = editorFilters.bonusFilters;
        if (allBonuses.Count == 0)
        {
            CreateNew(AssetType.Bonus);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allBonuses[abilityIndex]._fileName;
        cachedElementName = allBonuses[abilityIndex]._name;
        currentlyViewedBonus = Instantiate(allBonuses[abilityIndex]) as RPGBonus;
        GUI.FocusControl(null);
    }

    private void SelectNewBonus(string fileName)
    {
        RPGBonus newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allBonuses.Count; i++)
            if (allBonuses[i]._fileName == fileName)
            {
                newAb = allBonuses[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            cachedElementName = newAb._name;
            currentlyViewedBonus = Instantiate(allBonuses[abIndex]) as RPGBonus;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allBonuses[0]._fileName;
            cachedElementName = allBonuses[0]._name;
            currentlyViewedBonus = Instantiate(allBonuses[0]) as RPGBonus;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectGearSet(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.GearSet;
        currentFilterList = editorFilters.gearsSetFilters;
        if (allGearSets.Count == 0)
        {
            CreateNew(AssetType.GearSet);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allGearSets[abilityIndex]._fileName;
        cachedElementName = allGearSets[abilityIndex]._name;
        currentlyViewedGearSet = Instantiate(allGearSets[abilityIndex]) as RPGGearSet;
        GUI.FocusControl(null);
    }

    private void SelectNewGearSet(string fileName)
    {
        RPGGearSet newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allGearSets.Count; i++)
            if (allGearSets[i]._fileName == fileName)
            {
                newAb = allGearSets[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            cachedElementName = newAb._name;
            currentlyViewedGearSet = Instantiate(allGearSets[abIndex]) as RPGGearSet;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allGearSets[0]._fileName;
            cachedElementName = allGearSets[0]._name;
            currentlyViewedGearSet = Instantiate(allGearSets[0]) as RPGGearSet;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectEnchantment(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Enchantment;
        currentFilterList = editorFilters.enchantmentFilters;
        if (allEnchantments.Count == 0)
        {
            CreateNew(AssetType.Enchantment);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allEnchantments[abilityIndex]._fileName;
        cachedElementName = allEnchantments[abilityIndex]._name;
        currentlyViewedEnchantment = Instantiate(allEnchantments[abilityIndex]) as RPGEnchantment;
        GUI.FocusControl(null);
    }

    private void SelectNewEnchantment(string fileName)
    {
        RPGEnchantment newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allEnchantments.Count; i++)
            if (allEnchantments[i]._fileName == fileName)
            {
                newAb = allEnchantments[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            cachedElementName = newAb._name;
            currentlyViewedEnchantment = Instantiate(allEnchantments[abIndex]) as RPGEnchantment;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allEnchantments[0]._fileName;
            cachedElementName = allEnchantments[0]._name;
            currentlyViewedEnchantment = Instantiate(allEnchantments[0]) as RPGEnchantment;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectSpellbook(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Spellbook;
        currentFilterList = editorFilters.spellbookFilters;
        if (allSpellbooks.Count == 0)
        {
            CreateNew(AssetType.Spellbook);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allSpellbooks[abilityIndex]._fileName;
        cachedElementName = allSpellbooks[abilityIndex]._name;
        currentlyViewedSpellbook = Instantiate(allSpellbooks[abilityIndex]) as RPGSpellbook;
        GUI.FocusControl(null);
    }

    private void SelectNewSpellbook(string fileName)
    {
        RPGSpellbook newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allSpellbooks.Count; i++)
            if (allSpellbooks[i]._fileName == fileName)
            {
                newAb = allSpellbooks[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            cachedElementName = newAb._name;
            currentlyViewedSpellbook = Instantiate(allSpellbooks[abIndex]) as RPGSpellbook;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allSpellbooks[0]._fileName;
            cachedElementName = allSpellbooks[0]._name;
            currentlyViewedSpellbook = Instantiate(allSpellbooks[0]) as RPGSpellbook;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectFaction(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Faction;
        currentFilterList = editorFilters.factionFilters;
        if (allFactions.Count == 0)
        {
            CreateNew(AssetType.Faction);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allFactions[abilityIndex]._fileName;
        cachedElementName = allFactions[abilityIndex]._name;
        currentlyViewedFaction = Instantiate(allFactions[abilityIndex]) as RPGFaction;
        GUI.FocusControl(null);
    }

    private void SelectNewFaction(string fileName)
    {
        RPGFaction newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allFactions.Count; i++)
            if (allFactions[i]._fileName == fileName)
            {
                newAb = allFactions[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            cachedElementName = newAb._name;
            currentlyViewedFaction = Instantiate(allFactions[abIndex]) as RPGFaction;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allFactions[0]._fileName;
            cachedElementName = allFactions[0]._name;
            currentlyViewedFaction = Instantiate(allFactions[0]) as RPGFaction;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectWeaponTemplate(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.WeaponTemplate;
        currentFilterList = editorFilters.weaponTemplateFilters;
        if (allWeaponTemplates.Count == 0)
        {
            CreateNew(AssetType.WeaponTemplate);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allWeaponTemplates[abilityIndex].fileName;
        cachedElementName = allWeaponTemplates[abilityIndex]._name;
        currentlyViewedWeaponTemplate = Instantiate(allWeaponTemplates[abilityIndex]) as RPGWeaponTemplate;
        GUI.FocusControl(null);
    }

    private void SelectNewWeaponTemplate(string fileName)
    {
        RPGWeaponTemplate newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allWeaponTemplates.Count; i++)
            if (allWeaponTemplates[i].fileName == fileName)
            {
                newAb = allWeaponTemplates[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb.fileName;
            cachedElementName = newAb._name;
            currentlyViewedWeaponTemplate = Instantiate(allWeaponTemplates[abIndex]) as RPGWeaponTemplate;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allWeaponTemplates[0].fileName;
            cachedElementName = allWeaponTemplates[0]._name;
            currentlyViewedWeaponTemplate = Instantiate(allWeaponTemplates[0]) as RPGWeaponTemplate;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectSpecies(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Species;
        currentFilterList = editorFilters.speciesFilters;
        if (allSpecies.Count == 0)
        {
            CreateNew(AssetType.Species);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allSpecies[abilityIndex].fileName;
        cachedElementName = allSpecies[abilityIndex]._name;
        currentlyViewedSpecies = Instantiate(allSpecies[abilityIndex]) as RPGSpecies;
        GUI.FocusControl(null);
    }

    private void SelectNewSpecies(string fileName)
    {
        RPGSpecies newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allSpecies.Count; i++)
            if (allSpecies[i].fileName == fileName)
            {
                newAb = allSpecies[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb.fileName;
            cachedElementName = newAb._name;
            currentlyViewedSpecies = Instantiate(allSpecies[abIndex]) as RPGSpecies;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allSpecies[0].fileName;
            cachedElementName = allSpecies[0]._name;
            currentlyViewedSpecies = Instantiate(allSpecies[0]) as RPGSpecies;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectCombo(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Combo;
        currentFilterList = editorFilters.comboFilters;
        if (allCombos.Count == 0)
        {
            CreateNew(AssetType.Combo);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allCombos[abilityIndex].fileName;
        cachedElementName = allCombos[abilityIndex]._name;
        currentlyViewedCombo = Instantiate(allCombos[abilityIndex]) as RPGCombo;
        GUI.FocusControl(null);
    }

    private void SelectNewCombo(string fileName)
    {
        RPGCombo newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allCombos.Count; i++)
            if (allCombos[i].fileName == fileName)
            {
                newAb = allCombos[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb.fileName;
            cachedElementName = newAb._name;
            currentlyViewedCombo = Instantiate(allCombos[abIndex]) as RPGCombo;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allCombos[0].fileName;
            cachedElementName = allCombos[0]._name;
            currentlyViewedCombo = Instantiate(allCombos[0]) as RPGCombo;
        }
        GUI.FocusControl(null);
    }

    private void SelectTalentTree(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.TalentTree;
        currentFilterList = editorFilters.talentTreeFilters;
        if (allTalentTrees.Count == 0)
        {
            CreateNew(AssetType.TalentTree);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allTalentTrees[abilityIndex]._fileName;
        currentlyViewedTalentTree = Instantiate(allTalentTrees[abilityIndex]) as RPGTalentTree;
        GUI.FocusControl(null);
    }

    private void SelectNewTalentTree(string fileName)
    {
        RPGTalentTree newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allTalentTrees.Count; i++)
            if (allTalentTrees[i]._fileName == fileName)
            {
                newAb = allTalentTrees[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedTalentTree = Instantiate(allTalentTrees[abIndex]) as RPGTalentTree;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allTalentTrees[0]._fileName;
            currentlyViewedTalentTree = Instantiate(allTalentTrees[0]) as RPGTalentTree;
        }
        GUI.FocusControl(null);
    }

    private void SelectCraftingRecipe(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.CraftingRecipe;
        currentFilterList = editorFilters.recipeFilters;
        if (allCraftingRecipes.Count == 0)
        {
            CreateNew(AssetType.CraftingRecipe);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allCraftingRecipes[abilityIndex]._fileName;
        cachedElementName = allCraftingRecipes[abilityIndex]._name;
        currentlyViewedCraftingRecipe = Instantiate(allCraftingRecipes[abilityIndex]) as RPGCraftingRecipe;
        GUI.FocusControl(null);
    }

    private void SelectNewCraftingRecipe(string fileName)
    {
        RPGCraftingRecipe newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allCraftingRecipes.Count; i++)
            if (allCraftingRecipes[i]._fileName == fileName)
            {
                newAb = allCraftingRecipes[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            cachedElementName = newAb._name;
            currentlyViewedCraftingRecipe = Instantiate(allCraftingRecipes[abIndex]) as RPGCraftingRecipe;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allCraftingRecipes[0]._fileName;
            cachedElementName = allCraftingRecipes[0]._name;
            currentlyViewedCraftingRecipe = Instantiate(allCraftingRecipes[0]) as RPGCraftingRecipe;
        }
        GUI.FocusControl(null);
    }

    private void SelectCraftingStation(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.CraftingStation;
        currentFilterList = editorFilters.craftingStationFilters;
        if (allCraftingStations.Count == 0)
        {
            CreateNew(AssetType.CraftingStation);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allCraftingStations[abilityIndex]._fileName;
        currentlyViewedCraftingStation = Instantiate(allCraftingStations[abilityIndex]) as RPGCraftingStation;
        GUI.FocusControl(null);
    }

    private void SelectNewCraftingStation(string fileName)
    {
        RPGCraftingStation newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allCraftingStations.Count; i++)
            if (allCraftingStations[i]._fileName == fileName)
            {
                newAb = allCraftingStations[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedCraftingStation = Instantiate(allCraftingStations[abIndex]) as RPGCraftingStation;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allCraftingStations[0]._fileName;
            currentlyViewedCraftingStation = Instantiate(allCraftingStations[0]) as RPGCraftingStation;
        }
        GUI.FocusControl(null);
    }

    private void SelectResourceNode(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.ResourceNode;
        currentFilterList = editorFilters.resourceNodeFilters;
        if (allResourceNodes.Count == 0)
        {
            CreateNew(AssetType.ResourceNode);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allResourceNodes[abilityIndex]._fileName;
        cachedElementName = allResourceNodes[abilityIndex]._name;
        currentlyViewedResourceNode = Instantiate(allResourceNodes[abilityIndex]) as RPGResourceNode;
        GUI.FocusControl(null);
    }

    private void SelectNewResourceNode(string fileName)
    {
        RPGResourceNode newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allResourceNodes.Count; i++)
            if (allResourceNodes[i]._fileName == fileName)
            {
                newAb = allResourceNodes[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            cachedElementName = newAb._name;
            currentlyViewedResourceNode = Instantiate(allResourceNodes[abIndex]) as RPGResourceNode;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allResourceNodes[0]._fileName;
            cachedElementName = allResourceNodes[0]._name;
            currentlyViewedResourceNode = Instantiate(allResourceNodes[0]) as RPGResourceNode;
        }
        GUI.FocusControl(null);
    }

    private void SelectGameScene(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.GameScene;
        currentFilterList = editorFilters.gameSceneFilters;
        if (allGameScenes.Count == 0)
        {
            CreateNew(AssetType.GameScene);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allGameScenes[abilityIndex]._fileName;
        currentlyViewedGameScene = Instantiate(allGameScenes[abilityIndex]) as RPGGameScene;
        GUI.FocusControl(null);
    }

    private void SelectNewGameScene(string fileName)
    {
        RPGGameScene newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allGameScenes.Count; i++)
            if (allGameScenes[i]._fileName == fileName)
            {
                newAb = allGameScenes[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedGameScene = Instantiate(allGameScenes[abIndex]) as RPGGameScene;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allGameScenes[0]._fileName;
            currentlyViewedGameScene = Instantiate(allGameScenes[0]) as RPGGameScene;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectDialogue(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Dialogue;
        currentFilterList = editorFilters.dialogueFilters;
        if (allDialogues.Count == 0)
        {
            CreateNew(AssetType.Dialogue);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allDialogues[abilityIndex]._fileName;
        currentlyViewedDialogue = Instantiate(allDialogues[abilityIndex]) as RPGDialogue;
        GUI.FocusControl(null);
    }

    private void SelectNewDialogue(string fileName)
    {
        RPGDialogue newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allDialogues.Count; i++)
            if (allDialogues[i]._fileName == fileName)
            {
                newAb = allDialogues[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedDialogue = Instantiate(allDialogues[abIndex]) as RPGDialogue;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allDialogues[0]._fileName;
            currentlyViewedDialogue = Instantiate(allDialogues[0]) as RPGDialogue;
        }
        GUI.FocusControl(null);
    }
    
    private void SelectGameModifier(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.GameModifier;
        currentFilterList = editorFilters.gameModifierFilters;
        if (allGameModifiers.Count == 0)
        {
            CreateNew(AssetType.GameModifier);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allGameModifiers[abilityIndex]._fileName;
        currentlyViewedGameModifier = Instantiate(allGameModifiers[abilityIndex]) as RPGGameModifier;
        GUI.FocusControl(null);
    }

    private void SelectNewGameModifier(string fileName)
    {
        RPGGameModifier newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allGameModifiers.Count; i++)
            if (allGameModifiers[i]._fileName == fileName)
            {
                newAb = allGameModifiers[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedGameModifier = Instantiate(allGameModifiers[abIndex]) as RPGGameModifier;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allGameModifiers[0]._fileName;
            currentlyViewedGameModifier = Instantiate(allGameModifiers[0]) as RPGGameModifier;
        }
        GUI.FocusControl(null);
    }

    private void SelectTask(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Task;
        currentFilterList = editorFilters.taskFilters;
        if (allTasks.Count == 0)
        {
            CreateNew(AssetType.Task);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allTasks[abilityIndex]._fileName;
        currentlyViewedTask = Instantiate(allTasks[abilityIndex]) as RPGTask;
        GUI.FocusControl(null);
    }

    private void SelectNewTask(string fileName)
    {
        RPGTask newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allTasks.Count; i++)
            if (allTasks[i]._fileName == fileName)
            {
                newAb = allTasks[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedTask = Instantiate(allTasks[abIndex]) as RPGTask;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allTasks[0]._fileName;
            currentlyViewedTask = Instantiate(allTasks[0]) as RPGTask;
        }
        GUI.FocusControl(null);
    }

    private void SelectQuest(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Quest;
        currentFilterList = editorFilters.questFilters;
        if (allQuests.Count == 0)
        {
            CreateNew(AssetType.Quest);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allQuests[abilityIndex]._fileName;
        currentlyViewedQuest = Instantiate(allQuests[abilityIndex]) as RPGQuest;
        GUI.FocusControl(null);
    }

    private void SelectNewQuest(string fileName)
    {
        RPGQuest newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allQuests.Count; i++)
            if (allQuests[i]._fileName == fileName)
            {
                newAb = allQuests[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedQuest = Instantiate(allQuests[abIndex]) as RPGQuest;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allQuests[0]._fileName;
            currentlyViewedQuest = Instantiate(allQuests[0]) as RPGQuest;
        }
        GUI.FocusControl(null);
    }

    private void SelectCurrency(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Currency;
        currentFilterList = editorFilters.currencyFilters;
        if (allCurrencies.Count == 0)
        {
            CreateNew(AssetType.Currency);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allCurrencies[abilityIndex]._fileName;
        currentlyViewedCurrency = Instantiate(allCurrencies[abilityIndex]) as RPGCurrency;
        GUI.FocusControl(null);
    }

    private void SelectNewCurrency(string fileName)
    {
        RPGCurrency newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allCurrencies.Count; i++)
            if (allCurrencies[i]._fileName == fileName)
            {
                newAb = allCurrencies[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedCurrency = Instantiate(allCurrencies[abIndex]) as RPGCurrency;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allCurrencies[0]._fileName;
            currentlyViewedCurrency = Instantiate(allCurrencies[0]) as RPGCurrency;
        }
        GUI.FocusControl(null);
    }

    private void SelectMerchantTable(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.MerchantTable;
        currentFilterList = editorFilters.merchantTableFilters;
        if (allMerchantTables.Count == 0)
        {
            CreateNew(AssetType.MerchantTable);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allMerchantTables[abilityIndex]._fileName;
        currentlyViewedMerchantTable = Instantiate(allMerchantTables[abilityIndex]) as RPGMerchantTable;
        GUI.FocusControl(null);
    }

    private void SelectNewMerchantTable(string fileName)
    {
        RPGMerchantTable newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allMerchantTables.Count; i++)
            if (allMerchantTables[i]._fileName == fileName)
            {
                newAb = allMerchantTables[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedMerchantTable = Instantiate(allMerchantTables[abIndex]) as RPGMerchantTable;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allMerchantTables[0]._fileName;
            currentlyViewedMerchantTable = Instantiate(allMerchantTables[0]) as RPGMerchantTable;
        }
        GUI.FocusControl(null);
    }

    private void SelectLootTable(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.LootTable;
        currentFilterList = editorFilters.lootTablesFilters;
        if (allLootTables.Count == 0)
        {
            CreateNew(AssetType.LootTable);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allLootTables[abilityIndex]._fileName;
        currentlyViewedLootTable = Instantiate(allLootTables[abilityIndex]) as RPGLootTable;
        GUI.FocusControl(null);
    }

    private void SelectNewLootTable(string fileName)
    {
        RPGLootTable newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allLootTables.Count; i++)
            if (allLootTables[i]._fileName == fileName)
            {
                newAb = allLootTables[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedLootTable = Instantiate(allLootTables[abIndex]) as RPGLootTable;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allLootTables[0]._fileName;
            currentlyViewedLootTable = Instantiate(allLootTables[0]) as RPGLootTable;
        }
        GUI.FocusControl(null);
    }


    private void SelectTreePoint(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.TreePoint;
        currentFilterList = editorFilters.talentPointFilters;
        if (allTreePoints.Count == 0)
        {
            CreateNew(AssetType.TreePoint);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allTreePoints[abilityIndex]._fileName;
        currentlyViewedTreePoint = Instantiate(allTreePoints[abilityIndex]) as RPGTreePoint;
        GUI.FocusControl(null);
    }

    private void SelectNewTreePoint(string fileName)
    {
        RPGTreePoint newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allTreePoints.Count; i++)
            if (allTreePoints[i]._fileName == fileName)
            {
                newAb = allTreePoints[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedTreePoint = Instantiate(allTreePoints[abIndex]) as RPGTreePoint;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allTreePoints[0]._fileName;
            currentlyViewedTreePoint = Instantiate(allTreePoints[0]) as RPGTreePoint;
        }
        GUI.FocusControl(null);
    }

    private void SelectRace(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Race;
        currentFilterList = editorFilters.raceFilters;
        if (allRaces.Count == 0)
        {
            CreateNew(AssetType.Race);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allRaces[abilityIndex]._fileName;
        currentlyViewedRace = Instantiate(allRaces[abilityIndex]) as RPGRace;
        GUI.FocusControl(null);
    }

    private void SelectNewRace(string fileName)
    {
        RPGRace newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allRaces.Count; i++)
            if (allRaces[i]._fileName == fileName)
            {
                newAb = allRaces[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedRace = Instantiate(allRaces[abIndex]) as RPGRace;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allRaces[0]._fileName;
            currentlyViewedRace = Instantiate(allRaces[0]) as RPGRace;
        }
        GUI.FocusControl(null);
    }

    private void SelectClass(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Class;
        currentFilterList = editorFilters.classFilters;
        if (allClasses.Count == 0)
        {
            CreateNew(AssetType.Class);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allClasses[abilityIndex]._fileName;
        currentlyViewedClass = Instantiate(allClasses[abilityIndex]) as RPGClass;
        GUI.FocusControl(null);
    }

    private void SelectNewClass(string fileName)
    {
        RPGClass newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allClasses.Count; i++)
            if (allClasses[i]._fileName == fileName)
            {
                newAb = allClasses[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedClass = Instantiate(allClasses[abIndex]) as RPGClass;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allClasses[0]._fileName;
            currentlyViewedClass = Instantiate(allClasses[0]) as RPGClass;
        }
        GUI.FocusControl(null);
    }


    private void SelectWorldPosition(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.WorldPosition;
        currentFilterList = editorFilters.worldPositionFilters;
        if (allWorldPositions.Count == 0)
        {
            CreateNew(AssetType.WorldPosition);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allWorldPositions[abilityIndex]._fileName;
        currentlyViewedWorldPosition = Instantiate(allWorldPositions[abilityIndex]) as RPGWorldPosition;
        GUI.FocusControl(null);
    }

    private void SelectNewWorldPosition(string fileName)
    {
        RPGWorldPosition newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allWorldPositions.Count; i++)
            if (allWorldPositions[i]._fileName == fileName)
            {
                newAb = allWorldPositions[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedWorldPosition = Instantiate(allWorldPositions[abIndex]) as RPGWorldPosition;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allWorldPositions[0]._fileName;
            currentlyViewedWorldPosition = Instantiate(allWorldPositions[0]) as RPGWorldPosition;
        }
        GUI.FocusControl(null);
    }

    private void SelectLevelTemplate(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.LevelTemplate;
        currentFilterList = editorFilters.levelTemplateFilters;
        if (allLevelsTemplate.Count == 0)
        {
            CreateNew(AssetType.LevelTemplate);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allLevelsTemplate[abilityIndex]._fileName;
        currentlyViewedLevelTemplate = Instantiate(allLevelsTemplate[abilityIndex]) as RPGLevelsTemplate;
        GUI.FocusControl(null);
    }

    private void SelectNewLevelTemplate(string fileName)
    {
        RPGLevelsTemplate newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allLevelsTemplate.Count; i++)
            if (allLevelsTemplate[i]._fileName == fileName)
            {
                newAb = allLevelsTemplate[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedLevelTemplate = Instantiate(allLevelsTemplate[abIndex]) as RPGLevelsTemplate;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allAbilities[0]._fileName;
            currentlyViewedLevelTemplate = Instantiate(allLevelsTemplate[0]) as RPGLevelsTemplate;
        }
        GUI.FocusControl(null);
    }

    private void SelectSkill(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Skill;
        currentFilterList = editorFilters.skillFilters;
        if (allSkills.Count == 0)
        {
            CreateNew(AssetType.Skill);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allSkills[abilityIndex]._fileName;
        currentlyViewedSkill = Instantiate(allSkills[abilityIndex]) as RPGSkill;
        GUI.FocusControl(null);
    }

    private void SelectNewSkill(string fileName)
    {
        RPGSkill newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allSkills.Count; i++)
            if (allSkills[i]._fileName == fileName)
            {
                newAb = allSkills[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedSkill = Instantiate(allSkills[abIndex]) as RPGSkill;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allAbilities[0]._fileName;
            currentlyViewedSkill = Instantiate(allSkills[0]) as RPGSkill;
        }
        GUI.FocusControl(null);
    }

    private void SelectEffect(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Effect;
        currentFilterList = editorFilters.effectFilters;
        if (allEffects.Count == 0)
        {
            CreateNew(AssetType.Effect);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allEffects[abilityIndex]._fileName;
        currentlyViewedEffect = Instantiate(allEffects[abilityIndex]) as RPGEffect;
        GUI.FocusControl(null);
    }

    private void SelectNPC(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.NPC;
        currentFilterList = editorFilters.NPCFilters;
        if (allNPCs.Count == 0)
        {
            CreateNew(AssetType.NPC);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allNPCs[abilityIndex]._fileName;
        currentlyViewedNPC = Instantiate(allNPCs[abilityIndex]) as RPGNpc;
        GUI.FocusControl(null);
    }

    private void SelectNewEffect(string fileName)
    {
        RPGEffect newEf = null;
        var efIndex = -1;
        for (var i = 0; i < allEffects.Count; i++)
            if (allEffects[i]._fileName == fileName)
            {
                newEf = allEffects[i];
                efIndex = i;
            }

        if (newEf != null)
        {
            curViewElementIndex = efIndex;
            cachedFileName = newEf._fileName;
            currentlyViewedEffect = Instantiate(allEffects[efIndex]) as RPGEffect;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allEffects[0]._fileName;
            currentlyViewedEffect = Instantiate(allEffects[0]) as RPGEffect;
        }
        GUI.FocusControl(null);
    }

    private void SelectNewNPC(string fileName)
    {
        RPGNpc newEf = null;
        var efIndex = -1;
        for (var i = 0; i < allNPCs.Count; i++)
            if (allNPCs[i]._fileName == fileName)
            {
                newEf = allNPCs[i];
                efIndex = i;
            }

        if (newEf != null)
        {
            curViewElementIndex = efIndex;
            cachedFileName = newEf._fileName;
            currentlyViewedNPC = Instantiate(allNPCs[efIndex]) as RPGNpc;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allNPCs[0]._fileName;
            currentlyViewedNPC = Instantiate(allNPCs[0]) as RPGNpc;
        }
        GUI.FocusControl(null);
    }


    private void SelectStat(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Stat;
        currentFilterList = editorFilters.statFilters;
        if (allStats.Count == 0)
        {
            CreateNew(AssetType.Stat);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allStats[abilityIndex]._fileName;
        currentlyViewedStat = Instantiate(allStats[abilityIndex]) as RPGStat;
        GUI.FocusControl(null);
    }

    private void SelectNewStat(string fileName)
    {
        RPGStat newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allStats.Count; i++)
            if (allStats[i]._fileName == fileName)
            {
                newAb = allStats[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedStat = Instantiate(allStats[abIndex]) as RPGStat;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allStats[0]._fileName;
            currentlyViewedStat = Instantiate(allStats[0]) as RPGStat;
        }
        GUI.FocusControl(null);
    }


    private void SelectItem(int abilityIndex)
    {
        currentlyViewedAssetType = AssetType.Item;
        currentFilterList = editorFilters.itemFilters;
        if (allItems.Count == 0)
        {
            CreateNew(AssetType.Item);
            return;
        }
        curViewElementIndex = abilityIndex;
        cachedFileName = allItems[abilityIndex]._fileName;
        currentlyViewedItem = Instantiate(allItems[abilityIndex]) as RPGItem;
        GUI.FocusControl(null);
    }

    private void SelectNewItem(string fileName)
    {
        RPGItem newAb = null;
        var abIndex = -1;
        for (var i = 0; i < allItems.Count; i++)
            if (allItems[i]._fileName == fileName)
            {
                newAb = allItems[i];
                abIndex = i;
            }

        if (newAb != null)
        {
            curViewElementIndex = abIndex;
            cachedFileName = newAb._fileName;
            currentlyViewedItem = Instantiate(allItems[abIndex]) as RPGItem;
        }
        else
        {
            curViewElementIndex = 0;
            cachedFileName = allItems[0]._fileName;
            currentlyViewedItem = Instantiate(allItems[0]) as RPGItem;
        }
        GUI.FocusControl(null);
    }

    private void DrawEffectView()
    {
        if (currentlyViewedEffect == null)
        {
            if (allEffects.Count == 0)
            {
                CreateNew(AssetType.Effect);
                return;
            }

            currentlyViewedEffect = Instantiate(allEffects[0]) as RPGEffect;
        }
        
        UpdateViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        editorFilters.effectModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.effectModuleSection.showBaseInfo);
        if (editorFilters.effectModuleSection.showBaseInfo)
        {
            GUILayout.Space(5);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedEffect.icon = DrawIconField(currentlyViewedEffect.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedEffect.ID);
            currentlyViewedEffect._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedEffect._name);
            currentlyViewedEffect.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedEffect.displayName);
            currentlyViewedEffect._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_EFFECT_" + currentlyViewedEffect._name);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }


        GUILayout.Space(10);
        editorFilters.effectModuleSection.showType =
            HandleModuleBanner("TYPE", editorFilters.effectModuleSection.showType);
        if (editorFilters.effectModuleSection.showType)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedEffect.effectType = (RPGEffect.EFFECT_TYPE) EditorGUILayout.EnumPopup(
                new GUIContent("Type", "What type of effect is it?"), currentlyViewedEffect.effectType);
            
            
            var curDispelTag = getIndexFromName("EffectTag",
                currentlyViewedEffect.effectTag);
            var tempIndex1 = EditorGUILayout.Popup("Tag", curDispelTag,
                combatSettings.EffectTagList.ToArray());
            if (combatSettings.EffectTagList.Count > 0)
                currentlyViewedEffect.effectTag =
                    combatSettings.EffectTagList[tempIndex1];
            
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        if (currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.DamageOverTime ||
            currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.HealOverTime
            || currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Immune ||
            currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Shapeshifting
            || currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Sleep ||
            currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Stat
            || currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Stun ||
            currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Taunt
            || currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Root ||
            currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Silence ||
            currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Flying ||
            currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Stealth)
        {
            GUILayout.Space(10);
            editorFilters.effectModuleSection.showStateSettings =
                HandleModuleBanner("STATE SETTINGS", editorFilters.effectModuleSection.showStateSettings);

            if (editorFilters.effectModuleSection.showStateSettings)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(bigHorizontalSpace, true);
                currentlyViewedEffect.isState = true;
                currentlyViewedEffect.isBuffOnSelf =
                    DrawHorizontalToggle("Buff?", "Is this effect a buff on self?", smallFieldHeight,
                        currentlyViewedEffect.isBuffOnSelf);
                currentlyViewedEffect.endless =
                    DrawHorizontalToggle("Endless?", "Is this effect not ending after a duration?", smallFieldHeight,
                        currentlyViewedEffect.endless);
                if (!currentlyViewedEffect.endless)
                {
                    currentlyViewedEffect.duration = DrawHorizontalFloatField("Duration",
                        "How long does the effect last?",
                        smallFieldHeight, currentlyViewedEffect.duration);
                }

                if (currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.DamageOverTime ||
                    currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.HealOverTime ||
                    currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Stat)
                {
                    currentlyViewedEffect.allowMultiple =
                        DrawHorizontalToggle("Multiple?",
                            "Can this effect be active multiple times on the same target?",
                            smallFieldHeight,
                            currentlyViewedEffect.allowMultiple);
                    currentlyViewedEffect.allowMixedCaster =
                        DrawHorizontalToggle("Mixed Caster?",
                            "Can effects stack together even if they are not from the same caster?",
                            smallFieldHeight,
                            currentlyViewedEffect.allowMixedCaster);
                    currentlyViewedEffect.stackLimit = DrawHorizontalIntField("Max Stacks",
                        "How many times maximum can it stack?",
                        smallFieldHeight, currentlyViewedEffect.stackLimit);
                    currentlyViewedEffect.pulses = DrawHorizontalIntField("Pulses Count",
                        "How many times will this effect pulse? Each pulse will trigger the effect again",
                        smallFieldHeight, currentlyViewedEffect.pulses);
                }
                EndHorizontalMargin(bigHorizontalSpace, true);
            }
        }
        else
        {
            currentlyViewedEffect.isState = false;
        }

        GUILayout.Space(10);
        editorFilters.effectModuleSection.showRanks =
            HandleModuleBanner("RANKS", editorFilters.effectModuleSection.showRanks);
        if (editorFilters.effectModuleSection.showRanks)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("+ Add Rank", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
            {
                var newRankData = new RPGEffect.RPGEffectRankData();
                currentlyViewedEffect.ranks.Add(newRankData);
            }

            if (currentlyViewedEffect.ranks.Count > 0)
            {
                GUILayout.Space(20);
                if (GUILayout.Button("- Remove Rank", skin.GetStyle("RemoveAbilityRankButton"),
                    GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedEffect.ranks.RemoveAt(currentlyViewedEffect.ranks.Count - 1);
                    return;
                }
            }

            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, false);

            GUILayout.Space(10);

            for (var i = 0; i < currentlyViewedEffect.ranks.Count; i++)
            {
                StartHorizontalMargin(bigHorizontalSpace, false);

                var rankNbr = i + 1;
                GUILayout.BeginHorizontal();
                if (GUILayout.Button("Rank: " + rankNbr, skin.GetStyle("AbilityRankButton"),
                    GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                {
                    currentlyViewedEffect.ranks[i].ShowedInEditor = !currentlyViewedEffect.ranks[i].ShowedInEditor;
                    GUI.FocusControl(null);
                }

                if (i > 0)
                {
                    GUILayout.Space(5);
                    if (GUILayout.Button("Copy Above", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                        GUILayout.Height(smallButtonHeight)))
                    {
                        currentlyViewedEffect.copyData(currentlyViewedEffect.ranks[i],
                            currentlyViewedEffect.ranks[i - 1]);
                        GUI.FocusControl(null);
                    }
                }

                GUILayout.EndHorizontal();
                EndHorizontalMargin(bigHorizontalSpace, false);

                if (currentlyViewedEffect.ranks[i].ShowedInEditor)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, true);
                    switch (currentlyViewedEffect.effectType)
                    {
                        case RPGEffect.EFFECT_TYPE.InstantDamage:
                        case RPGEffect.EFFECT_TYPE.DamageOverTime:
                        {
                            currentlyViewedEffect.ranks[i].Damage = DrawHorizontalIntField("Damage",
                                "What is the base damage value of this effect?",
                                smallFieldHeight, currentlyViewedEffect.ranks[i].Damage);
                            currentlyViewedEffect.ranks[i].alteredStatREF =
                                (RPGStat) EditorGUILayout.ObjectField(
                                    new GUIContent("Altered Vitality Stat",
                                        "The stat that will be altered by this effect"),
                                    RPGBuilderUtilities.GetStatFromIDEditor(
                                        currentlyViewedEffect.ranks[i].alteredStatID,
                                        allStats),
                                    typeof(RPGStat), false);

                            if (currentlyViewedEffect.ranks[i].alteredStatREF != null &&
                                !currentlyViewedEffect.ranks[i].alteredStatREF.isVitalityStat)
                            {
                                currentlyViewedEffect.ranks[i].alteredStatREF = null;
                                EditorUtility.DisplayDialog("Warning",
                                    "The altered Stat can only be of type Vitality", "OK");
                            }

                            currentlyViewedEffect.ranks[i].alteredStatID =
                                currentlyViewedEffect.ranks[i].alteredStatREF != null
                                    ? currentlyViewedEffect.ranks[i].alteredStatREF.ID
                                    : -1;

                            currentlyViewedEffect.ranks[i].hitValueType =
                                (RPGAbility.COST_TYPES) EditorGUILayout.EnumPopup(
                                    new GUIContent("Hit Type",
                                        "Is this a flat value, or a percentage of the altered stat?"),
                                    currentlyViewedEffect.ranks[i].hitValueType);

                            if ((currentlyViewedEffect.ranks[i].hitValueType == RPGAbility.COST_TYPES.PERCENT_OF_MAX ||
                                 currentlyViewedEffect.ranks[i].hitValueType ==
                                 RPGAbility.COST_TYPES.PERCENT_OF_CURRENT) &&
                                currentlyViewedEffect.ranks[i].Damage < 0)
                            {
                                currentlyViewedEffect.ranks[i].Damage = 0;
                            }

                            currentlyViewedEffect.ranks[i].FlatCalculation = DrawHorizontalToggle(
                                "Flat Calculation?", "",
                                smallFieldHeight, currentlyViewedEffect.ranks[i].FlatCalculation);

                            currentlyViewedEffect.ranks[i].removeStealth = DrawHorizontalToggle(
                                "Remove Stealth?", "Does this effect remove stealth on hit stealth units?",
                                smallFieldHeight, currentlyViewedEffect.ranks[i].removeStealth);
                            
                            if (!currentlyViewedEffect.ranks[i].FlatCalculation)
                            {
                                currentlyViewedEffect.ranks[i].CannotCrit = DrawHorizontalToggle(
                                    "Cannot Crit?", "Does this effect have crit disabled?",
                                    smallFieldHeight, currentlyViewedEffect.ranks[i].CannotCrit);

                                currentlyViewedEffect.ranks[i].mainDamageType =
                                    (RPGEffect.MAIN_DAMAGE_TYPE) EditorGUILayout.EnumPopup(
                                        new GUIContent("Main Damage Type",
                                            "What is the main damage type of this effect?"),
                                        currentlyViewedEffect.ranks[i].mainDamageType);

                                var curStatList = getCorrectStatsList(RPGStat.STAT_TYPE.DAMAGE);
                                var currentSecondaryDamageIndex = GetIndexFromSecondaryDamageName(curStatList,
                                    currentlyViewedEffect.ranks[i].secondaryDamageType);
                                var tempIndex = 0;
                                tempIndex = EditorGUILayout.Popup(
                                    new GUIContent("Damage Type", "What type of damage is it?"),
                                    currentSecondaryDamageIndex, curStatList);
                                currentlyViewedEffect.ranks[i].secondaryDamageType =
                                    GetSecondaryDamageNameFromID(curStatList, tempIndex);

                                currentlyViewedEffect.ranks[i].weaponDamageModifier = DrawHorizontalFloatField(
                                    "Weapon Modifier",
                                    "The percentage of the weapon damage that will be added to the effect damage",
                                    smallFieldHeight, currentlyViewedEffect.ranks[i].weaponDamageModifier);
                                if (currentlyViewedEffect.ranks[i].weaponDamageModifier > 0)
                                {
                                    currentlyViewedEffect.ranks[i].useWeapon1Damage = DrawHorizontalToggle(
                                        "Use Weapon 1?", "",
                                        smallFieldHeight, currentlyViewedEffect.ranks[i].useWeapon1Damage);
                                    currentlyViewedEffect.ranks[i].useWeapon2Damage = DrawHorizontalToggle(
                                        "Use Weapon 2?", "",
                                        smallFieldHeight, currentlyViewedEffect.ranks[i].useWeapon2Damage);
                                }

                                currentlyViewedEffect.ranks[i].skillModifier = DrawHorizontalFloatField(
                                    "Skill Modifier", "How much damage is added by skill level",
                                    smallFieldHeight, currentlyViewedEffect.ranks[i].skillModifier);

                                if (currentlyViewedEffect.ranks[i].skillModifier > 0)
                                {
                                    currentlyViewedEffect.ranks[i].skillModifierREF =
                                        (RPGSkill) EditorGUILayout.ObjectField(
                                            new GUIContent("Skill", "The skill that will increase damage"),
                                            RPGBuilderUtilities.GetSkillFromIDEditor(
                                                currentlyViewedEffect.ranks[i].skillModifierID,
                                                allSkills), typeof(RPGSkill), false);

                                    currentlyViewedEffect.ranks[i].skillModifierID =
                                        currentlyViewedEffect.ranks[i].skillModifierREF != null
                                            ? currentlyViewedEffect.ranks[i].skillModifierREF.ID
                                            : -1;
                                }

                                currentlyViewedEffect.ranks[i].lifesteal = DrawHorizontalFloatField("Lifesteal",
                                    "How much of the damage dealt should be converted to self heals?",
                                    smallFieldHeight, currentlyViewedEffect.ranks[i].lifesteal);
                                currentlyViewedEffect.ranks[i].maxHealthModifier = DrawHorizontalFloatField(
                                    "Max Health Mod",
                                    "How much of the caster's maximum health in % should be converted to extra damage?",
                                    smallFieldHeight, currentlyViewedEffect.ranks[i].maxHealthModifier);
                                currentlyViewedEffect.ranks[i].missingHealthModifier = DrawHorizontalFloatField(
                                    "Missing Health Mod",
                                    "How much extra damage in % should be dealt for each percent of missing health?",
                                    smallFieldHeight, currentlyViewedEffect.ranks[i].missingHealthModifier);

                                currentlyViewedEffect.ranks[i].requiredEffectREF =
                                    (RPGEffect) EditorGUILayout.ObjectField(
                                        new GUIContent("Effect Required",
                                            "The effect required to deal extra damage"),
                                        RPGBuilderUtilities.GetEffectFromIDEditor(
                                            currentlyViewedEffect.ranks[i].requiredEffectID,
                                            allEffects), typeof(RPGEffect), false);

                                currentlyViewedEffect.ranks[i].requiredEffectID =
                                    currentlyViewedEffect.ranks[i].requiredEffectREF != null
                                        ? currentlyViewedEffect.ranks[i].requiredEffectREF.ID
                                        : -1;

                                if (currentlyViewedEffect.ranks[i].requiredEffectID != -1)
                                {
                                    currentlyViewedEffect.ranks[i].requiredEffectDamageModifier =
                                        DrawHorizontalFloatField("Effect Damage Modifier",
                                            "How much damage is added if the required effect is active on the target? In percent",
                                            smallFieldHeight,
                                            currentlyViewedEffect.ranks[i].requiredEffectDamageModifier);
                                }

                                currentlyViewedEffect.ranks[i].damageStatREF =
                                    (RPGStat) EditorGUILayout.ObjectField(
                                        new GUIContent("Damage Stat", "The stat used to convert as damage"),
                                        RPGBuilderUtilities.GetStatFromIDEditor(
                                            currentlyViewedEffect.ranks[i].damageStatID,
                                            allStats), typeof(RPGStat), false);

                                currentlyViewedEffect.ranks[i].damageStatID =
                                    currentlyViewedEffect.ranks[i].damageStatREF != null
                                        ? currentlyViewedEffect.ranks[i].damageStatREF.ID
                                        : -1;

                                if (currentlyViewedEffect.ranks[i].damageStatID != -1)
                                {
                                    currentlyViewedEffect.ranks[i].damageStatModifier =
                                        DrawHorizontalFloatField("Damage Modifier",
                                            "The percentage of this stat added as damage",
                                            smallFieldHeight,
                                            currentlyViewedEffect.ranks[i].damageStatModifier);
                                }
                            }

                            break;
                        }
                        case RPGEffect.EFFECT_TYPE.HealOverTime:
                        case RPGEffect.EFFECT_TYPE.InstantHeal:
                        {
                            currentlyViewedEffect.ranks[i].Damage =
                                DrawHorizontalIntField("Healing", "What is the base healing value?",
                                    smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].Damage);

                            currentlyViewedEffect.ranks[i].alteredStatREF =
                                (RPGStat) EditorGUILayout.ObjectField(
                                    new GUIContent("Altered Vitality Stat",
                                        "The stat that will be altered by this effect"),
                                    RPGBuilderUtilities.GetStatFromIDEditor(
                                        currentlyViewedEffect.ranks[i].alteredStatID,
                                        allStats),
                                    typeof(RPGStat), false);

                            if (currentlyViewedEffect.ranks[i].alteredStatREF != null &&
                                !currentlyViewedEffect.ranks[i].alteredStatREF.isVitalityStat)
                            {
                                currentlyViewedEffect.ranks[i].alteredStatREF = null;
                                EditorUtility.DisplayDialog("Warning",
                                    "The altered Stat can only be of type Vitality", "OK");
                            }

                            currentlyViewedEffect.ranks[i].alteredStatID =
                                currentlyViewedEffect.ranks[i].alteredStatREF != null
                                    ? currentlyViewedEffect.ranks[i].alteredStatREF.ID
                                    : -1;

                            currentlyViewedEffect.ranks[i].hitValueType =
                                (RPGAbility.COST_TYPES) EditorGUILayout.EnumPopup(
                                    new GUIContent("Hit Type",
                                        "Is this a flat value, or a percentage of the altered stat?"),
                                    currentlyViewedEffect.ranks[i].hitValueType);

                            if ((currentlyViewedEffect.ranks[i].hitValueType == RPGAbility.COST_TYPES.PERCENT_OF_MAX ||
                                 currentlyViewedEffect.ranks[i].hitValueType ==
                                 RPGAbility.COST_TYPES.PERCENT_OF_CURRENT) &&
                                currentlyViewedEffect.ranks[i].Damage < 0)
                            {
                                currentlyViewedEffect.ranks[i].Damage = 0;
                            }

                            currentlyViewedEffect.ranks[i].FlatCalculation =
                                DrawHorizontalToggle("Flat Calculation?",
                                    "",
                                    smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].FlatCalculation);

                            if (!currentlyViewedEffect.ranks[i].FlatCalculation)
                            {
                                var curStatList = getCorrectStatsList(RPGStat.STAT_TYPE.HEALING);
                                var currentSecondaryDamageIndex = GetIndexFromSecondaryDamageName(curStatList,
                                    currentlyViewedEffect.ranks[i].secondaryDamageType);
                                var tempIndex = 0;
                                tempIndex = EditorGUILayout.Popup(
                                    new GUIContent("Heal Type", "What type of heal is it?"),
                                    currentSecondaryDamageIndex, curStatList);
                                currentlyViewedEffect.ranks[i].secondaryDamageType =
                                    GetSecondaryDamageNameFromID(curStatList, tempIndex);


                                currentlyViewedEffect.ranks[i].weaponDamageModifier =
                                    DrawHorizontalFloatField("Weapon Modifier",
                                        "The percentage of the weapon damage that will be added to the effect healing",
                                        smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].weaponDamageModifier);

                                currentlyViewedEffect.ranks[i].skillModifier =
                                    DrawHorizontalFloatField("Skill Modifier",
                                        "How much damage is added by skill level",
                                        smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].skillModifier);

                                if (currentlyViewedEffect.ranks[i].skillModifier > 0)
                                {
                                    currentlyViewedEffect.ranks[i].skillModifierREF =
                                        (RPGSkill) EditorGUILayout.ObjectField(
                                            new GUIContent("Skill", "The skill that will increase damage"),
                                            RPGBuilderUtilities.GetSkillFromIDEditor(
                                                currentlyViewedEffect.ranks[i].skillModifierID,
                                                allSkills), typeof(RPGSkill), false);

                                    currentlyViewedEffect.ranks[i].skillModifierID =
                                        currentlyViewedEffect.ranks[i].skillModifierREF != null
                                            ? currentlyViewedEffect.ranks[i].skillModifierREF.ID
                                            : -1;
                                }

                                currentlyViewedEffect.ranks[i].requiredEffectREF =
                                    (RPGEffect) EditorGUILayout.ObjectField(
                                        new GUIContent("Effect Required",
                                            "The effect required to deal extra damage"),
                                        RPGBuilderUtilities.GetEffectFromIDEditor(
                                            currentlyViewedEffect.ranks[i].requiredEffectID,
                                            allEffects), typeof(RPGEffect), false);

                                currentlyViewedEffect.ranks[i].requiredEffectID =
                                    currentlyViewedEffect.ranks[i].requiredEffectREF != null
                                        ? currentlyViewedEffect.ranks[i].requiredEffectREF.ID
                                        : -1;

                                if (currentlyViewedEffect.ranks[i].requiredEffectID != -1)
                                {
                                    currentlyViewedEffect.ranks[i].requiredEffectDamageModifier =
                                        DrawHorizontalFloatField("Effect Damage Modifier",
                                            "How much damage is added if the required effect is active on the target? In percent",
                                            smallFieldHeight,
                                            currentlyViewedEffect.ranks[i].requiredEffectDamageModifier);
                                }

                                currentlyViewedEffect.ranks[i].damageStatREF =
                                    (RPGStat) EditorGUILayout.ObjectField(
                                        new GUIContent("Damage Stat", "The stat used to convert as damage"),
                                        RPGBuilderUtilities.GetStatFromIDEditor(
                                            currentlyViewedEffect.ranks[i].damageStatID,
                                            allStats), typeof(RPGStat), false);

                                currentlyViewedEffect.ranks[i].damageStatID =
                                    currentlyViewedEffect.ranks[i].damageStatREF != null
                                        ? currentlyViewedEffect.ranks[i].damageStatREF.ID
                                        : -1;

                                if (currentlyViewedEffect.ranks[i].damageStatID != -1)
                                {
                                    currentlyViewedEffect.ranks[i].damageStatModifier =
                                        DrawHorizontalFloatField("Damage Modifier",
                                            "The percentage of this stat added as damage",
                                            smallFieldHeight,
                                            currentlyViewedEffect.ranks[i].damageStatModifier);
                                }
                            }

                            break;
                        }
                        case RPGEffect.EFFECT_TYPE.Stat:
                        {
                            StartHorizontalMargin(bigHorizontalSpace, false);
                            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"),
                                GUILayout.ExpandWidth(true),
                                GUILayout.MaxWidth(middleButtonMaxWidth),
                                GUILayout.Height(25)))
                            {
                                currentlyViewedEffect.ranks[i].statEffectsData
                                    .Add(new RPGEffect.STAT_EFFECTS_DATA());
                            }

                            EndHorizontalMargin(bigHorizontalSpace, false);

                            for (var a = 0; a < currentlyViewedEffect.ranks[i].statEffectsData.Count; a++)
                            {
                                GUILayout.Space(10);

                                var requirementNumber = a + 1;
                                EditorGUILayout.BeginHorizontal();
                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                    GUILayout.Height(20)))
                                {
                                    currentlyViewedEffect.ranks[i].statEffectsData.RemoveAt(a);
                                    return;
                                }

                                var statName = "";
                                if (currentlyViewedEffect.ranks[i].statEffectsData[a].statREF != null)
                                    statName = currentlyViewedEffect.ranks[i].statEffectsData[a].statREF
                                        .displayName;
                                EditorGUILayout.LabelField("" + requirementNumber + ": " + statName);
                                EditorGUILayout.EndHorizontal();
                                currentlyViewedEffect.ranks[i].statEffectsData[a].statID =
                                    DrawRPGDataEntryField(currentlyViewedEffect.ranks[i].statEffectsData[a].statID,
                                        "Stat", "Stat");
                                currentlyViewedEffect.ranks[i].statEffectsData[a].statEffectModification =
                                    DrawHorizontalFloatField("Value",
                                        "",
                                        smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].statEffectsData[a].statEffectModification);

                                RPGStat statREF =
                                    RPGBuilderUtilities.GetStatFromIDEditor(
                                        currentlyViewedEffect.ranks[i].statEffectsData[a].statID, allStats);
                                if (statREF != null)
                                {
                                    if (!statREF.isPercentStat)
                                    {
                                        currentlyViewedEffect.ranks[i].statEffectsData[a].isPercent =
                                            DrawHorizontalToggle("Is Percent?",
                                                "",
                                                smallFieldHeight,
                                                currentlyViewedEffect.ranks[i].statEffectsData[a].isPercent);
                                    }
                                    else
                                    {
                                        currentlyViewedEffect.ranks[i].statEffectsData[a].isPercent = false;
                                    }
                                }

                                GUILayout.Space(10);
                            }

                            break;
                        }
                        case RPGEffect.EFFECT_TYPE.Teleport:
                            currentlyViewedEffect.ranks[i].teleportType =
                                (RPGEffect.TELEPORT_TYPE) EditorGUILayout.EnumPopup(
                                    new GUIContent("Type", "What type of teleport is it?"),
                                    currentlyViewedEffect.ranks[i].teleportType);
                            switch (currentlyViewedEffect.ranks[i].teleportType)
                            {
                                case RPGEffect.TELEPORT_TYPE.gameScene:
                                {
                                    currentlyViewedEffect.ranks[i].gameSceneREF =
                                        (RPGGameScene) EditorGUILayout.ObjectField(
                                            new GUIContent("Game Scene", "The game scene to teleport to"),
                                            RPGBuilderUtilities.GetGameSceneFromIDEditor(
                                                currentlyViewedEffect.ranks[i].gameSceneID,
                                                allGameScenes), typeof(RPGGameScene), false);

                                    currentlyViewedEffect.ranks[i].gameSceneID =
                                        currentlyViewedEffect.ranks[i].gameSceneREF != null
                                            ? currentlyViewedEffect.ranks[i].gameSceneREF.ID
                                            : -1;

                                    currentlyViewedEffect.ranks[i].teleportPOS =
                                        DrawHorizontalVector3("Location", "Position coordinates to teleport to",
                                            smallFieldHeight,
                                            currentlyViewedEffect.ranks[i].teleportPOS);
                                    break;
                                }
                                case RPGEffect.TELEPORT_TYPE.position:
                                    currentlyViewedEffect.ranks[i].teleportPOS =
                                        DrawHorizontalVector3("Location", "Position coordinates to teleport to",
                                            smallFieldHeight,
                                            currentlyViewedEffect.ranks[i].teleportPOS);
                                    break;
                                case RPGEffect.TELEPORT_TYPE.directional:
                                    currentlyViewedEffect.ranks[i].teleportDirectionalType =
                                        (RPGEffect.TELEPORT_DIRECTIONAL_TYPE) EditorGUILayout.EnumPopup(
                                            "Direction Type",
                                            currentlyViewedEffect.ranks[i].teleportDirectionalType);
                                    currentlyViewedEffect.ranks[i].teleportDirectionalDistance =
                                        DrawHorizontalFloatField("Distance", "Maximum distance for the teleport",
                                            smallFieldHeight,
                                            currentlyViewedEffect.ranks[i].teleportDirectionalDistance);
                                    LayerMask tempMask = EditorGUILayout.MaskField(
                                        new GUIContent("Block Layers",
                                            "What layers are blocking the teleport?"),
                                        InternalEditorUtility.LayerMaskToConcatenatedLayersMask(
                                            currentlyViewedEffect.ranks[i].teleportDirectionalBlockLayers),
                                        InternalEditorUtility.layers, GUILayout.ExpandWidth(true));
                                    currentlyViewedEffect.ranks[i].teleportDirectionalBlockLayers =
                                        InternalEditorUtility.ConcatenatedLayersMaskToLayerMask(tempMask);
                                    break;
                            }

                            break;
                        case RPGEffect.EFFECT_TYPE.Pet:
                            currentlyViewedEffect.ranks[i].petType =
                                (RPGEffect.PET_TYPE) EditorGUILayout.EnumPopup(
                                    new GUIContent("Type", "What type of pet is it?"),
                                    currentlyViewedEffect.ranks[i].petType);
                            currentlyViewedEffect.ranks[i].petNPCDataID = DrawRPGDataEntryField(
                                currentlyViewedEffect.ranks[i].petNPCDataID, "NPC",
                                "NPC");
                            currentlyViewedEffect.ranks[i].petSPawnCount =
                                DrawHorizontalIntField("Spawn Count",
                                    "How many pets should this effect spawn at once?",
                                    smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].petSPawnCount);
                            currentlyViewedEffect.ranks[i].petDuration =
                                DrawHorizontalFloatField("Duration", "How long should the pet(s) stay active?",
                                    smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].petDuration);
                            currentlyViewedEffect.ranks[i].petScaleWithCharacter =
                                DrawHorizontalToggle("Character Scaling?",
                                    "Does this pet scale with the character level?",
                                    smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].petScaleWithCharacter);
                            break;
                        case RPGEffect.EFFECT_TYPE.RollLootTable:
                            currentlyViewedEffect.ranks[i].lootTableID =
                                DrawRPGDataEntryField(currentlyViewedEffect.ranks[i].lootTableID, "LootTable",
                                    "Loot Table");
                            break;
                        case RPGEffect.EFFECT_TYPE.Knockback:
                            currentlyViewedEffect.ranks[i].knockbackDistance = DrawHorizontalFloatField(
                                "Knockback Distance", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].knockbackDistance);
                            break;
                        case RPGEffect.EFFECT_TYPE.Motion:
                            currentlyViewedEffect.ranks[i].motionDistance = DrawHorizontalFloatField(
                                "Distance", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].motionDistance);
                            currentlyViewedEffect.ranks[i].motionSpeed = DrawHorizontalFloatField(
                                "Speed", "0.5 is standard speed", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].motionSpeed);
                            currentlyViewedEffect.ranks[i].motionDirection = DrawHorizontalVector3(
                                "Direction", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].motionDirection);
                            currentlyViewedEffect.ranks[i].isImmuneDuringMotion = DrawHorizontalToggle(
                                "Immunity?", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].isImmuneDuringMotion);
                            currentlyViewedEffect.ranks[i].motionIgnoreUseCondition = DrawHorizontalToggle(
                                "Ignore Use Conditions?", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].motionIgnoreUseCondition);
                            break;
                        case RPGEffect.EFFECT_TYPE.Blocking:

                            currentlyViewedEffect.ranks[i].blockAngle = DrawHorizontalFloatField(
                                "Block Angle", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].blockAngle);

                            currentlyViewedEffect.ranks[i].isBlockChargeTime = DrawHorizontalToggle(
                                "Charge Time?", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].isBlockChargeTime);
                            if (currentlyViewedEffect.ranks[i].isBlockChargeTime)
                            {
                                currentlyViewedEffect.ranks[i].blockChargeTime = DrawHorizontalFloatField(
                                    "Charge Duration",
                                    "How long from the moment the block is starting until it is starting to be effective?",
                                    smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].blockChargeTime);
                            }

                            currentlyViewedEffect.ranks[i].blockDurationType =
                                (RPGEffect.BLOCK_DURATION_TYPE) EditorGUILayout.EnumPopup(
                                    new GUIContent("Duration Type", ""),
                                    currentlyViewedEffect.ranks[i].blockDurationType,
                                    GUILayout.Height(smallFieldHeight));
                            switch (currentlyViewedEffect.ranks[i].blockDurationType)
                            {
                                case RPGEffect.BLOCK_DURATION_TYPE.Time:
                                {
                                    currentlyViewedEffect.ranks[i].isBlockLimitedDuration = DrawHorizontalToggle(
                                        "Limited Duration?", "", smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].isBlockLimitedDuration);
                                    if (currentlyViewedEffect.ranks[i].isBlockLimitedDuration)
                                    {
                                        currentlyViewedEffect.ranks[i].blockDuration = DrawHorizontalFloatField(
                                            "Block Duration", "How long will the block last", smallFieldHeight,
                                            currentlyViewedEffect.ranks[i].blockDuration);
                                    }

                                    break;
                                }
                                case RPGEffect.BLOCK_DURATION_TYPE.HoldKey:
                                    break;
                            }

                            currentlyViewedEffect.ranks[i].isBlockPowerDecay = DrawHorizontalToggle(
                                "Power Decay?", "Is the block power decaying over time?", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].isBlockPowerDecay);
                            if (currentlyViewedEffect.ranks[i].isBlockPowerDecay)
                            {
                                currentlyViewedEffect.ranks[i].blockPowerDecay = DrawHorizontalFloatField(
                                    "Decay Speed", "How fast will the power decay", smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].blockPowerDecay);
                            }


                            currentlyViewedEffect.ranks[i].blockEndType =
                                (RPGEffect.BLOCK_END_TYPE) EditorGUILayout.EnumPopup(
                                    new GUIContent("End Type", ""),
                                    currentlyViewedEffect.ranks[i].blockEndType, GUILayout.Height(smallFieldHeight));
                            switch (currentlyViewedEffect.ranks[i].blockEndType)
                            {
                                case RPGEffect.BLOCK_END_TYPE.HitCount:
                                    currentlyViewedEffect.ranks[i].blockHitCount = DrawHorizontalIntField(
                                        "Block Count", "", smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].blockHitCount);
                                    break;
                                case RPGEffect.BLOCK_END_TYPE.MaxDamageBlocked:
                                    currentlyViewedEffect.ranks[i].blockMaxDamage = DrawHorizontalIntField(
                                        "Max Damage Blocked", "", smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].blockMaxDamage);
                                    break;
                                case RPGEffect.BLOCK_END_TYPE.Stat:
                                    break;
                            }

                            currentlyViewedEffect.ranks[i].blockStatID =
                                DrawRPGDataEntryField(currentlyViewedEffect.ranks[i].blockStatID, "Stat",
                                    "Stat");

                            currentlyViewedEffect.ranks[i].blockStatDecay = DrawHorizontalToggle(
                                "Stat Drain?", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].blockStatDecay);
                            if (currentlyViewedEffect.ranks[i].blockStatDecay)
                            {
                                currentlyViewedEffect.ranks[i].blockStatDecayAmount = DrawHorizontalIntField(
                                    "Drain Amount", "", smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].blockStatDecayAmount);
                                currentlyViewedEffect.ranks[i].blockStatDecayInterval =
                                    DrawHorizontalFloatField(
                                        "Drain Interval", "", smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].blockStatDecayInterval);
                            }

                            currentlyViewedEffect.ranks[i].blockPowerFlat = DrawHorizontalIntField(
                                "Block Flat Amount", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].blockPowerFlat);
                            currentlyViewedEffect.ranks[i].blockPowerModifier = DrawHorizontalFloatField(
                                "Block Percent Amount", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].blockPowerModifier);

                            currentlyViewedEffect.ranks[i].isBlockKnockback = DrawHorizontalToggle(
                                "Block Knockback?", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].isBlockKnockback);

                            currentlyViewedEffect.ranks[i].blockAnyDamage = DrawHorizontalToggle(
                                "Block Any Damage?", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].blockAnyDamage);
                            if (!currentlyViewedEffect.ranks[i].blockAnyDamage)
                            {
                                currentlyViewedEffect.ranks[i].blockPhysicalDamage = DrawHorizontalToggle(
                                    "Block Physical Damage?", "", smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].blockPhysicalDamage);
                                currentlyViewedEffect.ranks[i].blockMagicalDamage = DrawHorizontalToggle(
                                    "Block Magical Damage?", "", smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].blockMagicalDamage);

                                GUILayout.Space(10);
                                StartHorizontalMargin(bigHorizontalSpace, false);
                                if (GUILayout.Button("+ Add Custom Damage Type", skin.GetStyle("AddButton"),
                                    GUILayout.ExpandWidth(true),
                                    GUILayout.MaxWidth(middleButtonMaxWidth),
                                    GUILayout.Height(25)))
                                {
                                    currentlyViewedEffect.ranks[i].blockedDamageTypes.Add("");
                                }

                                EndHorizontalMargin(bigHorizontalSpace, false);

                                for (var a = 0;
                                    a < currentlyViewedEffect.ranks[i].blockedDamageTypes.Count;
                                    a++)
                                {
                                    GUILayout.Space(10);

                                    var requirementNumber = a + 1;
                                    EditorGUILayout.BeginHorizontal();
                                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"),
                                        GUILayout.Width(20),
                                        GUILayout.Height(20)))
                                    {
                                        currentlyViewedEffect.ranks[i].blockedDamageTypes.RemoveAt(a);
                                        return;
                                    }

                                    var statName = currentlyViewedEffect.ranks[i].blockedDamageTypes[a];
                                    EditorGUILayout.LabelField("" + requirementNumber + ": " + statName);
                                    EditorGUILayout.EndHorizontal();

                                    var currentStatFunctionIndex =
                                        getIndexFromCustomDamageTypes(currentlyViewedEffect.ranks[i]
                                            .blockedDamageTypes[a]);
                                    if (currentStatFunctionIndex == -1)
                                    {
                                        currentStatFunctionIndex = 0;
                                    }

                                    List<string> allCustomDamageTypes = getCustomDamageTypes();
                                    var tempIndex = EditorGUILayout.Popup(
                                        new GUIContent("Damage Type",
                                            "The function of this Stat, will be checked in the game logic to execute the function"),
                                        currentStatFunctionIndex, allCustomDamageTypes.ToArray(),
                                        GUILayout.Height(smallFieldHeight));

                                    if (allCustomDamageTypes.Count > 0)
                                    {
                                        currentlyViewedEffect.ranks[i].blockedDamageTypes[a] =
                                            allCustomDamageTypes[tempIndex];
                                    }
                                    else
                                    {
                                        currentlyViewedEffect.ranks[i].blockedDamageTypes[a] = "";
                                    }

                                    GUILayout.Space(10);
                                }
                            }
                            
                            GUILayout.Space(10);
                                StartHorizontalMargin(bigHorizontalSpace, false);
                                if (GUILayout.Button("+ Add On Block Action", skin.GetStyle("AddButton"),
                                    GUILayout.ExpandWidth(true),
                                    GUILayout.MaxWidth(middleButtonMaxWidth),
                                    GUILayout.Height(25)))
                                {
                                    currentlyViewedEffect.ranks[i].onBlockActions.Add(new RPGEffect.ON_BLOCK_ACTION());
                                }

                                EndHorizontalMargin(bigHorizontalSpace, false);

                                for (var a = 0;
                                    a < currentlyViewedEffect.ranks[i].onBlockActions.Count;
                                    a++)
                                {
                                    GUILayout.Space(10);

                                    var requirementNumber = a + 1;
                                    EditorGUILayout.BeginHorizontal();
                                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"),
                                        GUILayout.Width(20),
                                        GUILayout.Height(20)))
                                    {
                                        currentlyViewedEffect.ranks[i].onBlockActions.RemoveAt(a);
                                        return;
                                    }

                                    var statName = currentlyViewedEffect.ranks[i].onBlockActions[a].blockActionType;
                                    EditorGUILayout.LabelField("" + requirementNumber + ": " + statName);
                                    EditorGUILayout.EndHorizontal();

                                    currentlyViewedEffect.ranks[i].onBlockActions[a].blockActionType =
                                        (RPGEffect.ON_BLOCK_ACTION_TYPE) EditorGUILayout.EnumPopup(
                                            new GUIContent("Action Type", ""),
                                            currentlyViewedEffect.ranks[i].onBlockActions[a].blockActionType, GUILayout.Height(smallFieldHeight));
                                    switch (currentlyViewedEffect.ranks[i].onBlockActions[a].blockActionType)
                                    {
                                        case RPGEffect.ON_BLOCK_ACTION_TYPE.Ability:
                                            currentlyViewedEffect.ranks[i].onBlockActions[a].entryID =
                                                DrawRPGDataEntryField(
                                                    currentlyViewedEffect.ranks[i].onBlockActions[a].entryID,
                                                    "Ability", "Ability");

                                            currentlyViewedEffect.ranks[i].onBlockActions[a].abMustBeKnown =
                                                DrawHorizontalToggle("Must be known?", "", smallFieldHeight, currentlyViewedEffect.ranks[i].onBlockActions[a].abMustBeKnown);
                                            break;
                                        case RPGEffect.ON_BLOCK_ACTION_TYPE.Effect:
                                            currentlyViewedEffect.ranks[i].onBlockActions[a].target = 
                                                (RPGCombatDATA.TARGET_TYPE) EditorGUILayout.EnumPopup(
                                                    new GUIContent("Target Type", ""),
                                                    currentlyViewedEffect.ranks[i].onBlockActions[a].target, GUILayout.Height(smallFieldHeight));
                                            
                                            currentlyViewedEffect.ranks[i].onBlockActions[a].entryID =
                                                DrawRPGDataEntryField(
                                                    currentlyViewedEffect.ranks[i].onBlockActions[a].entryID,
                                                    "Effect", "Effect");

                                            int effectRankField = currentlyViewedEffect.ranks[i].onBlockActions[a].effectRank + 1;
                                            if (effectRankField == 0) effectRankField = 1;

                                            RPGEffect effectREF =
                                                RPGBuilderUtilities.GetEffectFromIDEditor(
                                                    currentlyViewedEffect.ranks[i].onBlockActions[a].entryID,
                                                    allEffects);
                                            if (effectREF != null)
                                            {
                                                if (effectRankField > effectREF.ranks.Count)
                                                {
                                                    effectRankField = effectREF.ranks.Count;
                                                }
                                            }

                                            effectRankField = DrawHorizontalIntField("Effect Rank", "", smallFieldHeight, effectRankField);
                                            currentlyViewedEffect.ranks[i].onBlockActions[a].effectRank = effectRankField - 1;
                                            
                                            currentlyViewedEffect.ranks[i].onBlockActions[a].chance = DrawHorizontalSlider(
                                                "Chance",
                                                "",
                                                smallFieldHeight, currentlyViewedEffect.ranks[i].onBlockActions[a].chance, 0f, 100f);
                                            break;
                                    }

                                    GUILayout.Space(10);
                                }

                            break;

                        case RPGEffect.EFFECT_TYPE.Dispel:

                            currentlyViewedEffect.ranks[i].dispelType =
                                (RPGEffect.DISPEL_TYPE) EditorGUILayout.EnumPopup(
                                    new GUIContent("Dispel Type", ""),
                                    currentlyViewedEffect.ranks[i].dispelType, GUILayout.Height(smallFieldHeight));

                            switch (currentlyViewedEffect.ranks[i].dispelType)
                            {
                                case RPGEffect.DISPEL_TYPE.EffectType:
                                    currentlyViewedEffect.ranks[i].dispelEffectType =
                                        (RPGEffect.EFFECT_TYPE) EditorGUILayout.EnumPopup(
                                            new GUIContent("Effect Type", ""),
                                            currentlyViewedEffect.ranks[i].dispelEffectType,
                                            GUILayout.Height(smallFieldHeight));
                                    break;
                                case RPGEffect.DISPEL_TYPE.EffectTag:
                                    var curDispelTag = getIndexFromName("EffectTag",
                                        currentlyViewedEffect.ranks[i].dispelEffectTag);
                                    var tempIndex1 = EditorGUILayout.Popup("Tag", curDispelTag,
                                        combatSettings.EffectTagList.ToArray());
                                    if (combatSettings.EffectTagList.Count > 0)
                                        currentlyViewedEffect.ranks[i].dispelEffectTag =
                                            combatSettings.EffectTagList[tempIndex1];
                                    break;
                                case RPGEffect.DISPEL_TYPE.Effect:
                                    currentlyViewedEffect.ranks[i].dispelEffectID =
                                        DrawRPGDataEntryField(currentlyViewedEffect.ranks[i].dispelEffectID, "Effect",
                                            "Effect");
                                    break;
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }

                            break;
                        
                        case RPGEffect.EFFECT_TYPE.Shapeshifting:

                            currentlyViewedEffect.ranks[i].shapeshiftingModel = (GameObject) EditorGUILayout.ObjectField("Model",
                                currentlyViewedEffect.ranks[i].shapeshiftingModel, typeof(GameObject), false, GUILayout.Height(smallFieldHeight));
            
                            currentlyViewedEffect.ranks[i].shapeshiftingmodelPosition = DrawHorizontalVector3("Model Position", "",
                                smallFieldHeight, currentlyViewedEffect.ranks[i].shapeshiftingmodelPosition);
                            currentlyViewedEffect.ranks[i].shapeshiftingmodelScale = DrawHorizontalVector3("Model Scale", "",
                                smallFieldHeight, currentlyViewedEffect.ranks[i].shapeshiftingmodelScale);
            
                            currentlyViewedEffect.ranks[i].shapeshiftingAnimatorController = (RuntimeAnimatorController) 
                                EditorGUILayout.ObjectField("Animator Controller", currentlyViewedEffect.ranks[i].shapeshiftingAnimatorController,
                                    typeof(RuntimeAnimatorController), false, GUILayout.Height(20));
            
                            currentlyViewedEffect.ranks[i].shapeshiftingAnimatorAvatar = (Avatar) 
                                EditorGUILayout.ObjectField("Avatar", currentlyViewedEffect.ranks[i].shapeshiftingAnimatorAvatar,
                                    typeof(Avatar), false, GUILayout.Height(20));
            
                            currentlyViewedEffect.ranks[i].shapeshiftingAnimatorUseRootMotion = DrawHorizontalToggle("Animator Root Motion", "",
                                smallFieldHeight, currentlyViewedEffect.ranks[i].shapeshiftingAnimatorUseRootMotion);
            
                            currentlyViewedEffect.ranks[i].shapeshiftingAnimatorUpdateMode = (AnimatorUpdateMode) EditorGUILayout.EnumPopup(
                                new GUIContent("Animator Update Mode", ""),
                                currentlyViewedEffect.ranks[i].shapeshiftingAnimatorUpdateMode, GUILayout.Height(smallFieldHeight));
                            currentlyViewedEffect.ranks[i].shapeshiftingAnimatorCullingMode = (AnimatorCullingMode) EditorGUILayout.EnumPopup(
                                new GUIContent("Animator Culling Mode", ""),
                                currentlyViewedEffect.ranks[i].shapeshiftingAnimatorCullingMode, GUILayout.Height(smallFieldHeight));
                            currentlyViewedEffect.ranks[i].canCameraAim =
                                DrawHorizontalToggle("Can Camera Aim?", "", smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].canCameraAim);

                            GUILayout.Space(10);
                            
                            currentlyViewedEffect.ranks[i].shapeshiftingOverrideMainActionBar =
                                DrawHorizontalToggle("Override Main Action Bar?", "", smallFieldHeight,
                                    currentlyViewedEffect.ranks[i].shapeshiftingOverrideMainActionBar);

                            if (currentlyViewedEffect.ranks[i].shapeshiftingOverrideMainActionBar)
                            {
                                GUILayout.Space(10);
                                StartHorizontalMargin(bigHorizontalSpace, false);
                                if (GUILayout.Button("+ Add Ability", skin.GetStyle("AddButton"),
                                    GUILayout.ExpandWidth(true),
                                    GUILayout.MaxWidth(middleButtonMaxWidth),
                                    GUILayout.Height(25)))
                                {
                                    currentlyViewedEffect.ranks[i].shapeshiftingActiveAbilities
                                        .Add(-1);
                                }

                                EndHorizontalMargin(bigHorizontalSpace, false);

                                StartHorizontalMargin(bigHorizontalSpace, true);
                                for (var a = 0; a < currentlyViewedEffect.ranks[i].shapeshiftingActiveAbilities.Count; a++)
                                {
                                    GUILayout.Space(10);

                                    var requirementNumber = a + 1;
                                    EditorGUILayout.BeginHorizontal();
                                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                        GUILayout.Height(20)))
                                    {
                                        currentlyViewedEffect.ranks[i].shapeshiftingActiveAbilities.RemoveAt(a);
                                        return;
                                    }

                                    var statName = "";
                                    if (currentlyViewedEffect.ranks[i].shapeshiftingActiveAbilities[a] != -1)
                                        statName = RPGBuilderUtilities
                                            .GetAbilityFromIDEditor(
                                                currentlyViewedEffect.ranks[i].shapeshiftingActiveAbilities[a],
                                                allAbilities)._name;
                                    
                                    EditorGUILayout.LabelField("" + requirementNumber + ": " + statName);
                                    EditorGUILayout.EndHorizontal();
                                    
                                    
                                    currentlyViewedEffect.ranks[i].shapeshiftingActiveAbilities[a] =
                                        DrawRPGDataEntryField(
                                            currentlyViewedEffect.ranks[i].shapeshiftingActiveAbilities[a], "Ability",
                                            "Ability");

                                    GUILayout.Space(10);
                                }
                                EndHorizontalMargin(bigHorizontalSpace, true);
                            }
                            
                            
                            GUILayout.Space(10);
                            StartHorizontalMargin(bigHorizontalSpace, false);
                            if (GUILayout.Button("+ Add Effect", skin.GetStyle("AddButton"),
                                GUILayout.ExpandWidth(true),
                                GUILayout.Height(25)))
                            {
                                currentlyViewedEffect.ranks[i].nestedEffects
                                    .Add(new RPGAbility.AbilityEffectsApplied());
                            }

                            EndHorizontalMargin(bigHorizontalSpace, false);

                            for (var a = 0; a < currentlyViewedEffect.ranks[i].nestedEffects.Count; a++)
                            {
                                GUILayout.Space(10);
                                StartHorizontalMargin(bigHorizontalSpace, true);
                                var requirementNumber = a + 1;
                                EditorGUILayout.BeginHorizontal();
                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                    GUILayout.Height(20)))
                                {
                                    currentlyViewedEffect.ranks[i].nestedEffects.RemoveAt(a);
                                    return;
                                }

                                var effectName = "";
                                if (currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF != null)
                                    effectName = currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF._name;
                                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                                EditorGUILayout.EndHorizontal();

                                currentlyViewedEffect.ranks[i].nestedEffects[a].target =
                                    RPGCombatDATA.TARGET_TYPE.Caster;

                                currentlyViewedEffect.ranks[i].nestedEffects[a].chance =
                                    DrawHorizontalSlider("Chance", "",
                                        smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].nestedEffects[a].chance, 0f, 100f);

                                currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF =
                                    (RPGEffect) EditorGUILayout.ObjectField("Effect",
                                        RPGBuilderUtilities.GetEffectFromIDEditor(
                                            currentlyViewedEffect.ranks[i].nestedEffects[a].effectID, allEffects),
                                        typeof(RPGEffect), false);

                                var effectRankField = currentlyViewedEffect.ranks[i].nestedEffects[a].effectRank + 1;
                                if (effectRankField == 0) effectRankField = 1;

                                if (currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF != null)
                                {
                                    currentlyViewedEffect.ranks[i].nestedEffects[a].effectID =
                                        currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF.ID;

                                    if (effectRankField > currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF
                                        .ranks.Count)
                                        effectRankField = currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF
                                            .ranks.Count;
                                }
                                else
                                {
                                    currentlyViewedEffect.ranks[i].nestedEffects[a].effectID = -1;
                                }

                                effectRankField = DrawHorizontalIntField("Effect Rank", "", smallFieldHeight,
                                    effectRankField);
                                currentlyViewedEffect.ranks[i].nestedEffects[a].effectRank = effectRankField - 1;

                                currentlyViewedEffect.ranks[i].nestedEffects[a].delay =
                                    DrawHorizontalFloatField("Delay", "", smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].nestedEffects[a].delay);

                                EndHorizontalMargin(bigHorizontalSpace, true);
                                GUILayout.Space(25);
                            }
                            
                            GUILayout.Space(10);
                            
                            StartHorizontalMargin(bigHorizontalSpace, false);
                            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"),
                                GUILayout.ExpandWidth(true),
                                GUILayout.MaxWidth(middleButtonMaxWidth),
                                GUILayout.Height(25)))
                            {
                                currentlyViewedEffect.ranks[i].statEffectsData
                                    .Add(new RPGEffect.STAT_EFFECTS_DATA());
                            }

                            EndHorizontalMargin(bigHorizontalSpace, false);

                            for (var a = 0; a < currentlyViewedEffect.ranks[i].statEffectsData.Count; a++)
                            {
                                GUILayout.Space(10);
                                StartHorizontalMargin(bigHorizontalSpace, true);
                                var requirementNumber = a + 1;
                                EditorGUILayout.BeginHorizontal();
                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                    GUILayout.Height(20)))
                                {
                                    currentlyViewedEffect.ranks[i].statEffectsData.RemoveAt(a);
                                    return;
                                }

                                var statName = "";
                                if (currentlyViewedEffect.ranks[i].statEffectsData[a].statREF != null)
                                    statName = currentlyViewedEffect.ranks[i].statEffectsData[a].statREF
                                        .displayName;
                                EditorGUILayout.LabelField("" + requirementNumber + ": " + statName);
                                EditorGUILayout.EndHorizontal();
                                
                                currentlyViewedEffect.ranks[i].statEffectsData[a].statID =
                                    DrawRPGDataEntryField(currentlyViewedEffect.ranks[i].statEffectsData[a].statID,
                                        "Stat", "Stat");
                                currentlyViewedEffect.ranks[i].statEffectsData[a].statEffectModification =
                                    DrawHorizontalFloatField("Value",
                                        "",
                                        smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].statEffectsData[a].statEffectModification);

                                if (currentlyViewedEffect.ranks[i].statEffectsData[a].statID != -1)
                                {
                                    RPGStat statREF = RPGBuilderUtilities.GetStatFromIDEditor(
                                        currentlyViewedEffect.ranks[i].statEffectsData[a].statID, allStats);
                                    if (!statREF.isPercentStat)
                                    {
                                        currentlyViewedEffect.ranks[i].statEffectsData[a].isPercent =
                                            DrawHorizontalToggle("Is Percent?",
                                                "",
                                                smallFieldHeight,
                                                currentlyViewedEffect.ranks[i].statEffectsData[a].isPercent);
                                    }
                                    else
                                    {
                                        currentlyViewedEffect.ranks[i].statEffectsData[a].isPercent = false;
                                    }
                                }

                                EndHorizontalMargin(bigHorizontalSpace, true);
                                GUILayout.Space(10);
                            }

                            break;
                        
                        
                        case RPGEffect.EFFECT_TYPE.Stealth:
                            currentlyViewedEffect.ranks[i].showStealthActionBar = DrawHorizontalToggle(
                                "Show Stealth Action Bar?", "", smallFieldHeight,
                                currentlyViewedEffect.ranks[i].showStealthActionBar);
                            
                            GUILayout.Space(10);
                            StartHorizontalMargin(bigHorizontalSpace, false);
                            if (GUILayout.Button("+ Add Effect", skin.GetStyle("AddButton"),
                                GUILayout.ExpandWidth(true),
                                GUILayout.Height(25)))
                            {
                                currentlyViewedEffect.ranks[i].nestedEffects
                                    .Add(new RPGAbility.AbilityEffectsApplied());
                            }

                            EndHorizontalMargin(bigHorizontalSpace, false);

                            for (var a = 0; a < currentlyViewedEffect.ranks[i].nestedEffects.Count; a++)
                            {
                                GUILayout.Space(10);
                                StartHorizontalMargin(bigHorizontalSpace, true);
                                var requirementNumber = a + 1;
                                EditorGUILayout.BeginHorizontal();
                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                                    GUILayout.Height(20)))
                                {
                                    currentlyViewedEffect.ranks[i].nestedEffects.RemoveAt(a);
                                    return;
                                }

                                var effectName = "";
                                if (currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF != null)
                                    effectName = currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF._name;
                                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                                EditorGUILayout.EndHorizontal();

                                currentlyViewedEffect.ranks[i].nestedEffects[a].target =
                                    RPGCombatDATA.TARGET_TYPE.Caster;

                                currentlyViewedEffect.ranks[i].nestedEffects[a].chance =
                                    DrawHorizontalSlider("Chance", "",
                                        smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].nestedEffects[a].chance, 0f, 100f);

                                currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF =
                                    (RPGEffect) EditorGUILayout.ObjectField("Effect",
                                        RPGBuilderUtilities.GetEffectFromIDEditor(
                                            currentlyViewedEffect.ranks[i].nestedEffects[a].effectID, allEffects),
                                        typeof(RPGEffect), false);

                                var effectRankField = currentlyViewedEffect.ranks[i].nestedEffects[a].effectRank + 1;
                                if (effectRankField == 0) effectRankField = 1;

                                if (currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF != null)
                                {
                                    currentlyViewedEffect.ranks[i].nestedEffects[a].effectID =
                                        currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF.ID;

                                    if (effectRankField > currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF
                                        .ranks.Count)
                                        effectRankField = currentlyViewedEffect.ranks[i].nestedEffects[a].effectREF
                                            .ranks.Count;
                                }
                                else
                                {
                                    currentlyViewedEffect.ranks[i].nestedEffects[a].effectID = -1;
                                }

                                effectRankField = DrawHorizontalIntField("Effect Rank", "", smallFieldHeight,
                                    effectRankField);
                                currentlyViewedEffect.ranks[i].nestedEffects[a].effectRank = effectRankField - 1;

                                currentlyViewedEffect.ranks[i].nestedEffects[a].delay =
                                    DrawHorizontalFloatField("Delay", "", smallFieldHeight,
                                        currentlyViewedEffect.ranks[i].nestedEffects[a].delay);

                                EndHorizontalMargin(bigHorizontalSpace, true);
                                GUILayout.Space(25);
                            }
                            
                            GUILayout.Space(10);
                            break;
                    }

                    EndHorizontalMargin(bigHorizontalSpace, true);
                    GUILayout.Space(10);

                    if (currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Sleep
                        || currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Root ||
                        currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Silence
                        || currentlyViewedEffect.effectType == RPGEffect.EFFECT_TYPE.Taunt)
                    {
                        EditorGUILayout.LabelField("NOT YET IMPLEMENTED");
                    }

                    editorFilters.effectModuleSection.showVisualEffects =
                        HandleModuleBanner("VISUALS EFFECTS",
                            editorFilters.effectModuleSection.showVisualEffects);
                    GUILayout.Space(10);

                    if (editorFilters.effectModuleSection.showVisualEffects)
                    {
                        currentlyViewedEffect.ranks[i].visualEffects =
                            DrawVisualEffectsList(currentlyViewedEffect.ranks[i].visualEffects);
                    }
                    
                    editorFilters.effectModuleSection.showVisualAnimations =
                        HandleModuleBanner("VISUAL ANIMATIONS", editorFilters.effectModuleSection.showVisualAnimations);
                    GUILayout.Space(10);

                    if (editorFilters.effectModuleSection.showVisualAnimations)
                    {
                        currentlyViewedEffect.ranks[i].visualAnimations =
                            DrawVisualAnimationsList(currentlyViewedEffect.ranks[i].visualAnimations);
                    }
                    GUILayout.Space(30);
                }
                GUILayout.Space(10);
            }
        }

        GUILayout.Space(30);

        EditorGUILayout.EndScrollView();
    }


    private List<string> getCustomDamageTypes()
    {
        if(combatSettings == null) LoadSettings();
        List<string> allCustomTypes = new List<string>();

        foreach (var statFunction in combatSettings.StatFunctionsList)
        {
            if (statFunction == "NONE" || statFunction == "PHYSICAL_DAMAGE" || statFunction == "MAGICAL_DAMAGE"
                || statFunction == "PHYSICAL_RESISTANCE" || statFunction == "MAGICAL_RESISTANCE") continue;
            allCustomTypes.Add(statFunction);
        }

        return allCustomTypes;
    }
    
    private int getIndexFromCustomDamageTypes(string customDamageType)
    {
        var list = getCustomDamageTypes();
        for (var index = 0; index < list.Count; index++)
        {
            if(list[index] != customDamageType) continue;
            return index;
        }

        return -1;
    }
    
    private void DrawNPCsView()
    {
        if (currentlyViewedNPC == null)
        {
            if (allNPCs.Count == 0)
            {
                CreateNew(AssetType.NPC);
                return;
            }

            currentlyViewedNPC = Instantiate(allNPCs[0]) as RPGNpc;
        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedNPC;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        editorFilters.npcModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.npcModuleSection.showBaseInfo);
        if (editorFilters.npcModuleSection.showBaseInfo)
        {
            GUILayout.Space(5);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedNPC.icon = DrawIconField(currentlyViewedNPC.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedNPC.ID);
            currentlyViewedNPC._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedNPC._name);
            currentlyViewedNPC.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedNPC.displayName);
            currentlyViewedNPC._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_NPC_" + currentlyViewedNPC._name);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.npcModuleSection.showVisual =
            HandleModuleBanner("PREFAB SETUP", editorFilters.npcModuleSection.showVisual);
        if (editorFilters.npcModuleSection.showVisual)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedNPC.NPCVisual = (GameObject) EditorGUILayout.ObjectField("NPC Model",
                currentlyViewedNPC.NPCVisual, typeof(GameObject), false, GUILayout.Height(smallFieldHeight));
            
            currentlyViewedNPC.modelPosition = DrawHorizontalVector3("Model Position", "",
                smallFieldHeight, currentlyViewedNPC.modelPosition);
            currentlyViewedNPC.modelScale = DrawHorizontalVector3("Model Scale", "",
                smallFieldHeight, currentlyViewedNPC.modelScale);
            
            currentlyViewedNPC.nameplateYOffset = DrawHorizontalFloatField("Nameplate Y Offset", "How far on the Y axis should the nameplate be from the NPC origin",
            smallFieldHeight, currentlyViewedNPC.nameplateYOffset);
            
            currentlyViewedNPC.animatorController = (RuntimeAnimatorController) 
                EditorGUILayout.ObjectField("Animator Controller", currentlyViewedNPC.animatorController,
                typeof(RuntimeAnimatorController), false, GUILayout.Height(20));
            
            currentlyViewedNPC.animatorAvatar = (Avatar) 
                EditorGUILayout.ObjectField("Avatar", currentlyViewedNPC.animatorAvatar,
                    typeof(Avatar), false, GUILayout.Height(20));
            
            currentlyViewedNPC.animatorUseRootMotion = DrawHorizontalToggle("Animator Root Motion", "",
                smallFieldHeight, currentlyViewedNPC.animatorUseRootMotion);
            
            currentlyViewedNPC.animatorUpdateMode = (AnimatorUpdateMode) EditorGUILayout.EnumPopup(
                new GUIContent("Animator Update Mode", ""),
                currentlyViewedNPC.animatorUpdateMode, GUILayout.Height(smallFieldHeight));
            currentlyViewedNPC.AnimatorCullingMode = (AnimatorCullingMode) EditorGUILayout.EnumPopup(
                new GUIContent("Animator Culling Mode", ""),
                currentlyViewedNPC.AnimatorCullingMode, GUILayout.Height(smallFieldHeight));
            
            currentlyViewedNPC.navmeshAgentRadius = DrawHorizontalFloatField("NavMesh Agent Radius", "",
                smallFieldHeight, currentlyViewedNPC.navmeshAgentRadius);
            currentlyViewedNPC.navmeshAgentHeight = DrawHorizontalFloatField("NavMesh Agent Height", "",
                smallFieldHeight, currentlyViewedNPC.navmeshAgentHeight);
            currentlyViewedNPC.navmeshAgentAngularSpeed = DrawHorizontalFloatField("NavMesh Agent Rotation Speed", "",
                smallFieldHeight, currentlyViewedNPC.navmeshAgentAngularSpeed);
            currentlyViewedNPC.navmeshObstacleAvoidance = (ObstacleAvoidanceType) EditorGUILayout.EnumPopup(
                new GUIContent("Obstacle Avoidance", ""),
                currentlyViewedNPC.navmeshObstacleAvoidance, GUILayout.Height(smallFieldHeight));
            
            currentlyViewedNPC.colliderType = (RPGNpc.NPCColliderType) EditorGUILayout.EnumPopup(
                new GUIContent("Collider Type", ""),
                currentlyViewedNPC.colliderType, GUILayout.Height(smallFieldHeight));

            switch (currentlyViewedNPC.colliderType)
            {
                case RPGNpc.NPCColliderType.Capsule:
                    currentlyViewedNPC.colliderRadius = DrawHorizontalFloatField("Collider Radius", "",
                        smallFieldHeight, currentlyViewedNPC.colliderRadius);
                    currentlyViewedNPC.colliderHeight = DrawHorizontalFloatField("Collider Height", "",
                        smallFieldHeight, currentlyViewedNPC.colliderHeight);
                    currentlyViewedNPC.colliderCenter = DrawHorizontalVector3("Collider Center", "",
                        smallFieldHeight, currentlyViewedNPC.colliderCenter);
                    break;
                case RPGNpc.NPCColliderType.Sphere:
                    currentlyViewedNPC.colliderRadius = DrawHorizontalFloatField("Collider Radius", "",
                        smallFieldHeight, currentlyViewedNPC.colliderRadius);
                    currentlyViewedNPC.colliderCenter = DrawHorizontalVector3("Collider Center", "",
                        smallFieldHeight, currentlyViewedNPC.colliderCenter);
                    break;
                case RPGNpc.NPCColliderType.Box:
                    currentlyViewedNPC.colliderCenter = DrawHorizontalVector3("Collider Center", "",
                        smallFieldHeight, currentlyViewedNPC.colliderCenter);
                    currentlyViewedNPC.colliderSize = DrawHorizontalVector3("Collider Size", "",
                        smallFieldHeight, currentlyViewedNPC.colliderSize);
                    break;
            }
            
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.npcModuleSection.showFunctions =
            HandleModuleBanner("FUNCTIONS", editorFilters.npcModuleSection.showFunctions);
        if (editorFilters.npcModuleSection.showFunctions)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedNPC.isDummyTarget =
                DrawHorizontalToggle("Dummy?", "If this is on, the NPC will never die. Yep, quite OP.",
                    smallFieldHeight,
                    currentlyViewedNPC.isDummyTarget);
            currentlyViewedNPC.isCombatEnabled =
                DrawHorizontalToggle("Combat?", "If this is on, the NPC will be able to fight and be attacked.",
                    smallFieldHeight,
                    currentlyViewedNPC.isCombatEnabled);
            currentlyViewedNPC.isTargetable =
                DrawHorizontalToggle("Targetable?", "If this is on, the NPC will be possible to target.",
                    smallFieldHeight,
                    currentlyViewedNPC.isTargetable);
            currentlyViewedNPC.isPlayerInteractable =
                DrawHorizontalToggle("Player Interactable?", "If this is on, the NPC be set on the interaction layer and can be interacted with the interact key.",
                    smallFieldHeight,
                    currentlyViewedNPC.isPlayerInteractable);
            currentlyViewedNPC.isNameplateEnabled =DrawHorizontalToggle("Show Nameplate?", "If this is on, the NPC will have a nameplate above it.",
                smallFieldHeight,
                currentlyViewedNPC.isNameplateEnabled);
            currentlyViewedNPC.isMovementEnabled =
                DrawHorizontalToggle("Movement?", "If this is on, the NPC will be able to perform movement actions.",
                    smallFieldHeight,
                    currentlyViewedNPC.isMovementEnabled);
            currentlyViewedNPC.isCollisionEnabled =
                DrawHorizontalToggle("Collision Enabled?", "If this is on, the NPC will collide with other NPCs and the player.",
                    smallFieldHeight,
                    currentlyViewedNPC.isCollisionEnabled);

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.npcModuleSection.showCombat =
            HandleModuleBanner("COMBAT", editorFilters.npcModuleSection.showCombat);
        if (editorFilters.npcModuleSection.showCombat)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            currentlyViewedNPC.factionREF = (RPGFaction) EditorGUILayout.ObjectField("Faction:",
                RPGBuilderUtilities.GetFactionFromIDEditor(currentlyViewedNPC.factionID, allFactions),
                typeof(RPGFaction), false, GUILayout.Height(smallFieldHeight));
            currentlyViewedNPC.speciesID = DrawRPGDataEntryField(currentlyViewedNPC.speciesID, "Species", "Species:");

            currentlyViewedNPC.factionID =
                currentlyViewedNPC.factionREF != null ? currentlyViewedNPC.factionREF.ID : -1;

            currentlyViewedNPC.isScalingWithPlayer =
                DrawHorizontalToggle("Scale With Player?", "If this is on, the NPC level will be the player class level.",
                    smallFieldHeight,
                    currentlyViewedNPC.isScalingWithPlayer);
            if (!currentlyViewedNPC.isScalingWithPlayer)
            {
                currentlyViewedNPC.MinLevel =
                    DrawHorizontalIntField("Level. Min", "The minimum level of the NPC",
                        smallFieldHeight,
                        currentlyViewedNPC.MinLevel);
                currentlyViewedNPC.MaxLevel =
                    DrawHorizontalIntField("Level. Max", "The maximum level of the NPC",
                        smallFieldHeight,
                        currentlyViewedNPC.MaxLevel);

                if (currentlyViewedNPC.MaxLevel < currentlyViewedNPC.MinLevel)
                    currentlyViewedNPC.MaxLevel = currentlyViewedNPC.MinLevel;
                if (currentlyViewedNPC.MinEXP > currentlyViewedNPC.MaxEXP)
                    currentlyViewedNPC.MaxLevel = currentlyViewedNPC.MinLevel;
            }

            currentlyViewedNPC.npcType = (RPGNpc.NPC_TYPE) EditorGUILayout.EnumPopup(
                new GUIContent("NPC Type", "The type of the NPC, will define interactions and actions"),
                currentlyViewedNPC.npcType, GUILayout.Height(smallFieldHeight));

            currentlyViewedNPC.AggroRange =
                DrawHorizontalFloatField("Aggro Range", "The aggro range of this NPC to its enemies",
                    smallFieldHeight,
                    currentlyViewedNPC.AggroRange);
            currentlyViewedNPC.distanceFromTarget =
                DrawHorizontalFloatField("Distance from target",
                    "How far away should this NPC try to stay from his target in combat?",
                    smallFieldHeight,
                    currentlyViewedNPC.distanceFromTarget);
            currentlyViewedNPC.distanceFromOwner =
                DrawHorizontalFloatField("Distance from owner",
                    "How far away should this NPC try to stay from his owner when following him?",
                    smallFieldHeight,
                    currentlyViewedNPC.distanceFromOwner);
            currentlyViewedNPC.DistanceToTargetReset =
                DrawHorizontalFloatField("Reset target distance",
                    "How far away should the target be for the NPC to leave combat",
                    smallFieldHeight,
                    currentlyViewedNPC.DistanceToTargetReset);

            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace - 25, false);
            if (GUILayout.Button("+ Add Ability", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedNPC.abilities.Add(new RPGNpc.NPC_ABILITY_DATA());
            }

            EndHorizontalMargin(middleButtonSpace - 25, false);

            var ThisList7 = serialObj.FindProperty("abilities");
            currentlyViewedNPC.abilities = GetTargetObjectOfProperty(ThisList7) as List<RPGNpc.NPC_ABILITY_DATA>;

            for (var a = 0; a < currentlyViewedNPC.abilities.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedNPC.abilities.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedNPC.abilities[a].abilityREF != null)
                    effectName = currentlyViewedNPC.abilities[a].abilityREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();

                currentlyViewedNPC.abilities[a].abilityREF = (RPGAbility) EditorGUILayout.ObjectField("Ability",
                    RPGBuilderUtilities.GetAbilityFromIDEditor(currentlyViewedNPC.abilities[a].abilityID, allAbilities),
                    typeof(RPGAbility), false, GUILayout.Height(smallFieldHeight));

                currentlyViewedNPC.abilities[a].abilityID = currentlyViewedNPC.abilities[a].abilityREF != null
                    ? currentlyViewedNPC.abilities[a].abilityREF.ID
                    : -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.npcModuleSection.showAggroLinks =
            HandleModuleBanner("AGGRO LINKS", editorFilters.npcModuleSection.showAggroLinks);
        if (editorFilters.npcModuleSection.showAggroLinks)
        {
            GUILayout.Space(10);

            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Aggro Link", skin.GetStyle("AddButton"),
                GUILayout.ExpandWidth(true),
                GUILayout.MaxWidth(middleButtonMaxWidth),
                GUILayout.Height(25)))
            {
                currentlyViewedNPC.aggroLinks.Add(new RPGNpc.NPC_AGGRO_LINK());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList4 = serialObj.FindProperty("aggroLinks");
            currentlyViewedNPC.aggroLinks = GetTargetObjectOfProperty(ThisList4) as List<RPGNpc.NPC_AGGRO_LINK>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedNPC.aggroLinks.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedNPC.aggroLinks.RemoveAt(a);
                    return;
                }

                RPGNpc npcREF = RPGBuilderUtilities.GetNPCFromIDEditor(currentlyViewedNPC.aggroLinks[a].npcID, allNPCs);
                var effectName = "";
                if (npcREF != null)
                    effectName = npcREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedNPC.aggroLinks[a].npcID =
                    DrawRPGDataEntryField(currentlyViewedNPC.aggroLinks[a].npcID, "NPC", "NPC:");
                currentlyViewedNPC.aggroLinks[a].maxDistance = DrawHorizontalFloatField("Max Distance", "",
                    smallFieldHeight, currentlyViewedNPC.aggroLinks[a].maxDistance);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        

        switch (currentlyViewedNPC.npcType)
        {
            case RPGNpc.NPC_TYPE.MERCHANT:
            {
                GUILayout.Space(10);
                editorFilters.npcModuleSection.showMerchant =
                    HandleModuleBanner("MERCHANT", editorFilters.npcModuleSection.showMerchant);
                if (editorFilters.npcModuleSection.showMerchant)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, false);
                    currentlyViewedNPC.merchantTableREF = (RPGMerchantTable) EditorGUILayout.ObjectField(
                        new GUIContent("Merchant Table", "The merchant table that this NPC will have"),
                        RPGBuilderUtilities.GetMerchantTableFromIDEditor(currentlyViewedNPC.merchantTableID,
                            allMerchantTables),
                        typeof(RPGMerchantTable), false);
                    currentlyViewedNPC.merchantTableID = currentlyViewedNPC.merchantTableREF != null
                        ? currentlyViewedNPC.merchantTableREF.ID
                        : -1;
                    EndHorizontalMargin(bigHorizontalSpace, false);
                }

                break;
            }
            case RPGNpc.NPC_TYPE.QUEST_GIVER:
            {
                GUILayout.Space(10);
                editorFilters.npcModuleSection.showQuestGiven =
                    HandleModuleBanner("QUESTS GIVEN", editorFilters.npcModuleSection.showQuestGiven);
                if (editorFilters.npcModuleSection.showQuestGiven)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(middleButtonSpace - 25, false);
                    if (GUILayout.Button("+ Add Quest Given", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                        GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                    {
                        currentlyViewedNPC.questGiven.Add(new RPGNpc.NPC_QUEST_DATA());
                    }

                    EndHorizontalMargin(middleButtonSpace - 25, false);

                    var ThisList2 = serialObj.FindProperty("questGiven");
                    currentlyViewedNPC.questGiven =
                        GetTargetObjectOfProperty(ThisList2) as List<RPGNpc.NPC_QUEST_DATA>;

                    StartHorizontalMargin(bigHorizontalSpace, true);
                    for (var a = 0; a < currentlyViewedNPC.questGiven.Count; a++)
                    {
                        GUILayout.Space(10);
                        var requirementNumber = a + 1;
                        EditorGUILayout.BeginHorizontal();
                        if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                            GUILayout.Height(20)))
                        {
                            currentlyViewedNPC.questGiven.RemoveAt(a);
                            return;
                        }

                        var effectName = "";
                        if (currentlyViewedNPC.questGiven[a].questREF != null)
                            effectName = currentlyViewedNPC.questGiven[a].questREF._name;
                        EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                        EditorGUILayout.EndHorizontal();
                        currentlyViewedNPC.questGiven[a].questREF = (RPGQuest) EditorGUILayout.ObjectField("Quest",
                            RPGBuilderUtilities.GetQuestFromIDEditor(currentlyViewedNPC.questGiven[a].questID,
                                allQuests), typeof(RPGQuest), false);

                        currentlyViewedNPC.questGiven[a].questID = currentlyViewedNPC.questGiven[a].questREF != null
                            ? currentlyViewedNPC.questGiven[a].questREF.ID
                            : -1;
                    }

                    EndHorizontalMargin(bigHorizontalSpace, true);
                }

                GUILayout.Space(10);
                editorFilters.npcModuleSection.showQuestCompleted =
                    HandleModuleBanner("QUESTS COMPLETED", editorFilters.npcModuleSection.showQuestCompleted);
                if (editorFilters.npcModuleSection.showQuestCompleted)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(middleButtonSpace - 25, false);
                    if (GUILayout.Button("+ Add Quest Completed", skin.GetStyle("AddButton"),
                        GUILayout.MinWidth(150),
                        GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
                    {
                        currentlyViewedNPC.questCompleted.Add(new RPGNpc.NPC_QUEST_DATA());
                    }

                    EndHorizontalMargin(middleButtonSpace - 25, false);

                    var ThisList3 = serialObj.FindProperty("questCompleted");
                    currentlyViewedNPC.questCompleted =
                        GetTargetObjectOfProperty(ThisList3) as List<RPGNpc.NPC_QUEST_DATA>;

                    StartHorizontalMargin(bigHorizontalSpace, true);
                    for (var a = 0; a < currentlyViewedNPC.questCompleted.Count; a++)
                    {
                        GUILayout.Space(10);
                        var requirementNumber = a + 1;
                        EditorGUILayout.BeginHorizontal();
                        if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                            GUILayout.Height(20)))
                        {
                            currentlyViewedNPC.questCompleted.RemoveAt(a);
                            return;
                        }

                        var effectName = "";
                        if (currentlyViewedNPC.questCompleted[a].questREF != null)
                            effectName = currentlyViewedNPC.questCompleted[a].questREF._name;
                        EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                        EditorGUILayout.EndHorizontal();
                        currentlyViewedNPC.questCompleted[a].questREF = (RPGQuest) EditorGUILayout.ObjectField(
                            "Quest",
                            RPGBuilderUtilities.GetQuestFromIDEditor(currentlyViewedNPC.questCompleted[a].questID,
                                allQuests), typeof(RPGQuest), false);

                        currentlyViewedNPC.questCompleted[a].questID =
                            currentlyViewedNPC.questCompleted[a].questREF != null
                                ? currentlyViewedNPC.questCompleted[a].questREF.ID
                                : -1;
                    }

                    EndHorizontalMargin(bigHorizontalSpace, true);
                }

                break;
            }
            case RPGNpc.NPC_TYPE.DIALOGUE:
            {
                GUILayout.Space(10);
                editorFilters.npcModuleSection.showDialogue =
                    HandleModuleBanner("DIALOGUE", editorFilters.npcModuleSection.showDialogue);
                if (editorFilters.npcModuleSection.showDialogue)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, false);
                    currentlyViewedNPC.dialogueREF = (RPGDialogue) EditorGUILayout.ObjectField(
                        new GUIContent("Dialogue", "The dialogue from this NPC"),
                        RPGBuilderUtilities.GetDialogueFromIDEditor(currentlyViewedNPC.dialogueID,
                            allDialogues), typeof(RPGDialogue), false);

                    currentlyViewedNPC.dialogueID =
                        currentlyViewedNPC.dialogueREF != null ? currentlyViewedNPC.dialogueREF.ID : -1;
                    EndHorizontalMargin(bigHorizontalSpace, false);
                }

                break;
            }
        }

        GUILayout.Space(10);
        editorFilters.npcModuleSection.showRespawn =
            HandleModuleBanner("RESPAWN", editorFilters.npcModuleSection.showRespawn);
        if (editorFilters.npcModuleSection.showRespawn)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedNPC.MinRespawn = DrawHorizontalFloatField(
                "Respawn. Min", "How long should the minimum respawn time be?",
                smallFieldHeight, currentlyViewedNPC.MinRespawn);
            currentlyViewedNPC.MaxRespawn = DrawHorizontalFloatField(
                "Respawn. Max", "How long should the maximum respawn time be?",
                smallFieldHeight, currentlyViewedNPC.MaxRespawn);
            currentlyViewedNPC.corpseDespawnTime = DrawHorizontalFloatField(
                "Corpse Despawn Time", "How long should the dead body stay in the world?",
                smallFieldHeight, currentlyViewedNPC.corpseDespawnTime);

            if (currentlyViewedNPC.MaxRespawn < currentlyViewedNPC.MinRespawn)
                currentlyViewedNPC.MaxRespawn = currentlyViewedNPC.MinRespawn;
            if (currentlyViewedNPC.MinRespawn > currentlyViewedNPC.MaxRespawn)
                currentlyViewedNPC.MaxRespawn = currentlyViewedNPC.MinRespawn;

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.npcModuleSection.showRewards =
            HandleModuleBanner("REWARDS", editorFilters.npcModuleSection.showRewards);
        if (editorFilters.npcModuleSection.showRewards)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedNPC.MinEXP = DrawHorizontalIntField(
                "EXP. Min", "What is the minimum amount of Experience that this NPC will reward?",
                smallFieldHeight, currentlyViewedNPC.MinEXP);
            currentlyViewedNPC.MaxEXP = DrawHorizontalIntField(
                "EXP. Max", "What is the maximum amount of Experience that this NPC will reward?",
                smallFieldHeight, currentlyViewedNPC.MaxEXP);
            currentlyViewedNPC.EXPBonusPerLevel = DrawHorizontalIntField(
                "Level Bonus EXP",
                "For each level of the NPC, what extra amount of Experience will be given?",
                smallFieldHeight, currentlyViewedNPC.EXPBonusPerLevel);

            if (currentlyViewedNPC.MaxEXP < currentlyViewedNPC.MinEXP)
                currentlyViewedNPC.MaxEXP = currentlyViewedNPC.MinEXP;
            if (currentlyViewedNPC.MinEXP > currentlyViewedNPC.MaxEXP)
                currentlyViewedNPC.MaxEXP = currentlyViewedNPC.MinEXP;

            GUILayout.Space(10);

            StartHorizontalMargin(middleButtonSpace - 25, false);
            if (GUILayout.Button("+ Add Faction Reward", skin.GetStyle("AddButton"),
                GUILayout.ExpandWidth(true),
                GUILayout.MaxWidth(middleButtonMaxWidth),
                GUILayout.Height(25)))
            {
                currentlyViewedNPC.factionRewards.Add(new RPGCombatDATA.Faction_Reward_DATA());
            }

            EndHorizontalMargin(middleButtonSpace - 25, false);

            var ThisList8 = serialObj.FindProperty("factionRewards");
            currentlyViewedNPC.factionRewards =
                GetTargetObjectOfProperty(ThisList8) as List<RPGCombatDATA.Faction_Reward_DATA>;

            for (var a = 0; a < currentlyViewedNPC.factionRewards.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedNPC.factionRewards.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedNPC.factionRewards[a].factionREF != null)
                    effectName = currentlyViewedNPC.factionRewards[a].factionREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedNPC.factionRewards[a].factionREF = (RPGFaction) EditorGUILayout.ObjectField("Faction",
                    RPGBuilderUtilities.GetFactionFromIDEditor(currentlyViewedNPC.factionRewards[a].factionID,
                        allFactions),
                    typeof(RPGFaction), false, GUILayout.Height(smallFieldHeight));

                currentlyViewedNPC.factionRewards[a].factionID = currentlyViewedNPC.factionRewards[a].factionREF != null
                    ? currentlyViewedNPC.factionRewards[a].factionREF.ID
                    : -1;

                currentlyViewedNPC.factionRewards[a].amount = DrawHorizontalIntField(
                    "Amount",
                    "",
                    smallFieldHeight, currentlyViewedNPC.factionRewards[a].amount);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.npcModuleSection.showLootTables =
            HandleModuleBanner("LOOT TABLES", editorFilters.npcModuleSection.showLootTables);
        if (editorFilters.npcModuleSection.showLootTables)
        {
            GUILayout.Space(10);

            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Loot Table", skin.GetStyle("AddButton"),
                GUILayout.ExpandWidth(true),
                GUILayout.MaxWidth(middleButtonMaxWidth),
                GUILayout.Height(25)))
            {
                currentlyViewedNPC.lootTables.Add(new RPGNpc.LOOT_TABLES());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList4 = serialObj.FindProperty("lootTables");
            currentlyViewedNPC.lootTables = GetTargetObjectOfProperty(ThisList4) as List<RPGNpc.LOOT_TABLES>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedNPC.lootTables.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedNPC.lootTables.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedNPC.lootTables[a].lootTableREF != null)
                    effectName = currentlyViewedNPC.lootTables[a].lootTableREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedNPC.lootTables[a].lootTableREF = (RPGLootTable) EditorGUILayout.ObjectField("Loot Table",
                    RPGBuilderUtilities.GetlootTableFromIDEditor(currentlyViewedNPC.lootTables[a].lootTableID,
                        allLootTables), typeof(RPGLootTable), false, GUILayout.Height(smallFieldHeight));

                currentlyViewedNPC.lootTables[a].lootTableID = currentlyViewedNPC.lootTables[a].lootTableREF != null
                    ? currentlyViewedNPC.lootTables[a].lootTableREF.ID
                    : -1;

                currentlyViewedNPC.lootTables[a].dropRate = DrawHorizontalSlider(
                    "Chance",
                    "",
                    smallFieldHeight, currentlyViewedNPC.lootTables[a].dropRate, 0f, 100f);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.npcModuleSection.showStats =
            HandleModuleBanner("STATS", editorFilters.npcModuleSection.showStats);
        if (editorFilters.npcModuleSection.showStats)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true), GUILayout.Height(smallButtonHeight)))
            {
                currentlyViewedNPC.stats.Add(new RPGNpc.NPC_STATS_DATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList5 = serialObj.FindProperty("stats");
            currentlyViewedNPC.stats = GetTargetObjectOfProperty(ThisList5) as List<RPGNpc.NPC_STATS_DATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedNPC.stats.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20), GUILayout.Height(20)))
                {
                    currentlyViewedNPC.stats.RemoveAt(a);
                    return;
                }

                var talentTreeName = "";
                if (currentlyViewedNPC.stats[a].statREF != null)
                    talentTreeName = currentlyViewedNPC.stats[a].statREF.displayName;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + talentTreeName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedNPC.stats[a].statREF = (RPGStat) EditorGUILayout.ObjectField("Stat",
                    RPGBuilderUtilities.GetStatFromIDEditor(currentlyViewedNPC.stats[a].statID, allStats),
                    typeof(RPGStat), false, GUILayout.Height(smallFieldHeight));

                currentlyViewedNPC.stats[a].baseValue = DrawHorizontalFloatField(
                    "Value",
                    "",
                    smallFieldHeight, currentlyViewedNPC.stats[a].baseValue);
                currentlyViewedNPC.stats[a].minValue = DrawHorizontalFloatField(
                    "Min. Value",
                    "",
                    smallFieldHeight, currentlyViewedNPC.stats[a].minValue);
                currentlyViewedNPC.stats[a].maxValue = DrawHorizontalFloatField(
                    "Max. Value",
                    "",
                    smallFieldHeight, currentlyViewedNPC.stats[a].maxValue);
                currentlyViewedNPC.stats[a].bonusPerLevel = DrawHorizontalFloatField(
                    "Level Gain",
                    "",
                    smallFieldHeight, currentlyViewedNPC.stats[a].bonusPerLevel);

                currentlyViewedNPC.stats[a].statID = currentlyViewedNPC.stats[a].statREF != null
                    ? currentlyViewedNPC.stats[a].statREF.ID
                    : -1;

                if (currentlyViewedNPC.stats[a].statREF != null && currentlyViewedNPC.stats[a].statREF.isVitalityStat)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(middleButtonSpace, false);
                    if (GUILayout.Button("+ Add Action", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                        GUILayout.ExpandWidth(true)))
                    {
                        currentlyViewedNPC.stats[a].vitalityActions.Add(new RPGStat.VitalityActions());
                    }

                    EndHorizontalMargin(middleButtonSpace, false);

                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, true);
                    for (var u = 0; u < currentlyViewedNPC.stats[a].vitalityActions.Count; u++)
                    {
                        GUILayout.Space(10);
                        EditorGUILayout.BeginHorizontal();
                        if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                            GUILayout.Height(20)))
                        {
                            currentlyViewedNPC.stats[a].vitalityActions.RemoveAt(u);
                            return;
                        }

                        EditorGUILayout.EndHorizontal();
                        currentlyViewedNPC.stats[a].vitalityActions[u].type =
                            (RPGStat.VitalityActionsTypes) EditorGUILayout.EnumPopup("Type:",
                                currentlyViewedNPC.stats[a].vitalityActions[u].type, GUILayout.Height(smallFieldHeight));

                        switch (currentlyViewedNPC.stats[a].vitalityActions[u].type)
                        {
                            case RPGStat.VitalityActionsTypes.Effect:
                                currentlyViewedNPC.stats[a].vitalityActions[u].effectREF =
                                    (RPGEffect) EditorGUILayout.ObjectField("Effect:",
                                        RPGBuilderUtilities.GetEffectFromIDEditor(
                                            currentlyViewedNPC.stats[a].vitalityActions[u].elementID, allEffects),
                                        typeof(RPGEffect), false, GUILayout.Height(smallFieldHeight));

                                int effectRankField = currentlyViewedNPC.stats[a].vitalityActions[u].effectRank + 1;
                                if (effectRankField == 0) effectRankField = 1;

                                if (currentlyViewedNPC.stats[a].vitalityActions[u].effectREF != null)
                                {
                                    currentlyViewedNPC.stats[a].vitalityActions[u].elementID =
                                        currentlyViewedNPC.stats[a].vitalityActions[u].effectREF.ID;

                                    if (effectRankField > currentlyViewedNPC.stats[a].vitalityActions[u].effectREF.ranks
                                        .Count)
                                    {
                                        effectRankField = currentlyViewedNPC.stats[a].vitalityActions[u].effectREF.ranks
                                            .Count;
                                    }
                                }
                                else
                                    currentlyViewedNPC.stats[a].vitalityActions[u].elementID = -1;


                                effectRankField = DrawHorizontalIntField("Effect Rank", "",
                                    smallFieldHeight,
                                    effectRankField);
                                currentlyViewedNPC.stats[a].vitalityActions[u].effectRank = effectRankField - 1;
                                break;
                            case RPGStat.VitalityActionsTypes.Ability:
                                currentlyViewedNPC.stats[a].vitalityActions[u].abilityREF =
                                    (RPGAbility) EditorGUILayout.ObjectField("Ability:",
                                        RPGBuilderUtilities.GetAbilityFromIDEditor(
                                            currentlyViewedNPC.stats[a].vitalityActions[u].elementID, allAbilities),
                                        typeof(RPGAbility), false, GUILayout.Height(smallFieldHeight));

                                currentlyViewedNPC.stats[a].vitalityActions[u].elementID =
                                    currentlyViewedNPC.stats[a].vitalityActions[u].abilityREF != null
                                        ? currentlyViewedNPC.stats[a].vitalityActions[u].abilityREF.ID
                                        : -1;

                                break;
                        }

                        currentlyViewedNPC.stats[a].vitalityActions[u].value = DrawHorizontalFloatField("Value", "",
                            smallFieldHeight,
                            currentlyViewedNPC.stats[a].vitalityActions[u].value);
                        currentlyViewedNPC.stats[a].vitalityActions[u].valueType =
                            (RPGStat.VitalityActionsValueType) EditorGUILayout.EnumPopup("Value Type:",
                                currentlyViewedNPC.stats[a].vitalityActions[u].valueType,
                                GUILayout.Height(smallFieldHeight));
                        currentlyViewedNPC.stats[a].vitalityActions[u].isPercent = DrawHorizontalToggle("Is Percent?", "",
                            smallFieldHeight,
                            currentlyViewedNPC.stats[a].vitalityActions[u].isPercent);
                    }

                    EndHorizontalMargin(bigHorizontalSpace, true);
                    GUILayout.Space(10);
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.npcModuleSection.showMovement =
            HandleModuleBanner("MOVEMENT", editorFilters.npcModuleSection.showMovement);
        if (editorFilters.npcModuleSection.showMovement)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            currentlyViewedNPC.RoamRange = DrawHorizontalFloatField(
                "Roam Range", "How far away can the NPC roam from its previous point?",
                smallFieldHeight, currentlyViewedNPC.RoamRange);
            currentlyViewedNPC.RoamDelay = DrawHorizontalFloatField(
                "Roam Delay", "How long should the NPC stop between each different roaming path",
                smallFieldHeight, currentlyViewedNPC.RoamDelay);
            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }


    private void DrawGeneralView()
    {
        PrepareViewArea();
        
        switch (generalSubCurrentCategorySelected)
        {
            case GeneralSubCategorySelectedType.Item:
                DrawItemView();
                break;

            case GeneralSubCategorySelectedType.Skill:
                DrawSkillView();
                break;

            case GeneralSubCategorySelectedType.LevelTemplate:
                DrawLevelTemplateView();
                break;

            case GeneralSubCategorySelectedType.Race:
                DrawRaceView();
                break;

            case GeneralSubCategorySelectedType.Class:
                DrawClassView();
                break;

            case GeneralSubCategorySelectedType.LootTable:
                DrawLootTableView();
                break;

            case GeneralSubCategorySelectedType.MerchantTable:
                DrawMerchantTableView();
                break;

            case GeneralSubCategorySelectedType.Currency:
                DrawCurrencyView();
                break;

            case GeneralSubCategorySelectedType.CraftingRecipe:
                DrawCraftingRecipeView();
                break;

            case GeneralSubCategorySelectedType.CraftingStation:
                DrawCraftingStationView();
                break;

            case GeneralSubCategorySelectedType.TalentTree:
                DrawTalentTreeView();
                break;

            case GeneralSubCategorySelectedType.Bonus:
                DrawBonusView();
                break;

            case GeneralSubCategorySelectedType.GearSet:
                DrawGearSetView();
                break;

            case GeneralSubCategorySelectedType.Enchantment:
                DrawEnchantmentView();
                break;
        }
        GUILayout.EndArea();
    }

    private void PrepareViewArea()
    {
        float viewWidth = 1 - editorDATA.ElementListWidthPercent;
        if (showFilters)
        {
            viewWidth -= editorDATA.FilterWidthPercent;
        }
        
        float panelWidth = GetScreenWidth() * viewWidth;
        Rect panelRect = new Rect(elementListWidth, 0, panelWidth, GetScreenHeight());

        if (showFilters)
        {
            panelRect.x -= 25;
        }

        GUILayout.BeginArea(panelRect);
    }
    
    private void DrawWorldView()
    {
        PrepareViewArea();

        switch (worldSubCurrentCategorySelected)
        {
            case WorldSubCategorySelectedType.Task:
                DrawTaskView();
                break;

            case WorldSubCategorySelectedType.Quest:
                DrawQuestView();
                break;

            case WorldSubCategorySelectedType.WorldPosition:
                DrawWorldPositionView();
                break;

            case WorldSubCategorySelectedType.ResourceNode:
                DrawResourceNodeView();
                break;

            case WorldSubCategorySelectedType.GameScene:
                DrawGameSceneView();
                break;

            case WorldSubCategorySelectedType.Dialogue:
                DrawDialogueView();
                break;

            case WorldSubCategorySelectedType.GameModifier:
                DrawGameModifierView();
                break;
        }

        GUILayout.EndArea();
    }


    private void DrawItemView()
    {
        if (currentlyViewedItem == null)
        {
            if (allItems.Count == 0)
            {
                CreateNew(AssetType.Item);
                return;
            }

            currentlyViewedItem = Instantiate(allItems[0]) as RPGItem;
        }
        
        UpdateViewData();
        UpdateFieldData();

        ScriptableObject scriptableObj = currentlyViewedItem;
        var serialObj = new SerializedObject(scriptableObj);

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - topSpace - 20));

        GUILayout.Space(10);
        editorFilters.itemModuleSection.showBaseInfo =
            HandleModuleBanner("BASE INFO", editorFilters.itemModuleSection.showBaseInfo);
        if (editorFilters.itemModuleSection.showBaseInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, false);
            var iconWidth = 100 * getWidthModifier();
            var iconHeight = 100 * getHeightModifier();
            var iconSize = iconWidth > iconHeight ? iconHeight : iconWidth;
            currentlyViewedItem.icon = DrawIconField(currentlyViewedItem.icon, iconSize);
            GUILayout.BeginVertical();
            DrawIDField(smallFieldHeight, contentWidth, currentlyViewedItem.ID);
            currentlyViewedItem._name =
                DrawHorizontalTextField("Name", "", smallFieldHeight, currentlyViewedItem._name);
            currentlyViewedItem.displayName = DrawHorizontalTextField("Display Name", "", smallFieldHeight,
                currentlyViewedItem.displayName);
            currentlyViewedItem._fileName = DrawFileNameField("File Name", "", smallFieldHeight,
                "RPG_ITEM_" + currentlyViewedItem._name);
            currentlyViewedItem.description = DrawHorizontalDescriptionField("Description", "", smallFieldHeight,
                currentlyViewedItem.description);
            GUILayout.EndVertical();
            EndHorizontalMargin(bigHorizontalSpace, false);
        }

        GUILayout.Space(10);
        editorFilters.itemModuleSection.showTypes =
            HandleModuleBanner("TYPES", editorFilters.itemModuleSection.showTypes);
        if (editorFilters.itemModuleSection.showTypes)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            var currentItemRarityIndex = getIndexFromName("ItemRarity", currentlyViewedItem.rarity);
            var tempIndex5 = EditorGUILayout.Popup("Rarity", currentItemRarityIndex,
                itemSettings.itemRarityList.ToArray());
            if (itemSettings.itemRarityList.Count > 0)
                currentlyViewedItem.rarity = itemSettings.itemRarityList[tempIndex5];

            var currentItemTypeIndex = getIndexFromName("ItemType", currentlyViewedItem.itemType);
            var tempIndex = EditorGUILayout.Popup("Item Type", currentItemTypeIndex, itemSettings.itemTypeList.ToArray());
            if (itemSettings.itemTypeList.Count > 0)
                currentlyViewedItem.itemType = itemSettings.itemTypeList[tempIndex];

            switch (currentlyViewedItem.itemType)
            {
                case "WEAPON":
                {
                    var currentWeaponTypeIndex =
                        getIndexFromName("WeaponType", currentlyViewedItem.weaponType);
                    var tempIndex2 = EditorGUILayout.Popup("Weapon Type", currentWeaponTypeIndex,
                        itemSettings.weaponTypeList.ToArray());
                    if (itemSettings.weaponTypeList.Count > 0)
                        currentlyViewedItem.weaponType = itemSettings.weaponTypeList[tempIndex2];


                    var currentSlotTypeIndex =
                        getIndexFromName("SlotType", currentlyViewedItem.slotType);
                    var tempIndex3 = EditorGUILayout.Popup("Slot Type", currentSlotTypeIndex,
                        itemSettings.slotTypeList.ToArray());
                    if (itemSettings.slotTypeList.Count > 0)
                        currentlyViewedItem.slotType = itemSettings.slotTypeList[tempIndex3];
                    break;
                }
                case "ARMOR":
                {
                    var currentWeaponTypeIndex =
                        getIndexFromName("ArmorType", currentlyViewedItem.armorType);
                    var tempIndex2 = EditorGUILayout.Popup("Armor Type", currentWeaponTypeIndex,
                        itemSettings.armorTypeList.ToArray());
                    if (itemSettings.armorTypeList.Count > 0)
                        currentlyViewedItem.armorType = itemSettings.armorTypeList[tempIndex2];

                    var currentEquipmentSlotIndex =
                        getIndexFromName("ArmorSlots", currentlyViewedItem.equipmentSlot);
                    var tempIndex4 = EditorGUILayout.Popup("Armor Slot", currentEquipmentSlotIndex,
                        itemSettings.armorSlotsList.ToArray());
                    if (itemSettings.armorSlotsList.Count > 0)
                        currentlyViewedItem.equipmentSlot = itemSettings.armorSlotsList[tempIndex4];
                    break;
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        switch (currentlyViewedItem.itemType)
        {
            case "ENCHANTMENT":
            {
                GUILayout.Space(10);
                editorFilters.itemModuleSection.showEnchantment =
                    HandleModuleBanner("ENCHANTMENTS", editorFilters.itemModuleSection.showEnchantment);
                if (editorFilters.itemModuleSection.showEnchantment)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, true);

                    currentlyViewedItem.enchantmentREF = (RPGEnchantment) EditorGUILayout.ObjectField(
                        "Enchantment:",
                        RPGBuilderUtilities.GetEnchantmentFromIDEditor(
                            currentlyViewedItem.enchantmentID,
                            allEnchantments), typeof(RPGEnchantment), false);

                    currentlyViewedItem.enchantmentID = currentlyViewedItem.enchantmentREF != null
                        ? currentlyViewedItem.enchantmentREF.ID
                        : -1;

                    currentlyViewedItem.isEnchantmentConsumed =
                        DrawHorizontalToggle("Consume item?",
                            "",
                            smallFieldHeight,
                            currentlyViewedItem.isEnchantmentConsumed);
                    EndHorizontalMargin(bigHorizontalSpace, true);
                    GUILayout.Space(10);
                }

                break;
            }
            case "GEM":
            {
                GUILayout.Space(10);
                editorFilters.itemModuleSection.showGem =
                    HandleModuleBanner("GEM BONUSES", editorFilters.itemModuleSection.showGem);
                if (editorFilters.itemModuleSection.showGem)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, true);

                    var index1 = getIndexFromName("SocketType", currentlyViewedItem.gemData.socketType);
                    var tempIndex1 = 0;
                    tempIndex1 = EditorGUILayout.Popup("Socket Type", index1, itemSettings.socketTypeList.ToArray());
                    if (itemSettings.socketTypeList.Count > 0)
                        currentlyViewedItem.gemData.socketType = itemSettings.socketTypeList[tempIndex1];

                    GUILayout.Space(10);
                    StartHorizontalMargin(middleButtonSpace, false);
                    if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"),
                        GUILayout.MinWidth(150),
                        GUILayout.ExpandWidth(true)))
                    {
                        currentlyViewedItem.gemData.gemStats.Add(new RPGItem.GEM_DATA.GEM_STATS());
                    }
                    EndHorizontalMargin(middleButtonSpace, false);

                    var ThisList21 = serialObj.FindProperty("gemData");
                    currentlyViewedItem.gemData = GetTargetObjectOfProperty(ThisList21) as RPGItem.GEM_DATA;

                    for (var a = 0; a < currentlyViewedItem.gemData.gemStats.Count; a++)
                    {
                        GUILayout.Space(10);
                        var requirementNumber = a + 1;
                        EditorGUILayout.BeginHorizontal();
                        if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                            GUILayout.Height(20)))
                        {
                            currentlyViewedItem.gemData.gemStats.RemoveAt(a);
                            return;
                        }

                        var effectName = "";
                        if (currentlyViewedItem.gemData.gemStats[a].statREF != null)
                            effectName = currentlyViewedItem.gemData.gemStats[a].statREF._name;
                        EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                        EditorGUILayout.EndHorizontal();
                        currentlyViewedItem.gemData.gemStats[a].statREF =
                            (RPGStat) EditorGUILayout.ObjectField("Stat",
                                RPGBuilderUtilities.GetStatFromIDEditor(
                                    currentlyViewedItem.gemData.gemStats[a].statID, allStats),
                                typeof(RPGStat), false);

                        currentlyViewedItem.gemData.gemStats[a].amount =
                            DrawHorizontalFloatField("Amount",
                                "",
                                smallFieldHeight,
                                currentlyViewedItem.gemData.gemStats[a].amount);


                        if (currentlyViewedItem.gemData.gemStats[a].statREF != null)
                        {
                            currentlyViewedItem.gemData.gemStats[a].statID =
                                currentlyViewedItem.gemData.gemStats[a].statREF.ID;


                            if (!currentlyViewedItem.gemData.gemStats[a].statREF.isPercentStat)
                            {
                                currentlyViewedItem.gemData.gemStats[a].isPercent =
                                    DrawHorizontalToggle("Is Percent?",
                                        "",
                                        smallFieldHeight,
                                        currentlyViewedItem.gemData.gemStats[a].isPercent);
                            }
                            else
                            {
                                currentlyViewedItem.gemData.gemStats[a].isPercent = false;
                            }
                        }
                        else
                            currentlyViewedItem.gemData.gemStats[a].statID = -1;

                    }

                    EndHorizontalMargin(bigHorizontalSpace, true);
                    GUILayout.Space(10);
                }

                break;
            }
        }

        GUILayout.Space(10);
        editorFilters.itemModuleSection.showLootSettings =
            HandleModuleBanner("LOOT SETTINGS", editorFilters.itemModuleSection.showLootSettings);
        if (editorFilters.itemModuleSection.showLootSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            currentlyViewedItem.dropInWorld =
                DrawHorizontalToggle("Drop in World?",
                    "",
                    smallFieldHeight,
                    currentlyViewedItem.dropInWorld);

            if (currentlyViewedItem.dropInWorld)
            {
                currentlyViewedItem.itemWorldModel = (GameObject) EditorGUILayout.ObjectField("In World Model",
                    currentlyViewedItem.itemWorldModel, typeof(GameObject), false);
                currentlyViewedItem.durationInWorld =
                    DrawHorizontalFloatField("Duration",
                        "",
                        smallFieldHeight,
                        currentlyViewedItem.durationInWorld);
                currentlyViewedItem.worldInteractableLayer = EditorGUILayout.LayerField("World Interactable Layers", currentlyViewedItem.worldInteractableLayer);
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        if (currentlyViewedItem.itemType == "ARMOR" || currentlyViewedItem.itemType == "WEAPON")
        {

            if (currentlyViewedItem.itemType == "WEAPON")
            {
                GUILayout.Space(10);
                editorFilters.itemModuleSection.showCombat =
                    HandleModuleBanner("COMBAT",
                        editorFilters.itemModuleSection.showCombat);
                if (editorFilters.itemModuleSection.showCombat)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, true);
                    currentlyViewedItem.AttackSpeed = DrawHorizontalFloatField("Attack Speed",
                        "",
                        smallFieldHeight,
                        currentlyViewedItem.AttackSpeed);
                    currentlyViewedItem.minDamage = DrawHorizontalIntField("Min DMG",
                        "",
                        smallFieldHeight,
                        currentlyViewedItem.minDamage);
                    currentlyViewedItem.maxDamage = DrawHorizontalIntField("Max DMG",
                        "",
                        smallFieldHeight,
                        currentlyViewedItem.maxDamage);

                    currentlyViewedItem.autoAttackAbilityREF = (RPGAbility) EditorGUILayout.ObjectField(
                        "Auto Attack",
                        RPGBuilderUtilities.GetAbilityFromIDEditor(currentlyViewedItem.autoAttackAbilityID,
                            allAbilities), typeof(RPGAbility), false);

                    currentlyViewedItem.autoAttackAbilityID =
                        currentlyViewedItem.autoAttackAbilityREF != null
                            ? currentlyViewedItem.autoAttackAbilityREF.ID
                            : -1;

                    EndHorizontalMargin(bigHorizontalSpace, true);
                    GUILayout.Space(10);
                }
            }

            GUILayout.Space(10);
        editorFilters.itemModuleSection.showStats =
            HandleModuleBanner("STATS",
                editorFilters.itemModuleSection.showStats);
        if (editorFilters.itemModuleSection.showStats)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Stat", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedItem.stats.Add(new RPGItem.ITEM_STATS());
            }
            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList2 = serialObj.FindProperty("stats");
            currentlyViewedItem.stats =
                GetTargetObjectOfProperty(ThisList2) as List<RPGItem.ITEM_STATS>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedItem.stats.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedItem.stats.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedItem.stats[a].statREF != null)
                    effectName = currentlyViewedItem.stats[a].statREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedItem.stats[a].statREF = (RPGStat) EditorGUILayout.ObjectField("Stat",
                    RPGBuilderUtilities.GetStatFromIDEditor(currentlyViewedItem.stats[a].statID,
                        allStats), typeof(RPGStat), false);

                currentlyViewedItem.stats[a].amount = DrawHorizontalFloatField("Amount",
                    "",
                    smallFieldHeight,
                    currentlyViewedItem.stats[a].amount);


                if (currentlyViewedItem.stats[a].statREF != null)
                {
                    currentlyViewedItem.stats[a].statID = currentlyViewedItem.stats[a].statREF.ID;

                    if (!currentlyViewedItem.stats[a].statREF.isPercentStat)
                    {
                        currentlyViewedItem.stats[a].isPercent = DrawHorizontalToggle("Is Percent?",
                            "",
                            smallFieldHeight,
                            currentlyViewedItem.stats[a].isPercent);
                    }
                    else
                    {
                        currentlyViewedItem.stats[a].isPercent = false;
                    }
                }
                else
                    currentlyViewedItem.stats[a].statID = -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.itemModuleSection.showRandomStats =
            HandleModuleBanner("RANDOM STATS",
                editorFilters.itemModuleSection.showRandomStats);
        if (editorFilters.itemModuleSection.showRandomStats)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            currentlyViewedItem.randomStatsMax = DrawHorizontalIntField("Max Stats",
                "",
                smallFieldHeight,
                currentlyViewedItem.randomStatsMax);
            EndHorizontalMargin(bigHorizontalSpace, true);

            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Random Stat", skin.GetStyle("AddButton"),
                GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedItem.randomStats.Add(new RPGItemDATA.RandomizedStatData());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList10 = serialObj.FindProperty("randomStats");
            currentlyViewedItem.randomStats =
                GetTargetObjectOfProperty(ThisList10) as List<RPGItemDATA.RandomizedStatData>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedItem.randomStats.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedItem.randomStats.RemoveAt(a);
                    return;
                }

                var effectName = "";
                if (currentlyViewedItem.randomStats[a].statREF != null)
                    effectName = currentlyViewedItem.randomStats[a].statREF._name;
                EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                EditorGUILayout.EndHorizontal();
                currentlyViewedItem.randomStats[a].statREF =
                    (RPGStat) EditorGUILayout.ObjectField("Stat",
                        RPGBuilderUtilities.GetStatFromIDEditor(
                            currentlyViewedItem.randomStats[a].statID, allStats), typeof(RPGStat),
                        false);

                currentlyViewedItem.randomStats[a].minValue = DrawHorizontalFloatField("Min",
                    "",
                    smallFieldHeight,
                    currentlyViewedItem.randomStats[a].minValue);
                currentlyViewedItem.randomStats[a].maxValue = DrawHorizontalFloatField("Max",
                    "",
                    smallFieldHeight,
                    currentlyViewedItem.randomStats[a].maxValue);

                currentlyViewedItem.randomStats[a].isInt = DrawHorizontalToggle("Is Int?",
                    "",
                    smallFieldHeight,
                    currentlyViewedItem.randomStats[a].isInt);
                currentlyViewedItem.randomStats[a].chance = DrawHorizontalSlider("Chance",
                    "",
                    smallFieldHeight,
                    currentlyViewedItem.randomStats[a].chance, 0f, 100f);

                if (currentlyViewedItem.randomStats[a].statREF != null)
                {
                    currentlyViewedItem.randomStats[a].statID =
                        currentlyViewedItem.randomStats[a].statREF.ID;

                    if (!currentlyViewedItem.randomStats[a].statREF.isPercentStat)
                    {
                        currentlyViewedItem.randomStats[a].isPercent = DrawHorizontalToggle(
                            "Is Percent?",
                            "",
                            smallFieldHeight,
                            currentlyViewedItem.randomStats[a].isPercent);
                    }
                    else
                    {
                        currentlyViewedItem.randomStats[a].isPercent = false;
                    }
                }
                else
                    currentlyViewedItem.randomStats[a].statID = -1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
            
            GUILayout.Space(10);
            editorFilters.itemModuleSection.showActionAbilities =
                HandleModuleBanner("ACTION ABILITIES",
                    editorFilters.itemModuleSection.showActionAbilities);
            if (editorFilters.itemModuleSection.showActionAbilities)
            {
                DrawActionAbilityList(currentlyViewedItem.actionAbilities);
            }

            GUILayout.Space(10);
            editorFilters.itemModuleSection.showSocket =
                HandleModuleBanner("SOCKETS",
                    editorFilters.itemModuleSection.showSocket);
            if (editorFilters.itemModuleSection.showSocket)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace, false);
                if (GUILayout.Button("+ Add Socket", skin.GetStyle("AddButton"),
                    GUILayout.MinWidth(150), GUILayout.ExpandWidth(true)))
                {
                    currentlyViewedItem.sockets.Add(new RPGItem.SOCKETS_DATA());
                }

                EndHorizontalMargin(middleButtonSpace, false);

                var ThisList20 = serialObj.FindProperty("sockets");
                currentlyViewedItem.sockets =
                    GetTargetObjectOfProperty(ThisList20) as List<RPGItem.SOCKETS_DATA>;

                StartHorizontalMargin(bigHorizontalSpace, true);
                for (var a = 0; a < currentlyViewedItem.sockets.Count; a++)
                {
                    GUILayout.Space(10);
                    var requirementNumber = a + 1;
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        currentlyViewedItem.sockets.RemoveAt(a);
                        return;
                    }

                    var effectName = currentlyViewedItem.sockets[a].socketType;
                    EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                    EditorGUILayout.EndHorizontal();
                    EditorGUILayout.BeginHorizontal();
                    var index1 = getIndexFromName("SocketType",
                        currentlyViewedItem.sockets[a].socketType);
                    var tempIndex1 = 0;
                    tempIndex1 = EditorGUILayout.Popup("Socket Type", index1, itemSettings.socketTypeList.ToArray());
                    if (itemSettings.socketTypeList.Count > 0)
                        currentlyViewedItem.sockets[a].socketType = itemSettings.socketTypeList[tempIndex1];
                    EditorGUILayout.EndHorizontal();
                    GUILayout.Space(10);
                }

                EndHorizontalMargin(bigHorizontalSpace, true);
            }

            GUILayout.Space(10);
            editorFilters.itemModuleSection.showVisuals =
                HandleModuleBanner("VISUAL", editorFilters.itemModuleSection.showVisuals);
            if (editorFilters.itemModuleSection.showVisuals)
            {
                GUILayout.Space(10);
                if (currentlyViewedItem.itemType == "ARMOR")
                {
                    StartHorizontalMargin(bigHorizontalSpace, true);
                    
                    currentlyViewedItem.armorPieceType =
                        (RPGItem.ArmorPieceType) EditorGUILayout.EnumPopup("Armor Piece Type:",
                            currentlyViewedItem.armorPieceType);
                    
                    switch (currentlyViewedItem.armorPieceType)
                    {
                        case RPGItem.ArmorPieceType.Name:
                            currentlyViewedItem.itemModelName = DrawHorizontalTextField("Model Name:", "",
                                smallFieldHeight, currentlyViewedItem.itemModelName);
                            break;
                        case RPGItem.ArmorPieceType.Mesh:
                            currentlyViewedItem.armorMesh =
                                (Mesh) EditorGUILayout.ObjectField("Mesh:",
                                    currentlyViewedItem.armorMesh,
                                    typeof(Mesh), false);
                            break;
                    }

                    currentlyViewedItem.modelMaterial =
                        (Material) EditorGUILayout.ObjectField("(Optional) Material:",
                            currentlyViewedItem.modelMaterial,
                            typeof(Material), false);
                    
                    EndHorizontalMargin(bigHorizontalSpace, true);
                }
                else
                {
                    StartHorizontalMargin(bigHorizontalSpace, true);
                    currentlyViewedItem.weaponModel =
                        (GameObject) EditorGUILayout.ObjectField("Weapon Model",
                            currentlyViewedItem.weaponModel, typeof(GameObject), false);

                    currentlyViewedItem.modelMaterial =
                        (Material) EditorGUILayout.ObjectField("(Optional) Material:",
                            currentlyViewedItem.modelMaterial,
                            typeof(Material), false);
                    EndHorizontalMargin(bigHorizontalSpace, true);


                    GUILayout.Space(10);
                    editorFilters.itemModuleSection.showWeaponPositions =
                        HandleModuleBanner("WEAPON POSITIONS",
                            editorFilters.itemModuleSection.showWeaponPositions);
                    if (editorFilters.itemModuleSection.showWeaponPositions)
                    {

                        GUILayout.Space(10);
                        StartHorizontalMargin(middleButtonSpace, false);
                        if (GUILayout.Button("+ Add Race Data", skin.GetStyle("AddButton"),
                            GUILayout.MinWidth(150),
                            GUILayout.ExpandWidth(true)))
                        {
                            currentlyViewedItem.weaponPositionDatas.Add(
                                new RPGItem.WeaponPositionData());
                        }

                        EndHorizontalMargin(middleButtonSpace, false);

                        var ThisList15 = serialObj.FindProperty("weaponPositionDatas");
                        currentlyViewedItem.weaponPositionDatas =
                            GetTargetObjectOfProperty(ThisList15) as List<RPGItem.WeaponPositionData>;

                        StartHorizontalMargin(bigHorizontalSpace, true);
                        for (var a = 0; a < currentlyViewedItem.weaponPositionDatas.Count; a++)
                        {
                            GUILayout.Space(10);
                            var requirementNumber = a + 1;
                            EditorGUILayout.BeginHorizontal();
                            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"),
                                GUILayout.Width(20),
                                GUILayout.Height(20)))
                            {
                                currentlyViewedItem.weaponPositionDatas.RemoveAt(a);
                                return;
                            }

                            var raceName = "";
                            if (currentlyViewedItem.weaponPositionDatas[a].raceID != -1)
                                raceName = RPGBuilderUtilities
                                    .GetRaceFromIDEditor(
                                        currentlyViewedItem.weaponPositionDatas[a].raceID,
                                        allRaces).displayName;
                            EditorGUILayout.LabelField("" + requirementNumber + ": " + raceName);
                            EditorGUILayout.EndHorizontal();


                            currentlyViewedItem.weaponPositionDatas[a].raceREF =
                                (RPGRace) EditorGUILayout.ObjectField(
                                    RPGBuilderUtilities.GetRaceFromIDEditor(
                                        currentlyViewedItem.weaponPositionDatas[a].raceID, allRaces),
                                    typeof(RPGRace), false);

                            currentlyViewedItem.weaponPositionDatas[a].raceID =
                                currentlyViewedItem.weaponPositionDatas[a].raceREF != null
                                    ? currentlyViewedItem.weaponPositionDatas[a].raceREF.ID
                                    : -1;


                            if (currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas.Count ==
                                0)
                            {
                                currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas
                                    .Add(new RPGItem.WeaponPositionData.GenderPositionData());
                                currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas
                                    .Add(new RPGItem.WeaponPositionData.GenderPositionData());

                                currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[1].gender
                                    = RPGRace.RACE_GENDER.Female;
                            }

                            for (var u = 0;
                                u < currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas
                                    .Count;
                                u++)
                            {
                                GUILayout.Space(10);
                                var requirementNumber2 = u + 1;
                                EditorGUILayout.BeginHorizontal();
                                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"),
                                    GUILayout.Width(20),
                                    GUILayout.Height(20)))
                                {
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas
                                        .RemoveAt(u);
                                    return;
                                }

                                var effectName2 = raceName + " " + currentlyViewedItem
                                    .weaponPositionDatas[a].genderPositionDatas[u].gender;

                                EditorGUILayout.LabelField("" + requirementNumber2 + ": " +
                                                           effectName2);
                                EditorGUILayout.EndHorizontal();
                                GUILayout.Space(10);


                                if (currentlyViewedItem.slotType == "TWO HAND" ||
                                    currentlyViewedItem.slotType == "MAIN HAND" ||
                                    currentlyViewedItem.slotType == "ANY HAND")
                                {
                                    EditorGUILayout.LabelField("Main Hand - COMBAT:");
                                    GUILayout.Space(5);
                                    GameObject sceneREF = null;
                                    sceneREF = (GameObject) EditorGUILayout.ObjectField("Scene Reference 1", sceneREF,
                                        typeof(GameObject), true);
                                    if (sceneREF != null)
                                    {
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatPositionInSlot = sceneREF.transform.localPosition;
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatRotationInSlot = sceneREF.transform.localEulerAngles;
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatScaleInSlot = sceneREF.transform.localScale;
                                    }

                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatPositionInSlot =
                                        DrawHorizontalVector3("Combat POS",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].CombatPositionInSlot);
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatRotationInSlot =
                                        DrawHorizontalVector3("Combat ROT",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].CombatRotationInSlot);
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatScaleInSlot =
                                        DrawHorizontalVector3("Combat SCALE",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].CombatScaleInSlot);

                                    GUILayout.Space(10);
                                    EditorGUILayout.LabelField("Main Hand - REST:");
                                    GUILayout.Space(5);
                                    GameObject sceneREF2 = null;
                                    sceneREF2 = (GameObject) EditorGUILayout.ObjectField("Scene Reference 2", sceneREF2,
                                        typeof(GameObject), true);
                                    if (sceneREF2 != null)
                                    {
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestPositionInSlot = sceneREF2.transform.localPosition;
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestRotationInSlot = sceneREF2.transform.localEulerAngles;
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestScaleInSlot = sceneREF2.transform.localScale;
                                    }

                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestPositionInSlot =
                                        DrawHorizontalVector3("Rest POS",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].RestPositionInSlot);
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestRotationInSlot =
                                        DrawHorizontalVector3("Rest ROT",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].RestRotationInSlot);
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestScaleInSlot =
                                        DrawHorizontalVector3("Rest SCALE",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].RestScaleInSlot);
                                }

                                if (currentlyViewedItem.slotType == "OFF HAND" ||
                                    currentlyViewedItem.slotType == "ANY HAND")
                                {
                                    GUILayout.Space(15);
                                    EditorGUILayout.LabelField("Off Hand - COMBAT:");
                                    GUILayout.Space(5);
                                    GameObject sceneREF = null;
                                    sceneREF = (GameObject) EditorGUILayout.ObjectField("Scene Reference 1", sceneREF,
                                        typeof(GameObject), true);
                                    if (sceneREF != null)
                                    {
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatPositionInSlot2 = sceneREF.transform.localPosition;
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatRotationInSlot2 = sceneREF.transform.localEulerAngles;
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatScaleInSlot2 = sceneREF.transform.localScale;
                                    }

                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatPositionInSlot2 =
                                        DrawHorizontalVector3("Combat POS",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].CombatPositionInSlot2);
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatRotationInSlot2 =
                                        DrawHorizontalVector3("Combat ROT",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].CombatRotationInSlot2);
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .CombatScaleInSlot2 =
                                        DrawHorizontalVector3("Combat SCALE",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].CombatScaleInSlot2);

                                    GUILayout.Space(10);
                                    EditorGUILayout.LabelField("Off Hand - REST:");
                                    GUILayout.Space(5);
                                    GameObject sceneREF2 = null;
                                    sceneREF2 = (GameObject) EditorGUILayout.ObjectField("Scene Reference 2", sceneREF2,
                                        typeof(GameObject), true);
                                    if (sceneREF2 != null)
                                    {
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestPositionInSlot2 = sceneREF2.transform.localPosition;
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestRotationInSlot2 = sceneREF2.transform.localEulerAngles;
                                        currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestScaleInSlot2 = sceneREF2.transform.localScale;
                                    }

                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestPositionInSlot2 =
                                        DrawHorizontalVector3("Rest POS",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].RestPositionInSlot2);
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestRotationInSlot2 =
                                        DrawHorizontalVector3("Rest ROT",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].RestRotationInSlot2);
                                    currentlyViewedItem.weaponPositionDatas[a].genderPositionDatas[u]
                                            .RestScaleInSlot2 =
                                        DrawHorizontalVector3("Rest SCALE",
                                            "",
                                            smallFieldHeight,
                                            currentlyViewedItem.weaponPositionDatas[a]
                                                .genderPositionDatas[u].RestScaleInSlot2);
                                }
                            }
                        }

                        EndHorizontalMargin(bigHorizontalSpace, true);
                    }
                }
            }
        }

        GUILayout.Space(10);
        editorFilters.itemModuleSection.showRequirements = HandleModuleBanner("REQUIREMENTS", editorFilters.itemModuleSection.showRequirements);
        if (editorFilters.itemModuleSection.showRequirements)
        {
            GUILayout.Space(10);
            currentlyViewedItem.useRequirements = DrawRequirementList(currentlyViewedItem.useRequirements);
        }

        
        if (currentlyViewedItem.itemType == "ARMOR" || currentlyViewedItem.itemType == "WEAPON")
        {
            bool haveOnEquipAction = false;
            foreach (var onUseAction in currentlyViewedItem.onUseActions)
            {
                if(onUseAction.actionType != RPGItem.OnUseActionType.equip) continue;
                haveOnEquipAction = true;
            }

            if (!haveOnEquipAction)
            {
                RPGItem.OnUseActionDATA newUseAction = new RPGItem.OnUseActionDATA();
                newUseAction.actionType = RPGItem.OnUseActionType.equip;
                currentlyViewedItem.onUseActions.Add(newUseAction);
            }
        }
        else
        {
            /*bool haveOnEquipAction = false;
            int onUseActionIndex = -1;
            for (var index = 0; index < currentlyViewedItem.onUseActions.Count; index++)
            {
                var onUseAction = currentlyViewedItem.onUseActions[index];
                if (onUseAction.actionType != RPGItem.OnUseActionType.equip) continue;
                haveOnEquipAction = true;
                onUseActionIndex = index;
            }

            if (haveOnEquipAction && onUseActionIndex != -1)
            {
                currentlyViewedItem.onUseActions.RemoveAt(onUseActionIndex);
            }*/
        }
        
        GUILayout.Space(10);
        editorFilters.itemModuleSection.showOnUseActions =
            HandleModuleBanner("ON USE ACTIONS",
                editorFilters.itemModuleSection.showOnUseActions);
        if (editorFilters.itemModuleSection.showOnUseActions)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);

            if (GUILayout.Button("+ Add Action", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                GUILayout.ExpandWidth(true)))
            {
                currentlyViewedItem.onUseActions.Add(new RPGItem.OnUseActionDATA());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            var ThisList3 = serialObj.FindProperty("onUseActions");
            currentlyViewedItem.onUseActions =
                GetTargetObjectOfProperty(ThisList3) as List<RPGItem.OnUseActionDATA>;

            StartHorizontalMargin(bigHorizontalSpace, true);
            for (var a = 0; a < currentlyViewedItem.onUseActions.Count; a++)
            {
                GUILayout.Space(10);
                var requirementNumber = a + 1;
                EditorGUILayout.BeginHorizontal();
                
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                    GUILayout.Height(20)))
                {
                    currentlyViewedItem.onUseActions.RemoveAt(a);
                    return;
                }
                GUILayout.Space(10);
                EditorGUILayout.LabelField("" + requirementNumber + ":", GUILayout.Width(115));
                currentlyViewedItem.onUseActions[a].actionType =
                    (RPGItem.OnUseActionType) EditorGUILayout.EnumPopup(
                        currentlyViewedItem.onUseActions[a].actionType);

                EditorGUILayout.EndHorizontal();
                EditorGUILayout.BeginVertical();

                if (currentlyViewedItem.onUseActions.Count > 0)
                {
                    switch (currentlyViewedItem.onUseActions[a].actionType)
                    {
                        case RPGItem.OnUseActionType.gainTreePoint:
                        {
                            currentlyViewedItem.onUseActions[a].treePointREF =
                                (RPGTreePoint) EditorGUILayout.ObjectField(
                                    new GUIContent("Tree Point", "The tree point gained"),
                                    RPGBuilderUtilities.GetTreePointFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].treePointID, allTreePoints),
                                    typeof(RPGTreePoint), false);

                            currentlyViewedItem.onUseActions[a].treePointGained =
                                DrawHorizontalIntField("Points Gained",
                                    "How many points should be gained?",
                                    smallFieldHeight,
                                    currentlyViewedItem.onUseActions[a].treePointGained);

                            currentlyViewedItem.onUseActions[a].treePointID =
                                currentlyViewedItem.onUseActions[a].treePointREF != null
                                    ? currentlyViewedItem.onUseActions[a].treePointREF.ID
                                    : -1;
                            break;
                        }
                        case RPGItem.OnUseActionType.useAbility:
                        case RPGItem.OnUseActionType.learnAbility:
                        {
                            currentlyViewedItem.onUseActions[a].abilityREF =
                                (RPGAbility) EditorGUILayout.ObjectField(
                                    new GUIContent("Ability Used", "The ability used by the item"),
                                    RPGBuilderUtilities.GetAbilityFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].abilityID, allAbilities),
                                    typeof(RPGAbility), false);

                            currentlyViewedItem.onUseActions[a].abilityID =
                                currentlyViewedItem.onUseActions[a].abilityREF != null
                                    ? currentlyViewedItem.onUseActions[a].abilityREF.ID
                                    : -1;
                            break;
                        }
                        case RPGItem.OnUseActionType.useEffect:
                        {
                            currentlyViewedItem.onUseActions[a].effectREF =
                                (RPGEffect) EditorGUILayout.ObjectField(
                                    new GUIContent("Effect", "The effect triggered"),
                                    RPGBuilderUtilities.GetEffectFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].effectID, allEffects),
                                    typeof(RPGEffect), false);

                            currentlyViewedItem.onUseActions[a].effectID =
                                currentlyViewedItem.onUseActions[a].effectREF != null
                                    ? currentlyViewedItem.onUseActions[a].effectREF.ID
                                    : -1;

                            currentlyViewedItem.onUseActions[a].target =
                                (RPGCombatDATA.TARGET_TYPE) EditorGUILayout.EnumPopup("Target",
                                    currentlyViewedItem.onUseActions[a].target);
                            break;
                        }
                        case RPGItem.OnUseActionType.learnRecipe:
                        {
                            currentlyViewedItem.onUseActions[a].recipeREF =
                                (RPGCraftingRecipe) EditorGUILayout.ObjectField(
                                    new GUIContent("Recipe",
                                        "The crafting recipe that will be learned"),
                                    RPGBuilderUtilities.GetCraftingRecipeFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].recipeID,
                                        allCraftingRecipes), typeof(RPGCraftingRecipe), false);

                            currentlyViewedItem.onUseActions[a].recipeID =
                                currentlyViewedItem.onUseActions[a].recipeREF != null
                                    ? currentlyViewedItem.onUseActions[a].recipeREF.ID
                                    : -1;
                            break;
                        }
                        case RPGItem.OnUseActionType.learnResourceNode:
                        {
                            currentlyViewedItem.onUseActions[a].resourceNodeREF =
                                (RPGResourceNode) EditorGUILayout.ObjectField(
                                    new GUIContent("Resource Node",
                                        "The resource node that will be learned"),
                                    RPGBuilderUtilities.GetResourceNodeFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].resourceNodeID, allResourceNodes),
                                    typeof(RPGResourceNode), false);

                            currentlyViewedItem.onUseActions[a].resourceNodeID =
                                currentlyViewedItem.onUseActions[a].resourceNodeREF != null
                                    ? currentlyViewedItem.onUseActions[a].resourceNodeREF.ID
                                    : -1;
                            break;
                        }
                        case RPGItem.OnUseActionType.learnBonus:
                        {
                            currentlyViewedItem.onUseActions[a].bonusREF =
                                (RPGBonus) EditorGUILayout.ObjectField(
                                    new GUIContent("Bonus", "The bonus that will be learned"),
                                    RPGBuilderUtilities.GetBonusFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].bonusID, allBonuses),
                                    typeof(RPGBonus), false);

                            currentlyViewedItem.onUseActions[a].bonusID =
                                currentlyViewedItem.onUseActions[a].bonusREF != null
                                    ? currentlyViewedItem.onUseActions[a].bonusREF.ID
                                    : -1;
                            break;
                        }
                        case RPGItem.OnUseActionType.gainClassLevel:
                        case RPGItem.OnUseActionType.gainClassXP:
                        {
                            switch (currentlyViewedItem.onUseActions[a].actionType)
                            {
                                case RPGItem.OnUseActionType.gainClassLevel:
                                    currentlyViewedItem.onUseActions[a].classLevelGained =
                                        DrawHorizontalIntField("Level(s) Gained",
                                            "The amount of levels gained",
                                            smallFieldHeight,
                                            currentlyViewedItem.onUseActions[a].classLevelGained);
                                    break;
                                case RPGItem.OnUseActionType.gainClassXP:
                                    currentlyViewedItem.onUseActions[a].classXPGained =
                                        DrawHorizontalIntField("XP Gained", "The amount of XP gained",
                                            smallFieldHeight,
                                            currentlyViewedItem.onUseActions[a].classXPGained);
                                    break;
                            }

                            break;
                        }
                        case RPGItem.OnUseActionType.gainSkillLevel:
                        case RPGItem.OnUseActionType.gainSkillXP:
                        {
                            currentlyViewedItem.onUseActions[a].skillREF =
                                (RPGSkill) EditorGUILayout.ObjectField(
                                    new GUIContent("Skill", "The skill"),
                                    RPGBuilderUtilities.GetSkillFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].skillID, allSkills),
                                    typeof(RPGSkill), false);

                            currentlyViewedItem.onUseActions[a].skillID =
                                currentlyViewedItem.onUseActions[a].skillREF != null
                                    ? currentlyViewedItem.onUseActions[a].skillREF.ID
                                    : -1;

                            switch (currentlyViewedItem.onUseActions[a].actionType)
                            {
                                case RPGItem.OnUseActionType.gainSkillLevel:
                                    currentlyViewedItem.onUseActions[a].skillLevelGained =
                                        DrawHorizontalIntField("Level(s) Gained",
                                            "The amount of levels gained",
                                            smallFieldHeight,
                                            currentlyViewedItem.onUseActions[a].skillLevelGained);
                                    break;
                                case RPGItem.OnUseActionType.gainSkillXP:
                                    currentlyViewedItem.onUseActions[a].skillLevelGained =
                                        DrawHorizontalIntField("XP Gained", "The amount of XP gained",
                                            smallFieldHeight,
                                            currentlyViewedItem.onUseActions[a].skillLevelGained);
                                    break;
                            }

                            break;
                        }
                        case RPGItem.OnUseActionType.acceptQuest:
                        {
                            currentlyViewedItem.onUseActions[a].questREF =
                                (RPGQuest) EditorGUILayout.ObjectField(
                                    new GUIContent("Quest", "The quest given by the item"),
                                    RPGBuilderUtilities.GetQuestFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].questID, allQuests),
                                    typeof(RPGQuest), false);

                            currentlyViewedItem.onUseActions[a].questID =
                                currentlyViewedItem.onUseActions[a].questREF != null
                                    ? currentlyViewedItem.onUseActions[a].questREF.ID
                                    : -1;
                            break;
                        }
                        case RPGItem.OnUseActionType.currency:
                        {
                            currentlyViewedItem.onUseActions[a].currencyREF =
                                (RPGCurrency) EditorGUILayout.ObjectField(
                                    new GUIContent("Currency", "The Currency"),
                                    RPGBuilderUtilities.GetCurrencyFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].currencyID, allCurrencies),
                                    typeof(RPGCurrency), false);

                            currentlyViewedItem.onUseActions[a].currencyID =
                                currentlyViewedItem.onUseActions[a].currencyREF != null
                                    ? currentlyViewedItem.onUseActions[a].currencyREF.ID
                                    : -1;
                            break;
                        }
                        case RPGItem.OnUseActionType.factionPoint:
                        {
                            currentlyViewedItem.onUseActions[a].factionREF =
                                (RPGFaction) EditorGUILayout.ObjectField(
                                    new GUIContent("Faction", "The Faction"),
                                    RPGBuilderUtilities.GetFactionFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].factionID, allFactions),
                                    typeof(RPGFaction), false);

                            currentlyViewedItem.onUseActions[a].factionID =
                                currentlyViewedItem.onUseActions[a].factionREF != null
                                    ? currentlyViewedItem.onUseActions[a].factionREF.ID
                                    : -1;

                            currentlyViewedItem.onUseActions[a].factionPointsGained =
                                DrawHorizontalIntField("Points Gained",
                                    "How many points should be gained?",
                                    smallFieldHeight,
                                    currentlyViewedItem.onUseActions[a].factionPointsGained);
                            break;
                        }
                        case RPGItem.OnUseActionType.gainWeaponTemplateEXP:
                        {
                            currentlyViewedItem.onUseActions[a].weaponTemplateREF =
                                (RPGWeaponTemplate) EditorGUILayout.ObjectField(
                                    new GUIContent("Weapon Template", "The weapon template"),
                                    RPGBuilderUtilities.GetWeaponTemplateFromIDEditor(
                                        currentlyViewedItem.onUseActions[a].weaponTemplateID,
                                        allWeaponTemplates), typeof(RPGWeaponTemplate), false);

                            currentlyViewedItem.onUseActions[a].weaponTemplateID =
                                currentlyViewedItem.onUseActions[a].weaponTemplateREF != null
                                    ? currentlyViewedItem.onUseActions[a].weaponTemplateREF.ID
                                    : -1;

                            currentlyViewedItem.onUseActions[a].weaponTemplateXPGained =
                                DrawHorizontalIntField("XP Gained", "The amount of XP gained",
                                    smallFieldHeight,
                                    currentlyViewedItem.onUseActions[a].weaponTemplateXPGained);
                            break;
                        }
                    }

                    currentlyViewedItem.onUseActions[a].isConsumed =
                        DrawHorizontalToggle("Consume Item?",
                            "Should this action be consumed on use?",
                            smallFieldHeight,
                            currentlyViewedItem.onUseActions[a].isConsumed);
                }

                EditorGUILayout.EndVertical();
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.itemModuleSection.showGeneral =
            HandleModuleBanner("GENERAL", editorFilters.itemModuleSection.showGeneral);
        if (editorFilters.itemModuleSection.showGeneral)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Label("Resell Settings:", GUILayout.Height(15));
            currentlyViewedItem.sellCurrencyREF = (RPGCurrency) EditorGUILayout.ObjectField("Currency",
                RPGBuilderUtilities.GetCurrencyFromIDEditor(currentlyViewedItem.sellCurrencyID,
                    allCurrencies), typeof(RPGCurrency), false);

            currentlyViewedItem.sellCurrencyID = currentlyViewedItem.sellCurrencyREF != null
                ? currentlyViewedItem.sellCurrencyREF.ID
                : -1;

            currentlyViewedItem.sellPrice =
                DrawHorizontalIntField("Amount", "",
                    smallFieldHeight,
                    currentlyViewedItem.sellPrice);

            GUILayout.Space(10);
            GUILayout.Label("Stacking:", GUILayout.Height(15));
            currentlyViewedItem.stackLimit =
                DrawHorizontalIntField("Stack Limit", "",
                    smallFieldHeight,
                    currentlyViewedItem.stackLimit);

            if (currentlyViewedItem.itemType == "ARMOR" || currentlyViewedItem.itemType == "WEAPON")
            {
                currentlyViewedItem.stackLimit = 1;
            }

            if (currentlyViewedItem.stackLimit == 0)
            {
                currentlyViewedItem.stackLimit = 1;
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        serialObj.ApplyModifiedProperties();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }


    private void DrawSettingsView()
    {

        float panelWidth = GetScreenWidth();
        float panelHeight = GetScreenHeight(); 
        
        Rect panelRect = new Rect(0, 0, panelWidth, panelHeight);

        float margin = showCategories || showSubCategories
            ? (GetScreenWidth() * editorDATA.CategoryWidthPercentHover) * 1.1f
            : 0;
        panelRect.x += margin;
        
        GUILayout.BeginArea(panelRect);
        switch (settingsSubCurrentCategorySelected)
        {
            case SettingsSubCategorySelectedType.General:
                DrawGeneralSettingsView();
                break;
            case SettingsSubCategorySelectedType.Combat:
                DrawCombatSettingsView();
                break;
            case SettingsSubCategorySelectedType.Item:
                DrawItemSettingsView();
                break;
            case SettingsSubCategorySelectedType.Editor:
                DrawEditorSettingsView();
                break;
        }
        GUILayout.EndArea();
    }


    private void DrawPartnersView()
    {
        float margin = showCategories || showSubCategories
            ? GetScreenWidth() * editorDATA.CategoryWidthPercentHover
            : 0;
        
        float distanceFromTop = GetScreenHeight() * editorDATA.TopBarHeightPercent;
        Rect panelRect = new Rect(0, distanceFromTop, viewWidth, GetScreenHeight());

        panelRect.width = showCategories || showSubCategories
            ? GetScreenWidth() - (GetScreenWidth() * editorDATA.CategoryWidthPercentHover)
            : GetScreenWidth();
        panelRect.x = margin;
        GUILayout.BeginArea(panelRect);
        switch (partnersSubCurrentCategorySelected)
        {
            case PartnersSubCategorySelectedType.PolytopeStudio:
                DrawPolytopeStudioView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.Cafofo:
                DrawCafofoView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.GabrielAguiar:
                DrawGabrielAguiarView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.RDR:
                DrawRDRView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.TitanForge:
                DrawTitanForgeView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.PONETI:
                DrawPONETIView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.MalbersAnimation:
                DrawMalbersAnimationView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.BOXOPHOBIC:
                DrawBOXOPHOBICView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.Staggart:
                DrawStaggartView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.PolyartStudio:
                DrawPolyArtView(panelRect.width);
                break;
            case PartnersSubCategorySelectedType.InifnityPBR:
                DrawInfinityPBRView(panelRect.width);
                break;
        }

        GUILayout.EndArea();
    }

    private void DrawGeneralSettingsView()
    {
        if (generalSettings == null)
        {
            generalSettings = Resources.Load<RPGGeneralDATA>(editorDATA.RPGBDatabasePath + "Settings/" + "GeneralSettings");
            if (generalSettings == null)
            {
                Debug.LogError("COULD NOT FIND GENERAL SETTINGS");
                return;
            }
            generalSettings = Instantiate(generalSettings) as RPGGeneralDATA;
            
        }
        
        UpdateSettingsViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - 40));

        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showSavingSettings =
            HandleModuleBanner("SAVING", editorFilters.generalSettingsModuleSection.showSavingSettings);
        if (editorFilters.generalSettingsModuleSection.showSavingSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            generalSettings.automaticSave =
                DrawHorizontalToggle("Auto Save?", "", smallFieldHeight, generalSettings.automaticSave);

            if (generalSettings.automaticSave)
            {
                generalSettings.automaticSaveDelay = DrawHorizontalFloatField("Save Delay", "", smallFieldHeight,
                    generalSettings.automaticSaveDelay);

                if (generalSettings.automaticSaveDelay < 1) generalSettings.automaticSaveDelay = 1;
            }

            generalSettings.automaticSaveOnQuit = DrawHorizontalToggle("Auto Save on Quit?", "", smallFieldHeight,
                generalSettings.automaticSaveOnQuit);

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showLoadingScreenSettings =
            HandleModuleBanner("LOADING SCREEN",
                editorFilters.generalSettingsModuleSection.showLoadingScreenSettings);
        if (editorFilters.generalSettingsModuleSection.showLoadingScreenSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            generalSettings.clickToLoadScene = DrawHorizontalToggle("Click to end?", "", smallFieldHeight,
                generalSettings.clickToLoadScene);
            generalSettings.DelayAfterSceneLoad = DrawHorizontalFloatField("Delay After Scene Load", "", smallFieldHeight,
                generalSettings.DelayAfterSceneLoad);
            generalSettings.LoadingScreenEndDelay = DrawHorizontalFloatField("Loading Screen End Delay", "", smallFieldHeight,
                generalSettings.LoadingScreenEndDelay);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showMainMenuSettings =
            HandleModuleBanner("MAIN MENU", editorFilters.generalSettingsModuleSection.showMainMenuSettings);
        if (editorFilters.generalSettingsModuleSection.showMainMenuSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            generalSettings.mainMenuSceneName = DrawHorizontalTextField("Main Menu Scene Name", "", smallFieldHeight,
                generalSettings.mainMenuSceneName);
            generalSettings.mainMenuLoadingName = DrawHorizontalTextField("Main Menu Display Name", "",
                smallFieldHeight,
                generalSettings.mainMenuLoadingName);
            generalSettings.mainMenuLoadingDescription = DrawHorizontalTextField("Main Menu Scene Description", "",
                smallFieldHeight,
                generalSettings.mainMenuLoadingDescription);

            GUILayout.Label("Main Menu Image:", GUILayout.Height(15));
            generalSettings.mainMenuLoadingImage = (Sprite) EditorGUILayout.ObjectField(
                generalSettings.mainMenuLoadingImage, typeof(Sprite), false, GUILayout.Width(250),
                GUILayout.Height(250));

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showDeveloperSettings =
            HandleModuleBanner("DEVELOPER", editorFilters.generalSettingsModuleSection.showDeveloperSettings);
        if (editorFilters.generalSettingsModuleSection.showDeveloperSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            generalSettings.enableDevPanel = DrawHorizontalToggle("Show Dev Panel?", "", smallFieldHeight,
                generalSettings.enableDevPanel);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showControllerSettings =
            HandleModuleBanner("CONTROLLER",
                editorFilters.generalSettingsModuleSection.showControllerSettings);
        if (editorFilters.generalSettingsModuleSection.showControllerSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            generalSettings.useOldController = DrawHorizontalToggle("Use Old Controller?", "", smallFieldHeight,
                generalSettings.useOldController);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }


        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showDialogueSettings =
            HandleModuleBanner("DIALOGUE", editorFilters.generalSettingsModuleSection.showDialogueSettings);
        if (editorFilters.generalSettingsModuleSection.showDialogueSettings)
        {
            generalSettings.dialogueKeywordsList =
                DrawStringList("+ Add Dialogue Keyword", generalSettings.dialogueKeywordsList, generalSettings.dialogueKeywords);
        }
        
        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showActionKeys =
            HandleModuleBanner("ACTION KEYS", editorFilters.generalSettingsModuleSection.showActionKeys);
        if (editorFilters.generalSettingsModuleSection.showActionKeys)
        {
            GUILayout.Space(10);
            editorFilters.generalSettingsModuleSection.showActionKeyCategoryList =
                HandleModuleBanner("ACTION KEY CATEGORIES",
                    editorFilters.generalSettingsModuleSection.showActionKeyCategoryList);
            if (editorFilters.generalSettingsModuleSection.showActionKeyCategoryList)
            {
                generalSettings.ActionKeyCategoryList = DrawStringList("+ Add Action Key Category", generalSettings.ActionKeyCategoryList, null);
            }

            GUILayout.Space(10);
            editorFilters.generalSettingsModuleSection.showActionKeyList =
                HandleModuleBanner("ACTION KEY LIST", editorFilters.generalSettingsModuleSection.showActionKeyList);
            if (editorFilters.generalSettingsModuleSection.showActionKeyList)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace, false);
                if (GUILayout.Button("+ Add Action Key", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                    GUILayout.ExpandWidth(true)))
                {
                    generalSettings.actionKeys.Add(new RPGGeneralDATA.ActionKey());
                }

                EndHorizontalMargin(middleButtonSpace, false);
                
                StartHorizontalMargin(bigHorizontalSpace, true);
                for (var a = 0; a < generalSettings.actionKeys.Count; a++)
                {
                    GUILayout.Space(10);
                    var requirementNumber = a + 1;
                    EditorGUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        generalSettings.actionKeys.RemoveAt(a);
                        return;
                    }

                    var effectName = generalSettings.actionKeys[a].actionName;
                    EditorGUILayout.LabelField("" + requirementNumber + ": " + effectName);
                    EditorGUILayout.EndHorizontal();

                    generalSettings.actionKeys[a].actionName = DrawHorizontalTextField("Action Name", "",
                        smallFieldHeight, generalSettings.actionKeys[a].actionName);
                    generalSettings.actionKeys[a].actionDisplayName = DrawHorizontalTextField("Display Name", "",
                        smallFieldHeight, generalSettings.actionKeys[a].actionDisplayName);
                    
                    generalSettings.actionKeys[a].defaultKey =
                        (KeyCode) EditorGUILayout.EnumPopup("Default Key", generalSettings.actionKeys[a].defaultKey);

                    generalSettings.actionKeys[a].isUnique = DrawHorizontalToggle("Is Unique?",
                        "If Unique, no other action key can have the same Key assigned",
                        smallFieldHeight,
                        generalSettings.actionKeys[a].isUnique);
                    
                    var curIndex = getIndexFromName("ActionKeyCategory", generalSettings.actionKeys[a].category);
                    var tempIndex = EditorGUILayout.Popup("Category", curIndex, generalSettings.ActionKeyCategoryList.ToArray());
                    if (generalSettings.ActionKeyCategoryList.Count > 0)
                    {
                        generalSettings.actionKeys[a].category = generalSettings.ActionKeyCategoryList[tempIndex];
                    }
                }
                EndHorizontalMargin(bigHorizontalSpace, true);

                if (generalSettings.actionKeys.Count > 4)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(middleButtonSpace, false);
                    if (GUILayout.Button("+ Add Action Key", skin.GetStyle("AddButton"), GUILayout.MinWidth(150),
                        GUILayout.ExpandWidth(true)))
                    {
                        generalSettings.actionKeys.Add(new RPGGeneralDATA.ActionKey());
                    }

                    EndHorizontalMargin(middleButtonSpace, false);
                }
            }
        }

        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showGameModifierSettings =
            HandleModuleBanner("GAME MODIFIERS", editorFilters.generalSettingsModuleSection.showGameModifierSettings);
        if (editorFilters.generalSettingsModuleSection.showGameModifierSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            generalSettings.useGameModifiers = DrawHorizontalToggle("Use Game Modifiers?", "", smallFieldHeight,
                generalSettings.useGameModifiers);
            if (generalSettings.useGameModifiers)
            {
                generalSettings.baseGameModifierPointsInMenu = DrawHorizontalIntField("Starting Points (Menu)", "",
                    smallFieldHeight,
                    generalSettings.baseGameModifierPointsInMenu);
                generalSettings.baseGameModifierPointsInWorld = DrawHorizontalIntField("Starting Points (World)", "",
                    smallFieldHeight,
                    generalSettings.baseGameModifierPointsInWorld);
                
                generalSettings.negativePointsRequired = DrawHorizontalIntField("Negative Points Required?", "",
                    smallFieldHeight,
                    generalSettings.negativePointsRequired);
                
                generalSettings.checkMinNegativeModifier = DrawHorizontalToggle("Min Negative Modifiers?", "", smallFieldHeight,
                    generalSettings.checkMinNegativeModifier);
                if (generalSettings.checkMinNegativeModifier)
                {
                    generalSettings.minimumRequiredNegativeGameModifiers = DrawHorizontalIntField(
                        "Negative Modifiers",
                        "", smallFieldHeight,
                        generalSettings.minimumRequiredNegativeGameModifiers);
                }

                generalSettings.checkMaxPositiveModifier = DrawHorizontalToggle("Max Positive Modifiers?", "", smallFieldHeight,
                    generalSettings.checkMaxPositiveModifier);
                if (generalSettings.checkMaxPositiveModifier)
                {
                    generalSettings.maximumRequiredPositiveGameModifiers = DrawHorizontalIntField(
                        "Positive Modifiers",
                        "", smallFieldHeight,
                        generalSettings.maximumRequiredPositiveGameModifiers);
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.generalSettingsModuleSection.showLayers =
            HandleModuleBanner("LAYERS", editorFilters.generalSettingsModuleSection.showLayers);
        if (editorFilters.generalSettingsModuleSection.showLayers)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            generalSettings.worldInteractableLayer = EditorGUILayout.LayerField("Interactable Layer", generalSettings.worldInteractableLayer);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }


    private void DrawPolytopeStudioView(float width)
    {
        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("POLYTOPE STUDIO:", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350*getWidthModifier(), 250*getHeightModifier())
            , editorDATA.polytopePartnerImage.texture);
        
        GUILayout.Space(250*getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/35251");
        }
        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(10);

        GUILayout.Label("ASSETS PROVIDED:", skin.GetStyle("ViewTitle"), GUILayout.Height(30));
        GUILayout.Space(10);
        
        StartHorizontalMargin(bigHorizontalSpace, true);
        EditorGUI.BeginDisabledGroup(true);
        foreach (var t in editorDATA.polytopeStudioAssets_GO)
            EditorGUILayout.ObjectField(t.name,
                t, typeof(GameObject), false,
                GUILayout.Height(20));

        EditorGUI.EndDisabledGroup();
        EndHorizontalMargin(bigHorizontalSpace, true);

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawCafofoView(float width)
    {
        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("CAFOFO:", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);
        
        GUI.DrawTexture(new Rect(width / 3f, 60, 350*getWidthModifier(), 250*getHeightModifier())
            , editorDATA.cafofoPartnerImage.texture);
        
        GUILayout.Space(250*getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/16881");
        }
        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(10);

        GUILayout.Label("ASSETS PROVIDED:", skin.GetStyle("ViewTitle"), GUILayout.Width(660), GUILayout.Height(30));
        GUILayout.Space(10);
        
        StartHorizontalMargin(bigHorizontalSpace, true);
        EditorGUI.BeginDisabledGroup(true);
        foreach (var t in editorDATA.cafofoAssets_AUDIO)
            EditorGUILayout.ObjectField(t.name, t,
                typeof(AudioClip), false, GUILayout.Height(20));

        EditorGUI.EndDisabledGroup();
        EndHorizontalMargin(bigHorizontalSpace, true);

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawGabrielAguiarView(float width)
    {

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("Gabriel Aguiar:", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350 * getWidthModifier(), 250 * getHeightModifier())
            , editorDATA.GabrielAguiarPartnerImage.texture);

        GUILayout.Space(250 * getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/31523");
        }

        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(10);

        GUILayout.Label("ASSETS PROVIDED:", skin.GetStyle("ViewTitle"), GUILayout.Height(30));
        GUILayout.Space(10);

        StartHorizontalMargin(bigHorizontalSpace, true);
        EditorGUI.BeginDisabledGroup(true);
        foreach (var t in editorDATA.GabbrielAguiarAsset_GO)
            EditorGUILayout.ObjectField(t.name, t, typeof(GameObject), false, GUILayout.Height(20));

        EditorGUI.EndDisabledGroup();
        EndHorizontalMargin(bigHorizontalSpace, true);

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawRDRView(float width)
    {
        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("RDR:", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350 * getWidthModifier(), 250 * getHeightModifier())
            , editorDATA.RDRPartnerImage.texture);

        GUILayout.Space(250 * getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/19740");
        }

        EndHorizontalMargin(bigHorizontalSpace, false);

        GUILayout.Space(10);
        GUILayout.Label("ASSETS PROVIDED:", skin.GetStyle("ViewTitle"), GUILayout.Height(30));
        GUILayout.Space(10);

        StartHorizontalMargin(bigHorizontalSpace, true);
        EditorGUI.BeginDisabledGroup(true);
        
        foreach (var t in editorDATA.RDRAssets_GO)
            EditorGUILayout.ObjectField(t.name, t, typeof(GameObject), false, GUILayout.Height(20));

        EditorGUI.EndDisabledGroup();
        EndHorizontalMargin(bigHorizontalSpace, true);
        EditorGUILayout.EndVertical();

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawTitanForgeView(float width)
    {
    
        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("Titan Forge:", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350*getWidthModifier(), 250*getHeightModifier())
            , editorDATA.TitanForgePartnerImage.texture);
        
        GUILayout.Space(250*getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/45702");
        }
        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(10);

        GUILayout.Label("ASSETS PROVIDED:", skin.GetStyle("ViewTitle"), GUILayout.Height(30));
        GUILayout.Space(10);
        
        StartHorizontalMargin(bigHorizontalSpace, true);
        EditorGUI.BeginDisabledGroup(true);
        foreach (var t in editorDATA.TitanForgeAssets_GO)
            EditorGUILayout.ObjectField(t.name, t, typeof(GameObject), false, GUILayout.Height(20));

        EditorGUI.EndDisabledGroup();
        EndHorizontalMargin(bigHorizontalSpace, true);

        GUILayout.Space(30);
        GUILayout.EndScrollView();
       
    }

    private void DrawPONETIView(float width)
    {

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("PONETI:", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350 * getWidthModifier(), 250 * getHeightModifier())
            , editorDATA.PONETIPartnerImage.texture);

        GUILayout.Space(250 * getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/38930");
        }

        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(10);

        GUILayout.Label("ASSETS PROVIDED:", skin.GetStyle("ViewTitle"), GUILayout.Height(30));
        GUILayout.Space(10);

        StartHorizontalMargin(width / 4f, true);
        EditorGUI.BeginDisabledGroup(true);

        for (var i = 0; i < editorDATA.PONETIAssets_SPRITE.Count; i++)
        {
            EditorGUILayout.ObjectField(editorDATA.PONETIAssets_SPRITE[i], typeof(Sprite), false, GUILayout.Width(150), GUILayout.Height(150));
            var curImageIndex = i + 1;
            if (i > 0 && curImageIndex % 5 == 0)
            {
                EditorGUILayout.EndHorizontal();
                EditorGUILayout.BeginVertical();
                EditorGUILayout.BeginHorizontal();
            }
            
        }

        EditorGUI.EndDisabledGroup();
        EndHorizontalMargin(width / 4f, true);

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawMalbersAnimationView(float width)
    {

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("Malbers Animation:", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350 * getWidthModifier(), 250 * getHeightModifier())
            , editorDATA.MalbersAnimationParterImage.texture);

        GUILayout.Space(250 * getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/16163");
        }

        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(10);

        GUILayout.Label("ASSETS PROVIDED:", skin.GetStyle("ViewTitle"), GUILayout.Height(30));
        GUILayout.Space(10);

        StartHorizontalMargin(bigHorizontalSpace, true);
        EditorGUI.BeginDisabledGroup(true);
        foreach (var t in editorDATA.MalbersAnimationAssets_GO)
            EditorGUILayout.ObjectField(t.name, t, typeof(GameObject), false,
                GUILayout.Height(20));

        EditorGUI.EndDisabledGroup();
        EndHorizontalMargin(bigHorizontalSpace, true);

        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }
    
    private void DrawBOXOPHOBICView(float width)
    {

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("BOXOPHOBIC", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350 * getWidthModifier(), 250 * getHeightModifier())
            , editorDATA.BOXOPHOBICPartnerImage.texture);

        GUILayout.Space(250 * getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/20529");
        }

        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }
    
    private void DrawPolyArtView(float width)
    {

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("Polyart Studio", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350 * getWidthModifier(), 250 * getHeightModifier())
            , editorDATA.PolyartStudioPartnerImage.texture);

        GUILayout.Space(250 * getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/45106");
        }

        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }
    
    private void DrawStaggartView(float width)
    {

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("Staggart Creations", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350 * getWidthModifier(), 250 * getHeightModifier())
            , editorDATA.StaggartPartnerImage.texture);

        GUILayout.Space(250 * getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/15580");
        }

        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }
    
    private void DrawInfinityPBRView(float width)
    {

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(width), GUILayout.MaxWidth(width), GUILayout.Height(viewRect.height - 20));

        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);
        GUILayout.Label("Infinity PBR", skin.GetStyle("ViewTitle"), GUILayout.Height(50));
        GUILayout.Space(10);

        GUI.DrawTexture(new Rect(width / 3f, 60, 350 * getWidthModifier(), 250 * getHeightModifier())
            , editorDATA.InfinityPBRPartnerImage.texture);

        GUILayout.Space(250 * getHeightModifier());
        StartHorizontalMargin(bigHorizontalSpace, false);
        if (GUILayout.Button("> GO TO ASSET STORE PAGE <", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(40)))
        {
            Application.OpenURL("https://assetstore.unity.com/publishers/4645");
        }

        EndHorizontalMargin(bigHorizontalSpace, false);
        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void LoadSettings()
    {
        bool needsReload = false;
        combatSettings = Resources.Load<RPGCombatDATA>(editorDATA.RPGBDatabasePath + "Settings/" + "CombatSettings");
        if (combatSettings != null)
        {
            combatSettings = Instantiate(combatSettings) as RPGCombatDATA;
        }
        else
        {
            AssetDatabase.CreateAsset(CreateInstance<RPGCombatDATA>(), editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "CombatSettings" + ".asset");
            needsReload = true;
        }
        itemSettings = Resources.Load<RPGItemDATA>(editorDATA.RPGBDatabasePath + "Settings/" + "ItemSettings");
        if (itemSettings != null)
        {
            itemSettings = Instantiate(itemSettings) as RPGItemDATA;
        }
        else
        {
            AssetDatabase.CreateAsset(CreateInstance<RPGItemDATA>(), editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "ItemSettings" + ".asset");
            needsReload = true;
        }
        generalSettings = Resources.Load<RPGGeneralDATA>(editorDATA.RPGBDatabasePath + "Settings/" + "GeneralSettings");
        if (generalSettings != null)
        {
            generalSettings = Instantiate(generalSettings) as RPGGeneralDATA;
        }
        else
        {
            AssetDatabase.CreateAsset(CreateInstance<RPGGeneralDATA>(), editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" + "GeneralSettings" + ".asset");
            needsReload = true;
        }

        if (needsReload)
        {
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
            
            LoadSettings();
        }
    }

    private void DrawCombatSettingsView()
    {
        if (combatSettings == null)
        {
            combatSettings = Resources.Load<RPGCombatDATA>(editorDATA.RPGBDatabasePath + "Settings/" + "CombatSettings");
            if (combatSettings == null)
            {
                Debug.LogError("COULD NOT FIND COMBAT SETTINGS");
                return;
            }
            combatSettings = Instantiate(combatSettings) as RPGCombatDATA;
        }

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - 40));

        GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showCombatRules =
            HandleModuleBanner("COMBAT", editorFilters.combatSettingsModuleSection.showCombatRules);
        if (editorFilters.combatSettingsModuleSection.showCombatRules)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            combatSettings.healthStatREF = (RPGStat) EditorGUILayout.ObjectField(
                new GUIContent("Health Stat", "The stat that represents health for all combat units"),
                RPGBuilderUtilities.GetStatFromIDEditor(combatSettings.healthStatID, allStats), typeof(RPGStat), false);

            combatSettings.healthStatID = combatSettings.healthStatREF != null ? combatSettings.healthStatREF.ID : -1;

            combatSettings.GCDDuration = DrawHorizontalFloatField("Global Cooldown Duration", "", smallFieldHeight,
                combatSettings.GCDDuration);
            combatSettings.CriticalDamageBonus = DrawHorizontalFloatField("Critical Bonus (%)", "", smallFieldHeight,
                combatSettings.CriticalDamageBonus);
            combatSettings.outOfCombatDuration = DrawHorizontalFloatField("Combat Reset Timer", "", smallFieldHeight,
                combatSettings.outOfCombatDuration);
            combatSettings.useClasses = DrawHorizontalToggle("Using Classes", "", smallFieldHeight,
                combatSettings.useClasses);
            combatSettings.useAutomaticCombatState = DrawHorizontalToggle("Auto. Combat State?", "", smallFieldHeight,
                combatSettings.useAutomaticCombatState);
            combatSettings.targetPlayerOnClick = DrawHorizontalToggle("Click to target character?", "", smallFieldHeight,
                combatSettings.targetPlayerOnClick);

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showAbilities =
            HandleModuleBanner("ABILITIES", editorFilters.combatSettingsModuleSection.showAbilities);
        if (editorFilters.combatSettingsModuleSection.showAbilities)
        {
            StartHorizontalMargin(bigHorizontalSpace, true);
            combatSettings.AbilityCooldownTagList = DrawStringList("+ Add Cooldown Tag",
                combatSettings.AbilityCooldownTagList, null);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showEffects =
            HandleModuleBanner("EFFECTS", editorFilters.combatSettingsModuleSection.showEffects);
        if (editorFilters.combatSettingsModuleSection.showEffects)
        {
            StartHorizontalMargin(bigHorizontalSpace, true);
            combatSettings.EffectTagList = DrawStringList("+ Add Effect Tag",
                combatSettings.EffectTagList, null);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        /*GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showActionBar =
            HandleModuleBanner("ACTION BAR", editorFilters.combatSettingsModuleSection.showActionBar);
        if (editorFilters.combatSettingsModuleSection.showActionBar)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            combatSettings.actionBarSlots = DrawHorizontalIntField("Action Bar Slots", "", smallFieldHeight,
                combatSettings.actionBarSlots);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }*/

        GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showTalentTrees =
            HandleModuleBanner("TALENT TREES", editorFilters.combatSettingsModuleSection.showTalentTrees);
        if (editorFilters.combatSettingsModuleSection.showTalentTrees)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            combatSettings.talentTreesNodePerTierCount = DrawHorizontalIntField("Nodes Per Tier", "", smallFieldHeight,
                combatSettings.talentTreesNodePerTierCount);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showFactionSettings =
            HandleModuleBanner("FACTION", editorFilters.combatSettingsModuleSection.showFactionSettings);
        if (editorFilters.combatSettingsModuleSection.showFactionSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            combatSettings.FactionStancesList = DrawStringList("+ Add Faction Stance",
                combatSettings.FactionStancesList, combatSettings.FactionStances);
            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }

        GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showStatSettings =
            HandleModuleBanner("STAT", editorFilters.combatSettingsModuleSection.showStatSettings);
        if (editorFilters.combatSettingsModuleSection.showStatSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            
            combatSettings.pointREF = (RPGTreePoint) EditorGUILayout.ObjectField(
                new GUIContent("Stat Allocation Points", "The point type used when allocating points in game"),
                RPGBuilderUtilities.GetTreePointFromIDEditor(combatSettings.pointID, allTreePoints), typeof(RPGTreePoint), false);

            combatSettings.pointID = combatSettings.pointREF != null ? combatSettings.pointREF.ID : -1;

            combatSettings.spendAllStatPointsToCreateChar =
                DrawHorizontalToggle("Spend all stat points?", "Must spend all stat points to create character?",
                    smallFieldHeight, combatSettings.spendAllStatPointsToCreateChar);
            combatSettings.canDescreaseGameStatPoints =
                DrawHorizontalToggle("Can Decrease Points?", "Can the player decrease points once spent?",
                    smallFieldHeight, combatSettings.canDescreaseGameStatPoints);
            
            GUILayout.Space(10);
            EndHorizontalMargin(bigHorizontalSpace, true);
            
            GUILayout.Space(10);
            editorFilters.combatSettingsModuleSection.showStatFunctions =
                HandleModuleBanner("STAT FUNCTIONS", editorFilters.combatSettingsModuleSection.showStatFunctions);
            if (editorFilters.combatSettingsModuleSection.showStatFunctions)
            {
                combatSettings.StatFunctionsList = DrawStringList("+ Add Stat Function",
                    combatSettings.StatFunctionsList, combatSettings.StatFunctions);
            }

            GUILayout.Space(10);
            editorFilters.combatSettingsModuleSection.showStatCategory =
                HandleModuleBanner("STAT CATEGORIES", editorFilters.combatSettingsModuleSection.showStatCategory);
            if (editorFilters.combatSettingsModuleSection.showStatCategory)
            {
                combatSettings.UIStatsCategoriesList = DrawStringList("+ Add Stat Category",
                    combatSettings.UIStatsCategoriesList, combatSettings.UIStatsCategories);
            }

        }
        
        GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showNodeSockets =
            HandleModuleBanner("NODE SOCKETS", editorFilters.combatSettingsModuleSection.showNodeSockets);
        if (editorFilters.combatSettingsModuleSection.showNodeSockets)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            combatSettings.nodeSocketNames = DrawStringList("+ Add Node Socket",
                combatSettings.nodeSocketNames, null);
            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }
        
        
        GUILayout.Space(10);
        editorFilters.combatSettingsModuleSection.showSprint =
            HandleModuleBanner("SPRINT", editorFilters.combatSettingsModuleSection.showSprint);
        if (editorFilters.combatSettingsModuleSection.showSprint)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            combatSettings.sprintStatDrainID = DrawRPGDataEntryField(combatSettings.sprintStatDrainID, "Stat", "Stat");
            combatSettings.sprintStatDrainAmount =
                DrawHorizontalIntField("Amount", "", smallFieldHeight, combatSettings.sprintStatDrainAmount);
            combatSettings.sprintStatDrainInterval =
                DrawHorizontalFloatField("Interval", "", smallFieldHeight, combatSettings.sprintStatDrainInterval);
            EndHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.Space(10);
        }
        
        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private void DrawItemSettingsView()
    {
        if (itemSettings == null)
        {
            itemSettings = Resources.Load<RPGItemDATA>(editorDATA.RPGBDatabasePath + "Settings/" + "ItemSettings");
            if (itemSettings == null)
            {
                Debug.LogError("COULD NOT FIND ITEM SETTINGS");
                return;
            }
            itemSettings = Instantiate(itemSettings) as RPGItemDATA;
        }

        // DRAW VIEW
        UpdateSettingsViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);
        
        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth), GUILayout.Height(viewRect.height - 40));

        GUILayout.Space(10);
        editorFilters.itemSettingsModuleSection.showInventorySettings =
            HandleModuleBanner("INVENTORY", editorFilters.itemSettingsModuleSection.showInventorySettings);
        if (editorFilters.itemSettingsModuleSection.showInventorySettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            itemSettings.InventorySlots = DrawHorizontalIntField("Base Slots", "", smallFieldHeight,
                itemSettings.InventorySlots);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }


        GUILayout.Space(10);
        editorFilters.itemSettingsModuleSection.showItemSettings =
            HandleModuleBanner("ITEM", editorFilters.itemSettingsModuleSection.showItemSettings);
        if (editorFilters.itemSettingsModuleSection.showItemSettings)
        {

            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showItemType =
                HandleModuleBanner("ITEM TYPES", editorFilters.itemSettingsModuleSection.showItemType);
            if (editorFilters.itemSettingsModuleSection.showItemType)
            {
                itemSettings.itemTypeList =
                    DrawStringList("+ Add Item Type", itemSettings.itemTypeList, itemSettings.itemType);
            }

            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showItemRarity =
                HandleModuleBanner("ITEM RARITY", editorFilters.itemSettingsModuleSection.showItemRarity);
            if (editorFilters.itemSettingsModuleSection.showItemRarity)
            {
                itemSettings.itemRarityList =
                    DrawStringList("+ Add Item Rarity", itemSettings.itemRarityList, itemSettings.itemRarity);
            }

            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showItemColor =
                HandleModuleBanner("ITEM RARITY COLORS", editorFilters.itemSettingsModuleSection.showItemColor);
            if (editorFilters.itemSettingsModuleSection.showItemColor)
            {
                itemSettings.itemRarityColorsList =
                    DrawColorList("+ Add Item Color", itemSettings.itemRarityColorsList, itemSettings.itemRarityColors);
            }

            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showRarityImage =
                HandleModuleBanner("ITEM RARITY IMAGES", editorFilters.itemSettingsModuleSection.showRarityImage);
            if (editorFilters.itemSettingsModuleSection.showRarityImage)
            {
                itemSettings.itemRarityImagesList =
                    DrawSpriteList("+ Add Item Rarity Image", itemSettings.itemRarityImagesList,
                        itemSettings.itemRarityImages);
            }
        }

        GUILayout.Space(10);
        editorFilters.itemSettingsModuleSection.showWeaponSettings =
            HandleModuleBanner("WEAPON", editorFilters.itemSettingsModuleSection.showWeaponSettings);
        if (editorFilters.itemSettingsModuleSection.showWeaponSettings)
        {
            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showWeaponType =
                HandleModuleBanner("WEAPON TYPES", editorFilters.itemSettingsModuleSection.showWeaponType);
            if (editorFilters.itemSettingsModuleSection.showWeaponType)
            {
                itemSettings.weaponTypeList =
                    DrawStringList("+ Add Weapon Type", itemSettings.weaponTypeList, itemSettings.weaponType);
            }
            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showWeaponAnimatorOverride =
                HandleModuleBanner("WEAPON ANIMATOR OVERRIDE", editorFilters.itemSettingsModuleSection.showWeaponAnimatorOverride);
            if (editorFilters.itemSettingsModuleSection.showWeaponAnimatorOverride)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(middleButtonSpace, false);
                if (GUILayout.Button("+ Add Animator Override", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                    GUILayout.Height(25)))
                {
                    itemSettings.weaponAnimatorOverrides.Add(new RPGItemDATA.WeaponAnimatorOverride());
                }

                EndHorizontalMargin(middleButtonSpace, false);

                for (var a = 0; a < itemSettings.weaponAnimatorOverrides.Count; a++)
                {
                    GUILayout.Space(10);
                    StartHorizontalMargin(bigHorizontalSpace, true);
                    GUILayout.BeginHorizontal();
                    if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                        GUILayout.Height(20)))
                    {
                        itemSettings.weaponAnimatorOverrides.RemoveAt(a);
                        return;
                    }

                    GUILayout.Space(10);
                    string elementName = itemSettings.weaponAnimatorOverrides[a].weaponType1;
                    if (itemSettings.weaponAnimatorOverrides[a].requireWeapon2)
                    {
                        elementName += " + " + itemSettings.weaponAnimatorOverrides[a].weaponType2;
                    }
                        
                    EditorGUILayout.LabelField(elementName);

                    GUILayout.EndHorizontal();
                    
                    var currentWeaponTypeIndex1 = getIndexFromName("WeaponType", itemSettings.weaponAnimatorOverrides[a].weaponType1);
                    var tempIndex1 = EditorGUILayout.Popup("Weapon Type", currentWeaponTypeIndex1, itemSettings.weaponTypeList.ToArray());
                    if (itemSettings.weaponTypeList.Count > 0)
                        itemSettings.weaponAnimatorOverrides[a].weaponType1 = itemSettings.weaponTypeList[tempIndex1];

                    itemSettings.weaponAnimatorOverrides[a].requireWeapon2 = DrawHorizontalToggle("Require Second Weapon?",
                        "", smallFieldHeight, itemSettings.weaponAnimatorOverrides[a].requireWeapon2);
                    if (itemSettings.weaponAnimatorOverrides[a].requireWeapon2)
                    {
                        var currentWeaponTypeIndex2 = getIndexFromName("WeaponType", itemSettings.weaponAnimatorOverrides[a].weaponType2);
                        var tempIndex2 = EditorGUILayout.Popup("Weapon Type 2", currentWeaponTypeIndex2, itemSettings.weaponTypeList.ToArray());
                        if (itemSettings.weaponTypeList.Count > 0)
                            itemSettings.weaponAnimatorOverrides[a].weaponType2 = itemSettings.weaponTypeList[tempIndex2];
                    }
            
                    itemSettings.weaponAnimatorOverrides[a].restAnimatorOverride = (RuntimeAnimatorController) 
                        EditorGUILayout.ObjectField("Rest Animator Override", itemSettings.weaponAnimatorOverrides[a].restAnimatorOverride,
                            typeof(RuntimeAnimatorController), false, GUILayout.Height(20));
                    itemSettings.weaponAnimatorOverrides[a].combatAnimatorOverride = (RuntimeAnimatorController) 
                        EditorGUILayout.ObjectField("Combat Animator Override", itemSettings.weaponAnimatorOverrides[a].combatAnimatorOverride,
                            typeof(RuntimeAnimatorController), false, GUILayout.Height(20));
                    
                    EndHorizontalMargin(bigHorizontalSpace, true);
                }
            }
            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showSlotType =
                HandleModuleBanner("WEAPON SLOT TYPES", editorFilters.itemSettingsModuleSection.showSlotType);
            if (editorFilters.itemSettingsModuleSection.showSlotType)
            {
                itemSettings.slotTypeList =
                    DrawStringList("+ Add Slot Type", itemSettings.slotTypeList, itemSettings.slotType);
            }
        }

        GUILayout.Space(10);
        editorFilters.itemSettingsModuleSection.showArmorSettings =
            HandleModuleBanner("ARMOR", editorFilters.itemSettingsModuleSection.showArmorSettings);
        if (editorFilters.itemSettingsModuleSection.showArmorSettings)
        {

            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showArmorType =
                HandleModuleBanner("ARMOR TYPES", editorFilters.itemSettingsModuleSection.showArmorType);
            if (editorFilters.itemSettingsModuleSection.showArmorType)
            {
                itemSettings.armorTypeList =
                    DrawStringList("+ Add Armor Type", itemSettings.armorTypeList, itemSettings.armorType);
            }
            GUILayout.Space(10);
            editorFilters.itemSettingsModuleSection.showArmorSlot =
                HandleModuleBanner("ARMOR SLOTS", editorFilters.itemSettingsModuleSection.showArmorSlot);
            if (editorFilters.itemSettingsModuleSection.showArmorSlot)
            {
                itemSettings.armorSlotsList =
                    DrawStringList("+ Add Armor Slot", itemSettings.armorSlotsList, itemSettings.armorSlots);
            }
        }

        GUILayout.Space(10);
        editorFilters.itemSettingsModuleSection.showSocketSettings =
            HandleModuleBanner("SOCKET", editorFilters.itemSettingsModuleSection.showSocketSettings);
        if (editorFilters.itemSettingsModuleSection.showSocketSettings)
        {
            StartHorizontalMargin(bigHorizontalSpace, true);
            itemSettings.socketTypeList =
                DrawStringList("+ Add Socket Type", itemSettings.socketTypeList, itemSettings.socketType);
            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(30);
        GUILayout.EndScrollView();
    }

    private List<string> DrawStringList(string buttonTitle, List<string> stringList, string[] oldStringArray)
    {
        GUILayout.Space(10);
        StartHorizontalMargin(middleButtonSpace, false);
        if (GUILayout.Button(buttonTitle, skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(25)))
        {
            stringList.Add("");
        }

        EndHorizontalMargin(middleButtonSpace, false);

        for (var a = 0; a < stringList.Count; a++)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                GUILayout.Height(20)))
            {
                stringList.RemoveAt(a);
                return stringList;
            }

            GUILayout.Space(10);

            GUILayout.BeginVertical();
            stringList[a] = DrawHorizontalTextField("", "", smallFieldHeight,
                stringList[a]);
            GUILayout.EndVertical();
            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        if (stringList.Count == 0 && oldStringArray != null && oldStringArray.Length > 0)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("Convert old Arrays to List", skin.GetStyle("RemoveAbilityRankButton"),
                GUILayout.ExpandWidth(true),
                GUILayout.Height(25)))
            {
                stringList.Clear();

                foreach (var arrayEntry in oldStringArray)
                {
                    stringList.Add(arrayEntry);
                }
            }

            EndHorizontalMargin(middleButtonSpace, false);
        }

        return stringList;
    }
    
    private List<Color> DrawColorList(string buttonTitle, List<Color> colorList, Color[] oldColorArray)
    {
        GUILayout.Space(10);
        StartHorizontalMargin(middleButtonSpace, false);
        if (GUILayout.Button(buttonTitle, skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(25)))
        {
            colorList.Add(new Color());
        }

        EndHorizontalMargin(middleButtonSpace, false);

        for (var a = 0; a < colorList.Count; a++)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                GUILayout.Height(20)))
            {
                colorList.RemoveAt(a);
                return colorList;
            }

            GUILayout.Space(10);

            GUILayout.BeginVertical();
            colorList[a] = DrawHorizontalColorField("", "", smallFieldHeight,
                colorList[a]);
            GUILayout.EndVertical();
            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        if (colorList.Count == 0 && oldColorArray != null && oldColorArray.Length > 0)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("Convert old Arrays to List", skin.GetStyle("RemoveAbilityRankButton"),
                GUILayout.ExpandWidth(true),
                GUILayout.Height(25)))
            {
                colorList.Clear();

                foreach (var arrayEntry in oldColorArray)
                {
                    colorList.Add(arrayEntry);
                }
            }

            EndHorizontalMargin(middleButtonSpace, false);
        }

        return colorList;
    }

    private List<Sprite> DrawSpriteList(string buttonTitle, List<Sprite> spriteList, Sprite[] oldSpriteArray)
    {
        GUILayout.Space(10);
        StartHorizontalMargin(middleButtonSpace, false);
        if (GUILayout.Button(buttonTitle, skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
            GUILayout.Height(25)))
        {
            spriteList.Add(null);
        }

        EndHorizontalMargin(middleButtonSpace, false);

        for (var a = 0; a < spriteList.Count; a++)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(20),
                GUILayout.Height(20)))
            {
                spriteList.RemoveAt(a);
                return spriteList;
            }

            GUILayout.Space(10);

            GUILayout.BeginVertical();
            spriteList[a] = DrawHorizontalSpriteField("", "", smallFieldHeight,
                spriteList[a], 100f);
            GUILayout.EndVertical();
            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        if (spriteList.Count == 0 && oldSpriteArray != null && oldSpriteArray.Length > 0)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("Convert old Arrays to List", skin.GetStyle("RemoveAbilityRankButton"),
                GUILayout.ExpandWidth(true),
                GUILayout.Height(25)))
            {
                spriteList.Clear();

                foreach (var arrayEntry in oldSpriteArray)
                {
                    spriteList.Add(arrayEntry);
                }
            }

            EndHorizontalMargin(middleButtonSpace, false);
        }

        return spriteList;
    }
    
    private void DrawEditorSettingsView()
    {
        if (editorDATA == null) return;

        UpdateSettingsViewData();
        UpdateFieldData();

        float topSpace = buttonHeight + 5;
        GUILayout.Space(topSpace);

        viewScrollPosition = EditorGUILayout.BeginScrollView(viewScrollPosition, false, false,
            GUILayout.Width(viewWidth), GUILayout.MaxWidth(viewWidth),
            GUILayout.Height(viewRect.height - 40));

        cachedTheme = editorDATA.curEditorTheme;

        GUILayout.Space(10);
        editorFilters.editorSettingsModuleSection.showEditorInfo =
            HandleModuleBanner("EDITOR INFO", editorFilters.editorSettingsModuleSection.showEditorInfo);
        if (editorFilters.editorSettingsModuleSection.showEditorInfo)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            
            EditorGUILayout.LabelField("RPG Builder Version: " + editorDATA.getRPGBVersion(), GUILayout.MinWidth(150));

            EndHorizontalMargin(bigHorizontalSpace, true);
        }
        
        GUILayout.Space(10);
        editorFilters.editorSettingsModuleSection.showThemeSettings =
            HandleModuleBanner("SETTINGS", editorFilters.editorSettingsModuleSection.showThemeSettings);
        if (editorFilters.editorSettingsModuleSection.showThemeSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            editorDATA.curEditorTheme =
                (RPGBuilderEditorDATA.ThemeTypes) EditorGUILayout.EnumPopup("Editor Theme", editorDATA.curEditorTheme);

            editorDATA.increasedEditorUpdates = DrawHorizontalToggle("Increased Editor Updates", "", smallFieldHeight,
                editorDATA.increasedEditorUpdates);

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.editorSettingsModuleSection.showEditorUtilities =
            HandleModuleBanner("UTILITIES", editorFilters.editorSettingsModuleSection.showEditorUtilities);
        if (editorFilters.editorSettingsModuleSection.showEditorUtilities)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);

            if (GUILayout.Button("Delete All Characters", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.ExpandWidth(true), GUILayout.Height(25)))
            {
                if (EditorUtility.DisplayDialog("Confirm DELETE", "Are you sure you want to delete ALL Characters ?",
                    "YES",
                    "Cancel"))
                {
                    var path = Application.persistentDataPath;
                    var di = new DirectoryInfo(path);
                    var files = di.GetFiles().Where(o => o.Name.Contains("_CharacterData.txt")).ToArray();
                    foreach (var t in files)
                    {
                        File.Delete(t.FullName);
                    }
                }
            }
            GUILayout.Space(10);

            if (GUILayout.Button("Reset The Database", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.ExpandWidth(true), GUILayout.Height(25)))
            {
                if (EditorUtility.DisplayDialog("BE CAREFUL! CONFIRM DELETE DATABASE", "Are you sure? This will delete everything in your database. Only do this if you want to start from nothing.",
                    "YES",
                    "Cancel"))
                {
                    ClearAllDatabase(true);
                }
            }
            
            string buttonTitle = "Delete ";
            string buttonStyle = "RemoveAbilityRankButton";
            string dialogTitle = "!! BE CAREFUL !!";
            string dialogDescription = "You are about to delete ALL ";
            string option1 = "Yes", option2 = "Cancel";
            string barTitle = "Delete All ";
            
            GUILayout.Space(10);
            GUILayout.BeginHorizontal();
            StartHorizontalMargin(30, true);

            foreach (var module in editorDATA.categoriesData[0].subCategoriesData)
            {
                if (DrawButtonWithPopup(buttonTitle + module.SubCategoryName, buttonStyle,
                    dialogTitle, dialogDescription + module.SubCategoryName, option1, option2))
                {
                    DeleteAll((AssetType)Enum.Parse(typeof(AssetType), module.assetType), module.assetIDType, barTitle + module.SubCategoryName);
                }
                GUILayout.Space(5);
            }

            EndHorizontalMargin(30, true);
            
            
            StartHorizontalMargin(30, true);
            foreach (var module in editorDATA.categoriesData[1].subCategoriesData)
            {
                if (DrawButtonWithPopup(buttonTitle + module.SubCategoryName, buttonStyle,
                    dialogTitle, dialogDescription + module.SubCategoryName, option1, option2))
                {
                    DeleteAll((AssetType)Enum.Parse(typeof(AssetType), module.assetType), module.assetIDType, barTitle + module.SubCategoryName);
                }
                GUILayout.Space(5);
            }
            EndHorizontalMargin(30, true);
            
            
            StartHorizontalMargin(30, true);
            foreach (var module in editorDATA.categoriesData[2].subCategoriesData)
            {
                if (DrawButtonWithPopup(buttonTitle + module.SubCategoryName, buttonStyle,
                    dialogTitle, dialogDescription + module.SubCategoryName, option1, option2))
                {
                    DeleteAll((AssetType)Enum.Parse(typeof(AssetType), module.assetType), module.assetIDType, barTitle + module.SubCategoryName);
                }
                GUILayout.Space(5); 
            }
            EndHorizontalMargin(30, true);
            
            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.editorSettingsModuleSection.showDatabase =
            HandleModuleBanner("DATABASE", editorFilters.editorSettingsModuleSection.showDatabase);
        if (editorFilters.editorSettingsModuleSection.showDatabase)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
            GUILayout.BeginHorizontal();
            editorDATA.ResourcePath =
                DrawHorizontalTextField("Resource Folder Path", "", smallFieldHeight, editorDATA.ResourcePath);
            if (GUILayout.Button("Reset", skin.GetStyle("AddButton"), GUILayout.MinWidth(75), GUILayout.Height(smallFieldHeight)))
            {
                editorDATA.ResourcePath = "Assets/Blink/Tools/RPGBuilder/Resources/";
                GUI.FocusControl(null);
            }

            GUILayout.EndHorizontal();
            GUILayout.Space(10);

            GUILayout.BeginHorizontal();
            editorDATA.RPGBDatabasePath = DrawHorizontalTextField("Database Folder Path", "", smallFieldHeight,
                editorDATA.RPGBDatabasePath);
            if (GUILayout.Button("Reset", skin.GetStyle("AddButton"), GUILayout.MinWidth(75), GUILayout.Height(smallFieldHeight)))
            {
                editorDATA.RPGBDatabasePath = "Database/";
                GUI.FocusControl(null);
            }

            GUILayout.EndHorizontal();
            GUILayout.Space(10);

            GUILayout.BeginHorizontal();
            editorDATA.RPGBEditorDataPath = DrawHorizontalTextField("Editor Data Folder Path", "", smallFieldHeight,
                editorDATA.RPGBEditorDataPath);
            if (GUILayout.Button("Reset", skin.GetStyle("AddButton"), GUILayout.MinWidth(75), GUILayout.Height(smallFieldHeight)))
            {
                editorDATA.RPGBEditorDataPath = "EditorData/";
                GUI.FocusControl(null);
            }

            GUILayout.EndHorizontal();
            EndHorizontalMargin(bigHorizontalSpace, true);
            
            GUILayout.Space(10);
            editorFilters.editorSettingsModuleSection.showDatabaseExport =
                HandleModuleBanner("EXPORT THE DATABASE", editorFilters.editorSettingsModuleSection.showDatabaseExport);
            if (editorFilters.editorSettingsModuleSection.showDatabaseExport)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(bigHorizontalSpace, true);
                GUILayout.BeginHorizontal();
                editorDATA.exportDirectoryPath = 
                    DrawHorizontalTextField("Path", "The path of the new Directory", smallFieldHeight, editorDATA.exportDirectoryPath);
                if (GUILayout.Button("Browse", skin.GetStyle("AddButton"), GUILayout.MinWidth(75), GUILayout.Height(smallFieldHeight)))
                {
                    editorDATA.exportDirectoryPath = EditorUtility.SaveFolderPanel("Path",editorDATA.exportDirectoryPath,Application.dataPath);
                }
                GUILayout.EndHorizontal();
                editorDATA.exportDirectoryName = 
                    DrawHorizontalTextField("Directory Name", "The name of the new directory", smallFieldHeight, editorDATA.exportDirectoryName);
                if (!editorDATA.exportDirectoryPath.EndsWith("/"))
                {
                    editorDATA.exportDirectoryPath += "/";
                }
                EditorGUI.BeginDisabledGroup(true);
                editorDATA.exportDirectoryFullPath = DrawHorizontalTextField("Full Path", "The name of the new directory", smallFieldHeight, editorDATA.exportDirectoryPath + editorDATA.exportDirectoryName);
                EditorGUI.EndDisabledGroup();
                
                GUILayout.Space(10);
                GUILayout.BeginHorizontal();
                StartHorizontalMargin(50, true);
                foreach (var module in editorDATA.categoriesData[0].subCategoriesData)
                {
                    module.exportOn = DrawHorizontalToggle("Export " + module.SubCategoryName, "", smallFieldHeight, module.exportOn);
                    GUILayout.Space(5);
                }
                EndHorizontalMargin(50, true);
            
                StartHorizontalMargin(50, true);
                foreach (var module in editorDATA.categoriesData[1].subCategoriesData)
                {
                    module.exportOn = DrawHorizontalToggle("Export " + module.SubCategoryName, "", smallFieldHeight, module.exportOn);
                    GUILayout.Space(5);
                }
                EndHorizontalMargin(50, true);
            
            
                StartHorizontalMargin(50, true);
                foreach (var module in editorDATA.categoriesData[2].subCategoriesData)
                {
                    module.exportOn = DrawHorizontalToggle("Export " + module.SubCategoryName, "", smallFieldHeight, module.exportOn);
                    GUILayout.Space(5);
                }
                EndHorizontalMargin(50, true);
            
                GUILayout.EndHorizontal();
                string projectPath = Application.dataPath;
                projectPath = projectPath.Remove(projectPath.Length - 6, 6);



                GUILayout.BeginHorizontal();
                GUILayout.Space(200);
                if (GUILayout.Button("ALL", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                    GUILayout.Height(22)))
                {
                    foreach (var category in editorDATA.categoriesData)
                    {
                        foreach (var module in category.subCategoriesData)
                        {
                            module.exportOn = true;
                        }
                    }
                }
                GUILayout.Space(25);
                if (GUILayout.Button("NONE", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.ExpandWidth(true),
                    GUILayout.Height(22)))
                {
                    foreach (var category in editorDATA.categoriesData)
                    {
                        foreach (var module in category.subCategoriesData)
                        {
                            module.exportOn = false;
                        }
                    }
                }
                GUILayout.Space(200);
                GUILayout.EndHorizontal();
                GUILayout.Space(10);

                if (GUILayout.Button("EXPORT DATABASE", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true), GUILayout.Height(32)))
                {
                    if (!string.IsNullOrEmpty(editorDATA.exportDirectoryFullPath))
                    {
                        string sourcePath = projectPath + editorDATA.ResourcePath + editorDATA.RPGBDatabasePath;
                        
                        var folder = Directory.CreateDirectory(editorDATA.exportDirectoryFullPath);
                        
                        if (Directory.Exists(sourcePath))
                        {
                            string[] files = Directory.GetFiles(sourcePath);
 
                            foreach (string s in files)
                            {
                                string fileName = Path.GetFileName(s);
                                string nameRef = fileName.Replace(".meta", "");
                                if(!isModuleExported(nameRef)) continue;
                                string destFile = Path.Combine(editorDATA.exportDirectoryFullPath, fileName);
                                File.Copy(s, destFile, true);
                            }

                            string databaseFolderPath = editorDATA.ResourcePath + editorDATA.RPGBDatabasePath;
                            databaseFolderPath = databaseFolderPath.Remove(databaseFolderPath.Length - 1, 1);
                            var folders = AssetDatabase.GetSubFolders(databaseFolderPath);
                            foreach (var f in folders)
                            {
                                string subFolderName = f;
                                
                                string subFolderShortName = subFolderName.Replace(editorDATA.ResourcePath, "");
                                subFolderShortName = subFolderShortName.Replace(editorDATA.RPGBDatabasePath, "");
                                
                                if(!isModuleExported(subFolderShortName)) continue;
                               var subFolder = folder.CreateSubdirectory(subFolderShortName);
                               
                              string subFolderSourcePath = projectPath + subFolderName;
                               string[] entryFiles = Directory.GetFiles(subFolderSourcePath);
 
                               // Copy the files and overwrite destination files if they already exist.
                               foreach (string s in entryFiles)
                               {
                                   // Use static Path methods to extract only the file name from the path.
                                   string fileName = Path.GetFileName(s);
                                   string destFile = Path.Combine(editorDATA.exportDirectoryFullPath+"/"+subFolderShortName, fileName);
                                   File.Copy(s, destFile, true);
                               } 
                            }
                        }
                        
                        GUI.FocusControl(null);
                    }
                }

                EndHorizontalMargin(bigHorizontalSpace, true);
            }
            
            GUILayout.Space(10);
            editorFilters.editorSettingsModuleSection.showDatabaseImport =
                HandleModuleBanner("IMPORT A DATABASE", editorFilters.editorSettingsModuleSection.showDatabaseImport);
            if (editorFilters.editorSettingsModuleSection.showDatabaseImport)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(bigHorizontalSpace, true);
                
                editorDATA.overrideDatabaseWhenImporting = DrawHorizontalToggle("Override current database?",
                    "Should the imported database replace the current one?", smallFieldHeight,
                    editorDATA.overrideDatabaseWhenImporting);
                
                GUILayout.BeginHorizontal();
                editorDATA.importDirectoryPath =
                    DrawHorizontalTextField("Path", "The path of the new Directory", smallFieldHeight,
                        editorDATA.importDirectoryPath);
                if (GUILayout.Button("Browse", skin.GetStyle("AddButton"), GUILayout.MinWidth(75), GUILayout.Height(smallFieldHeight)))
                {
                    editorDATA.importDirectoryPath = EditorUtility.SaveFolderPanel("Path",editorDATA.importDirectoryPath,Application.dataPath);
                }
                GUILayout.EndHorizontal();
                if (!editorDATA.importDirectoryPath.EndsWith("/"))
                {
                    editorDATA.importDirectoryPath += "/";
                }
                
                GUILayout.Space(10);
                GUILayout.BeginHorizontal();
                StartHorizontalMargin(50, true);
                foreach (var module in editorDATA.categoriesData[0].subCategoriesData)
                {
                    module.importOn = DrawHorizontalToggle("Import " + module.SubCategoryName, "", smallFieldHeight, module.importOn);
                    GUILayout.Space(5);
                }
                EndHorizontalMargin(50, true);
            
                StartHorizontalMargin(50, true);
                foreach (var module in editorDATA.categoriesData[1].subCategoriesData)
                {
                    module.importOn = DrawHorizontalToggle("Import " + module.SubCategoryName, "", smallFieldHeight, module.importOn);
                    GUILayout.Space(5);
                }
                EndHorizontalMargin(50, true);
            
            
                StartHorizontalMargin(50, true);
                foreach (var module in editorDATA.categoriesData[2].subCategoriesData)
                {
                    module.importOn = DrawHorizontalToggle("Import " + module.SubCategoryName, "", smallFieldHeight, module.importOn);
                    GUILayout.Space(5);
                }
                EndHorizontalMargin(50, true);
            
                GUILayout.EndHorizontal();

                GUILayout.BeginHorizontal();
                GUILayout.Space(200);
                if (GUILayout.Button("ALL", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                    GUILayout.Height(22)))
                {
                    foreach (var category in editorDATA.categoriesData)
                    {
                        foreach (var module in category.subCategoriesData)
                        {
                            module.importOn = true;
                        }
                    }
                }
                GUILayout.Space(25);
                if (GUILayout.Button("NONE", skin.GetStyle("RemoveAbilityRankButton"), GUILayout.ExpandWidth(true),
                    GUILayout.Height(22)))
                {
                    foreach (var category in editorDATA.categoriesData)
                    {
                        foreach (var module in category.subCategoriesData)
                        {
                            module.importOn = false;
                        }
                    }
                }
                GUILayout.Space(200);
                GUILayout.EndHorizontal();
                GUILayout.Space(10);

                if (editorDATA.overrideDatabaseWhenImporting)
                {
                    if (DrawButtonWithPopup("OVERRIDE DATABASE", "RemoveAbilityRankButton", "Database Override",
                        "Are you sure that you want to delete the current database and replace it by the new imported one?",
                        "Yes", "Cancel"))
                    {
                        if (!string.IsNullOrEmpty(editorDATA.importDirectoryPath))
                        {
                            ClearAllDatabase(true);

                            string sourcePath = editorDATA.importDirectoryPath;

                            if (Directory.Exists(sourcePath))
                            {
                                foreach (var category in editorDATA.categoriesData)
                                {
                                    foreach (var module in category.subCategoriesData)
                                    {
                                        if (!module.importOn) continue;
                                        string[] files = Directory.GetFiles(sourcePath + module.folderName + "/");

                                        foreach (string s in files)
                                        {
                                            string fileName = Path.GetFileName(s);
                                            if(!fileName.Contains("RPG_"))continue;
                                            string destFile = Path.Combine(editorDATA.ResourcePath+editorDATA.RPGBDatabasePath + module.folderName + "/", fileName);
                                            File.Copy(s, destFile, true);
                                        }
                                    }
                                }
                                
                                string[] persistentFiles = Directory.GetFiles(sourcePath + "PersistentData" + "/");
                                foreach (string s in persistentFiles)
                                {
                                    string fileName = Path.GetFileName(s);
                                    string destFile = Path.Combine(editorDATA.ResourcePath+editorDATA.RPGBDatabasePath + "PersistentData" + "/", fileName);
                                    File.Copy(s, destFile, true);
                                }
                                
                                string[] settingsFiles = Directory.GetFiles(sourcePath + "Settings" + "/");
                                foreach (string s in settingsFiles)
                                {
                                    string fileName = Path.GetFileName(s);
                                    string destFile = Path.Combine(editorDATA.ResourcePath+editorDATA.RPGBDatabasePath + "Settings" + "/", fileName);
                                    File.Copy(s, destFile, true);
                                }
                            }

                            GUI.FocusControl(null);
                            AssetDatabase.SaveAssets();
                            AssetDatabase.Refresh();
                        
                            InitALLData(false);
                        }
                    }
                }
                else
                {
                    if (DrawButtonWithPopup("INJECT IN DATABASE", "AddButton", "Database Injection",
                        "Are you sure that you want to inject the imported database inside the current one?",
                        "Yes", "Cancel"))
                    {
                        allInjectedAssets.Clear();
                        if (!string.IsNullOrEmpty(editorDATA.importDirectoryPath))
                        {
                            string sourcePath = editorDATA.importDirectoryPath;

                            if (Directory.Exists(sourcePath))
                            {
                                foreach (var category in editorDATA.categoriesData)
                                {
                                    foreach (var module in category.subCategoriesData)
                                    {
                                        if (!module.importOn) continue;
                                        string[] files = Directory.GetFiles(sourcePath + module.folderName + "/");

                                        InjectedAssets newInjectedAsset = new InjectedAssets();
                                        newInjectedAsset.assetType = module.assetIDType;
                                        
                                        foreach (string s in files)
                                        {
                                            string fileName = Path.GetFileName(s);
                                            if(!fileName.Contains("RPG_"))continue;
                                            string destFile = Path.Combine(editorDATA.ResourcePath+editorDATA.RPGBDatabasePath + module.folderName + "/", fileName);
                                            File.Copy(s, destFile, true);
                                            newInjectedAsset.allInjectedFilePaths.Add(destFile);
                                        }
                                        
                                        allInjectedAssets.Add(newInjectedAsset);
                                    }
                                }
                                
                                AssetDatabase.Refresh();
                                TriggerSaveInjectedEntry();
                            }

                            GUI.FocusControl(null);
                            AssetDatabase.SaveAssets();
                            AssetDatabase.Refresh();
                        
                            InitALLData(false);
                        }
                    }
                }
                
                EndHorizontalMargin(bigHorizontalSpace, true);
            }

        }
        
        GUILayout.Space(10);
        editorFilters.editorSettingsModuleSection.showProjectUpgrade =
            HandleModuleBanner("PROJECT UPGRADE", editorFilters.editorSettingsModuleSection.showProjectUpgrade);
        if (editorFilters.editorSettingsModuleSection.showProjectUpgrade)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(bigHorizontalSpace, true);
                
            GUILayout.BeginHorizontal();
            editorDATA.upgradeDirectoryPath =
                DrawHorizontalTextField("Path", "The path of your previous project database", smallFieldHeight,
                    editorDATA.upgradeDirectoryPath);
            if (GUILayout.Button("Browse", skin.GetStyle("AddButton"), GUILayout.MinWidth(75), GUILayout.Height(smallFieldHeight)))
            {
                editorDATA.upgradeDirectoryPath = EditorUtility.SaveFolderPanel("Path",editorDATA.upgradeDirectoryPath,Application.dataPath);
            }
            GUILayout.EndHorizontal();
            if (!editorDATA.upgradeDirectoryPath.EndsWith("/"))
            {
                editorDATA.upgradeDirectoryPath += "/";
            }
            GUILayout.Space(10);

            if (DrawButtonWithPopup("IMPORT THE PROJECT DATABASE", "RemoveAbilityRankButton", "Project Upgrade",
                "Are you sure that you want to delete the current database and replace it by the one from your previous project?",
                "Yes", "Cancel"))
            {
                if (!string.IsNullOrEmpty(editorDATA.upgradeDirectoryPath))
                {
                    ClearAllDatabase(false);

                    string sourcePath = editorDATA.upgradeDirectoryPath;

                    if (Directory.Exists(sourcePath))
                    {
                        foreach (var category in editorDATA.categoriesData)
                        {
                            foreach (var module in category.subCategoriesData)
                            {
                                if (!module.importOn) continue;
                                if (module.SubCategoryName == "Species" || module.SubCategoryName == "Combos" ||
                                    module.SubCategoryName == "Game Modifiers") continue;
                                string[] files = Directory.GetFiles(sourcePath + module.folderName + "/");

                                foreach (string s in files)
                                {
                                    string fileName = Path.GetFileName(s);
                                    if (!fileName.Contains("RPG_")) continue;
                                    string destFile =
                                        Path.Combine(
                                            editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + module.folderName +
                                            "/", fileName);
                                    File.Copy(s, destFile, true);
                                }
                            }
                        }

                        string[] persistentFiles = Directory.GetFiles(sourcePath + "PersistentData" + "/");
                        foreach (string s in persistentFiles)
                        {
                            string fileName = Path.GetFileName(s);
                            string destFile =
                                Path.Combine(
                                    editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "PersistentData" + "/",
                                    fileName);
                            File.Copy(s, destFile, true);
                        }


                        // MERGING OLD SETTING WITH NEW ONES

                        string temporaryFolderPath = editorDATA.ResourcePath + "TemporarySettingsFolder/";
                        Directory.CreateDirectory(temporaryFolderPath);

                        string[] settingsFiles = Directory.GetFiles(sourcePath + "Settings" + "/");
                        foreach (string s in settingsFiles)
                        {
                            string fileName = Path.GetFileName(s);
                            string realFileName = fileName.Replace(".asset", "");

                            string destFile = Path.Combine(temporaryFolderPath, fileName);
                            File.Copy(s, destFile, true);

                            AssetDatabase.SaveAssets();
                            AssetDatabase.Refresh();

                            switch (realFileName)
                            {
                                case "CombatSettings":
                                    RPGCombatDATA oldCombatSettings =
                                        Resources.Load<RPGCombatDATA>("TemporarySettingsFolder/" + realFileName);
                                    if (oldCombatSettings != null)
                                    {
                                        combatSettings.StatFunctionsList =
                                            InjectOldSettingsArrayInLocalSettingsList(combatSettings.StatFunctionsList,
                                                oldCombatSettings.StatFunctions);
                                        combatSettings.UIStatsCategoriesList =
                                            InjectOldSettingsArrayInLocalSettingsList(combatSettings.UIStatsCategoriesList,
                                                oldCombatSettings.UIStatsCategories);
                                        combatSettings.FactionStancesList =
                                            InjectOldSettingsArrayInLocalSettingsList(combatSettings.FactionStancesList,
                                                oldCombatSettings.FactionStances);

                                        combatSettings.CriticalDamageBonus = oldCombatSettings.CriticalDamageBonus;
                                        combatSettings.outOfCombatDuration = oldCombatSettings.outOfCombatDuration;
                                        combatSettings.useClasses = oldCombatSettings.useClasses;
                                        combatSettings.healthStatID = oldCombatSettings.healthStatID;
                                    }

                                    break;

                                case "GeneralSettings":
                                    RPGGeneralDATA oldGeneralSettings =
                                        Resources.Load<RPGGeneralDATA>("TemporarySettingsFolder/" + realFileName);
                                    if (oldGeneralSettings != null)
                                    {
                                        generalSettings.dialogueKeywordsList =
                                            InjectOldSettingsArrayInLocalSettingsList(generalSettings.dialogueKeywordsList,
                                                oldGeneralSettings.dialogueKeywords);
                                        
                                        generalSettings.automaticSave = oldGeneralSettings.automaticSave;
                                        generalSettings.automaticSaveDelay = oldGeneralSettings.automaticSaveDelay;
                                        generalSettings.automaticSaveOnQuit = oldGeneralSettings.automaticSaveOnQuit;
                                        generalSettings.clickToLoadScene = oldGeneralSettings.clickToLoadScene;
                                        generalSettings.useOldController = false;
                                    }
                                    break;

                                case "ItemSettings":
                                    RPGItemDATA oldItemData =
                                        Resources.Load<RPGItemDATA>("TemporarySettingsFolder/" + realFileName);
                                    if (oldItemData != null)
                                    {
                                        itemSettings.itemRarityList =
                                            InjectOldSettingsArrayInLocalSettingsList(itemSettings.itemRarityList,
                                                oldItemData.itemRarity);
                                        itemSettings.itemRarityImagesList =
                                            InjectOldSettingsSpriteArrayInLocalSettingsList(itemSettings.itemRarityImagesList,
                                                oldItemData.itemRarityImages);
                                        itemSettings.itemRarityColorsList =
                                            InjectOldSettingsColorArrayInLocalSettingsList(itemSettings.itemRarityColorsList,
                                                oldItemData.itemRarityColors);
                                        itemSettings.itemTypeList =
                                            InjectOldSettingsArrayInLocalSettingsList(itemSettings.itemTypeList,
                                                oldItemData.itemType);
                                        itemSettings.weaponTypeList =
                                            InjectOldSettingsArrayInLocalSettingsList(itemSettings.weaponTypeList,
                                                oldItemData.weaponType);
                                        itemSettings.armorTypeList =
                                            InjectOldSettingsArrayInLocalSettingsList(itemSettings.armorTypeList,
                                                oldItemData.armorType);
                                        itemSettings.armorSlotsList =
                                            InjectOldSettingsArrayInLocalSettingsList(itemSettings.armorSlotsList,
                                                oldItemData.armorSlots);
                                        itemSettings.slotTypeList =
                                            InjectOldSettingsArrayInLocalSettingsList(itemSettings.slotTypeList,
                                                oldItemData.slotType);
                                        itemSettings.socketTypeList =
                                            InjectOldSettingsArrayInLocalSettingsList(itemSettings.socketTypeList,
                                                oldItemData.socketType);
                                        itemSettings.InventorySlots = oldItemData.InventorySlots;
                                        

                                        var existingItemSettings =
                                            (RPGItemDATA) AssetDatabase.LoadAssetAtPath(
                                                editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings/" +
                                                "ItemSettings" + ".asset", typeof(RPGItemDATA));
                                        if (existingItemSettings != null)
                                        {
                                            existingItemSettings.updateThis(itemSettings);
                                        }
                                    }

                                    break;
                            }
                            
                        }
                        
                        string[] settingsFiles2 = Directory.GetFiles(temporaryFolderPath);
                        foreach (string s in settingsFiles2)
                        {
                            File.Delete(s);
                        }
                        
                        AssetDatabase.SaveAssets();
                        AssetDatabase.Refresh();
                        
                        Directory.Delete(temporaryFolderPath);
                    }

                    GUI.FocusControl(null);
                    AssetDatabase.SaveAssets();
                    AssetDatabase.Refresh();

                    InitALLData(false);
                }
            }

            EndHorizontalMargin(bigHorizontalSpace, true);
        }

        GUILayout.Space(10);
        editorFilters.editorSettingsModuleSection.showsceneLoaderSettings =
            HandleModuleBanner("SCENE LOADER", editorFilters.editorSettingsModuleSection.showsceneLoaderSettings);
        if (editorFilters.editorSettingsModuleSection.showsceneLoaderSettings)
        {
            GUILayout.Space(10);
            StartHorizontalMargin(middleButtonSpace, false);
            if (GUILayout.Button("+ Add Scene", skin.GetStyle("AddButton"), GUILayout.ExpandWidth(true),
                GUILayout.Height(25)))
            {
                editorDATA.sceneLoaderList.Add(new RPGBuilderEditorDATA.SceneLoaderData());
            }

            EndHorizontalMargin(middleButtonSpace, false);

            for (var a = 0; a < editorDATA.sceneLoaderList.Count; a++)
            {
                GUILayout.Space(10);
                StartHorizontalMargin(bigHorizontalSpace, true);
                GUILayout.BeginHorizontal();
                if (GUILayout.Button("X", skin.GetStyle("RemoveButton"), GUILayout.Width(36),
                    GUILayout.Height(36)))
                {
                    editorDATA.sceneLoaderList.RemoveAt(a);
                    return;
                }

                GUILayout.BeginVertical();
                editorDATA.sceneLoaderList[a].sceneName = DrawHorizontalTextField("Scene Name", "", smallFieldHeight,
                    editorDATA.sceneLoaderList[a].sceneName);
                
                editorDATA.sceneLoaderList[a].scene = (SceneAsset) EditorGUILayout.ObjectField("Scene",
                    editorDATA.sceneLoaderList[a].scene, typeof(SceneAsset), false);
                GUILayout.EndVertical();
                GUILayout.EndHorizontal();
                EndHorizontalMargin(bigHorizontalSpace, true);
            }

            GUILayout.Space(10);
        }

        GUILayout.EndScrollView();
    }
    
    
    private List<string> InjectOldSettingsArrayInLocalSettingsList (List<string> localStringList, string[] oldStringArray)
    {
        localStringList.Clear();

        foreach (var arrayEntry in oldStringArray)
        {
            localStringList.Add(arrayEntry);
        }

        return localStringList;
    }
    private List<Color> InjectOldSettingsColorArrayInLocalSettingsList (List<Color> localColorList, Color[] oldColorArray)
    {
        localColorList.Clear();

        foreach (var arrayEntry in oldColorArray)
        {
            localColorList.Add(arrayEntry);
        }

        return localColorList;
    }
    private List<Sprite> InjectOldSettingsSpriteArrayInLocalSettingsList (List<Sprite> localSpriteList, Sprite[] oldSpriteArray)
    {
        localSpriteList.Clear();

        foreach (var arrayEntry in oldSpriteArray)
        {
            localSpriteList.Add(arrayEntry);
        }

        return localSpriteList;
    }

    private class InjectedAssets
    {
        public AssetIDHandler.ASSET_TYPE_ID assetType;
        public List<string> allInjectedFilePaths = new List<string>();
    }
    private List<InjectedAssets> allInjectedAssets = new List<InjectedAssets>();


    private void ScanObjectForAttributes(object obj, string customAttribute, int previousID, int newID) {
        // pull any of the custom attribute fields off this object
        FieldInfo[] customAttributeFields = GetFields(obj, customAttribute);
        // pull any custom attribute list fields off this object
        FieldInfo[] customAttributeListFields = GetFields(obj, "RPGDataListAttribute");
 
        // process the custom attribute fields
        if (customAttributeFields != null)
        {
            foreach (FieldInfo field in customAttributeFields)
            {
                if ((int) field.GetValue(obj) == previousID)
                {
                    field.SetValue(obj, newID);
                }
            }
        }

        // loop through the list objects and process each one
        if (customAttributeListFields != null)
        {
            foreach (FieldInfo field in customAttributeListFields)
            {
                IEnumerable<object> objectList = (IEnumerable<object>) field.GetValue(obj);
                foreach (object childObj in objectList)
                {
                    ScanObjectForAttributes(childObj, customAttribute, previousID, newID);
                }
            }
        }
    }
    
    private FieldInfo[] GetFields(object target, string attributeName)
    {
        Type convertedType = GetType(attributeName);
        if (convertedType == null) return null;
        return  target.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(f => f.IsDefined(convertedType)).ToArray();
    }
    
    private void UpdateEntriesWithMatchingID(int previousID, int newID, string attributeName)
    {
        foreach (var injectedAsset in allInjectedAssets)
        {
            switch (injectedAsset.assetType)
            {
                case AssetIDHandler.ASSET_TYPE_ID.ability:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGAbility) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGAbility));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.effect:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGEffect) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGEffect));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.npc:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGNpc) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGNpc));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.stat:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGStat) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGStat));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.treePoint:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGTreePoint) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGTreePoint));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.spellbook:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGSpellbook) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGSpellbook));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.faction:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGFaction) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGFaction));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.weaponTemplate:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGWeaponTemplate) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGWeaponTemplate));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.species:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGSpecies) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGSpecies));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.combo:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGCombo) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGCombo));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.item:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGItem) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGItem));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.skill:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGSkill) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGSkill));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.levelTemplate:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGLevelsTemplate) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGLevelsTemplate));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.race:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGRace) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGRace));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID._class:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGClass) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGClass));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.lootTable:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGLootTable) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGLootTable));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.merchantTable:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGMerchantTable) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGMerchantTable));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.currency:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGCurrency) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGCurrency));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.craftingRecipe:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGCraftingRecipe) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGCraftingRecipe));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.craftingStation:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGCraftingStation) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGCraftingStation));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.talentTree:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGTalentTree) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGTalentTree));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.bonus:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGBonus) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGBonus));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.gearSet:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGGearSet) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGGearSet));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.enchantment:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGEnchantment) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGEnchantment));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.task:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGTask) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGTask));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.quest:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGQuest) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGQuest));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.worldPosition:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGWorldPosition) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGWorldPosition));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.resourceNode:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGResourceNode) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGResourceNode));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.gameScene:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGGameScene) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGGameScene));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.dialogue:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGDialogue) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGDialogue));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.gameModifier:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGGameModifier) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGGameModifier));
                        if (existingEntry == null) continue;
                        ScanObjectForAttributes(existingEntry, attributeName, previousID, newID);
                    }
                    break;
            }
        }
    }

    private void TriggerSaveInjectedEntry()
    {
        foreach (var injectedAsset in allInjectedAssets)
        {
            switch (injectedAsset.assetType)
            {
                case AssetIDHandler.ASSET_TYPE_ID.ability:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGAbility) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGAbility));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "AbilityIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.effect:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGEffect) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGEffect));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "EffectIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.npc:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGNpc) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGNpc));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "NPCIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.treePoint:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGTreePoint) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGTreePoint));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "PointIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.item:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGItem) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGItem));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "ItemIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.skill:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGSkill) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGSkill));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "SkillIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.levelTemplate:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGLevelsTemplate) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGLevelsTemplate));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "LevelTemplateIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.race:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGRace) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGRace));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "RaceIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID._class:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGClass) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGClass));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "ClassIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.lootTable:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGLootTable) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGLootTable));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "LootTableIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.talentTree:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGTalentTree) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGTalentTree));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "TalentTreeIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.worldPosition:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGWorldPosition) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGWorldPosition));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "WorldPositionIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.stat:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGStat) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGStat));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "StatIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.merchantTable:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGMerchantTable) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGMerchantTable));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "MerchantTableIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.currency:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGCurrency) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGCurrency));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "CurrencyIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.task:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGTask) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGTask));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "TaskIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.quest:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGQuest) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGQuest));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "QuestIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.craftingRecipe:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGCraftingRecipe) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGCraftingRecipe));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "RecipeIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.craftingStation:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGCraftingStation) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGCraftingStation));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "CraftingStationIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.resourceNode:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGResourceNode) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGResourceNode));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "ResourceNodeIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.bonus:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGBonus) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGBonus));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "BonusIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.gameScene:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGGameScene) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGGameScene));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "GameSceneIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.gearSet:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGGearSet) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGGearSet));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "GearSetIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.enchantment:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGEnchantment) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGEnchantment));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "EnchantmentIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.spellbook:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGSpellbook) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGSpellbook));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "SpellbookIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.faction:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGFaction) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGFaction));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "FactionIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.weaponTemplate:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGWeaponTemplate) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGWeaponTemplate));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry.fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry.fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "WeaponTemplateIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.dialogue:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGDialogue) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGDialogue));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "DialogueIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.gameModifier:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGGameModifier) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGGameModifier));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry._fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry._fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "GameModifierIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.species:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGSpecies) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGSpecies));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry.fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry.fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "SpeciesIDAttribute");
                    }
                    break;
                case AssetIDHandler.ASSET_TYPE_ID.combo:
                    foreach (var entryFile in injectedAsset.allInjectedFilePaths)
                    {
                        var existingEntry = (RPGCombo) AssetDatabase.LoadAssetAtPath(entryFile, typeof(RPGCombo));
                        if (existingEntry == null) continue;
                        cachedFileName = existingEntry.fileName;
                        int previousID = existingEntry.ID;
                        existingEntry.ID = -1;
                        SaveAsset(existingEntry._name, existingEntry.fileName, existingEntry, true);
                        UpdateEntriesWithMatchingID(previousID, existingEntry.ID, "ComboIDAttribute");
                    }
                    break;
            }
        }
    }

    private bool isModuleExported(string nameContain)
    {
        if (nameContain == "PersistentData" || nameContain == "Settings") return true;
        
        foreach (var category in editorDATA.categoriesData)
        {
            foreach (var module in category.subCategoriesData)
            {
                if (!module.folderName.Contains(nameContain)) continue;
                return module.exportOn;
            }
        }

        return false;
    }

    private bool DrawButtonWithPopup(string buttonTitle, string buttonStyle, string dialogTitle, string dialogueDescription, string option1, string option2)
    {
        return GUILayout.Button(buttonTitle, skin.GetStyle(buttonStyle), 
            GUILayout.ExpandWidth(true), GUILayout.Height(25)) && EditorUtility.DisplayDialog(dialogTitle, dialogueDescription, option1, option2);
    }

    private void ClearAllDatabase(bool deleteSettings)
    {
        if (deleteSettings)
        {
            string[] settingsFiles =
                Directory.GetFiles(editorDATA.ResourcePath + editorDATA.RPGBDatabasePath + "Settings" + "/");
            foreach (string s in settingsFiles)
            {
                File.Delete(s);
            }
        }

        DeleteAll(AssetType.Ability, AssetIDHandler.ASSET_TYPE_ID.ability, "Deleting all Abilities:");
        DeleteAll(AssetType.Effect, AssetIDHandler.ASSET_TYPE_ID.effect, "Deleting all Effects:");
        DeleteAll(AssetType.NPC, AssetIDHandler.ASSET_TYPE_ID.npc, "Deleting all NPCs:");
        DeleteAll(AssetType.Stat, AssetIDHandler.ASSET_TYPE_ID.stat, "Deleting all Stats:");
        DeleteAll(AssetType.TreePoint, AssetIDHandler.ASSET_TYPE_ID.treePoint, "Deleting all Points:");
        DeleteAll(AssetType.Spellbook, AssetIDHandler.ASSET_TYPE_ID.spellbook, "Deleting all Spellbooks:");
        DeleteAll(AssetType.Faction, AssetIDHandler.ASSET_TYPE_ID.faction, "Deleting all Factions:");
        DeleteAll(AssetType.WeaponTemplate, AssetIDHandler.ASSET_TYPE_ID.weaponTemplate,
            "Deleting all Weapon Templates:");
        DeleteAll(AssetType.Item, AssetIDHandler.ASSET_TYPE_ID.item, "Deleting all Items:");
        DeleteAll(AssetType.Skill, AssetIDHandler.ASSET_TYPE_ID.skill, "Deleting all Skills:");
        DeleteAll(AssetType.LevelTemplate, AssetIDHandler.ASSET_TYPE_ID.levelTemplate, "Deleting all Level templates:");
        DeleteAll(AssetType.Race, AssetIDHandler.ASSET_TYPE_ID.race, "Deleting all Races:");
        DeleteAll(AssetType.Class, AssetIDHandler.ASSET_TYPE_ID._class, "Deleting all Classes:");
        DeleteAll(AssetType.LootTable, AssetIDHandler.ASSET_TYPE_ID.lootTable, "Deleting all Loot Tables:");
        DeleteAll(AssetType.MerchantTable, AssetIDHandler.ASSET_TYPE_ID.merchantTable, "Deleting all Merchant Tables:");
        DeleteAll(AssetType.Currency, AssetIDHandler.ASSET_TYPE_ID.currency, "Deleting all Currencies:");
        DeleteAll(AssetType.CraftingRecipe, AssetIDHandler.ASSET_TYPE_ID.craftingRecipe, "Deleting all Recipes:");
        DeleteAll(AssetType.CraftingStation, AssetIDHandler.ASSET_TYPE_ID.craftingStation,
            "Deleting all Crafting Stations:");
        DeleteAll(AssetType.TalentTree, AssetIDHandler.ASSET_TYPE_ID.talentTree, "Deleting all Talent Trees:");
        DeleteAll(AssetType.Bonus, AssetIDHandler.ASSET_TYPE_ID.bonus, "Deleting all Bonuses:");
        DeleteAll(AssetType.GearSet, AssetIDHandler.ASSET_TYPE_ID.gearSet, "Deleting all Gear Sets:");
        DeleteAll(AssetType.Enchantment, AssetIDHandler.ASSET_TYPE_ID.enchantment, "Deleting all Enchantments:");
        DeleteAll(AssetType.Task, AssetIDHandler.ASSET_TYPE_ID.task, "Deleting all Tasks:");
        DeleteAll(AssetType.Quest, AssetIDHandler.ASSET_TYPE_ID.quest, "Deleting all Quests:");
        DeleteAll(AssetType.WorldPosition, AssetIDHandler.ASSET_TYPE_ID.worldPosition, "Deleting all World Positions:");
        DeleteAll(AssetType.ResourceNode, AssetIDHandler.ASSET_TYPE_ID.resourceNode, "Deleting all Resource Nodes:");
        DeleteAll(AssetType.GameScene, AssetIDHandler.ASSET_TYPE_ID.gameScene, "Deleting all Game Scenes:");
        DeleteAll(AssetType.Dialogue, AssetIDHandler.ASSET_TYPE_ID.dialogue, "Deleting all Dialogues:");
        DeleteAll(AssetType.GameModifier, AssetIDHandler.ASSET_TYPE_ID.gameModifier, "Deleting all Game Modifiers:");
        DeleteAll(AssetType.Species, AssetIDHandler.ASSET_TYPE_ID.species, "Deleting all Species:");
        DeleteAll(AssetType.Combo, AssetIDHandler.ASSET_TYPE_ID.combo, "Deleting all Combo:");
    }

    private void DeleteAll(AssetType assetType, AssetIDHandler.ASSET_TYPE_ID assetIDType, string barTitle)
    {
        int deletedEntries = 0;
        int maxEntries;
        switch (assetType)
        {
            case AssetType.Ability:
                maxEntries = allAbilities.Count;
                foreach (var t in allAbilities)
                {
                    currentlyViewedAbility = Instantiate(t);
                    cachedFileName = currentlyViewedAbility._fileName;
                    Delete(AssetType.Ability, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allAbilities.Clear();
                currentlyViewedAbility = null;
                break;
            case AssetType.Effect:
                maxEntries = allEffects.Count;
                foreach (var t in allEffects)
                {
                    currentlyViewedEffect = Instantiate(t);
                    cachedFileName = currentlyViewedEffect._fileName;
                    Delete(AssetType.Effect, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allEffects.Clear();
                currentlyViewedEffect = null;
                break;
            case AssetType.Item:
                maxEntries = allItems.Count;
                foreach (var t in allItems)
                {
                    currentlyViewedItem = Instantiate(t);
                    cachedFileName = currentlyViewedItem._fileName;
                    Delete(AssetType.Item, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allItems.Clear();
                currentlyViewedItem = null;
                break;
            case AssetType.NPC:
                maxEntries = allNPCs.Count;
                foreach (var t in allNPCs)
                {
                    currentlyViewedNPC = Instantiate(t);
                    cachedFileName = currentlyViewedNPC._fileName;
                    Delete(AssetType.NPC, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allNPCs.Clear();
                currentlyViewedNPC = null;
                break;
            case AssetType.Stat:
                maxEntries = allStats.Count;
                foreach (var t in allStats)
                {
                    currentlyViewedStat = Instantiate(t);
                    cachedFileName = currentlyViewedStat._fileName;
                    Delete(AssetType.Stat, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allStats.Clear();
                currentlyViewedStat = null;
                break;
            case AssetType.CombatSettings:
                break;
            case AssetType.ItemSettings:
                break;
            case AssetType.Skill:
                maxEntries = allSkills.Count;
                foreach (var t in allSkills)
                {
                    currentlyViewedSkill = Instantiate(t);
                    cachedFileName = currentlyViewedSkill._fileName;
                    Delete(AssetType.Skill, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allSkills.Clear();
                currentlyViewedSkill = null;
                break;
            case AssetType.LevelTemplate:
                maxEntries = allLevelsTemplate.Count;
                foreach (var t in allLevelsTemplate)
                {
                    currentlyViewedLevelTemplate = Instantiate(t);
                    cachedFileName = currentlyViewedLevelTemplate._fileName;
                    Delete(AssetType.LevelTemplate, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allLevelsTemplate.Clear();
                currentlyViewedLevelTemplate = null;
                break;
            case AssetType.Race:
                maxEntries = allRaces.Count;
                foreach (var t in allRaces)
                {
                    currentlyViewedRace = Instantiate(t);
                    cachedFileName = currentlyViewedRace._fileName;
                    Delete(AssetType.Race, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allRaces.Clear();
                currentlyViewedRace = null;
                break;
            case AssetType.Class:
                maxEntries = allClasses.Count;
                foreach (var t in allClasses)
                {
                    currentlyViewedClass = Instantiate(t);
                    cachedFileName = currentlyViewedClass._fileName;
                    Delete(AssetType.Class, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allClasses.Clear();
                currentlyViewedClass = null;
                break;
            case AssetType.GeneralSettings:
                break;
            case AssetType.TalentTree:
                maxEntries = allTalentTrees.Count;
                foreach (var t in allTalentTrees)
                {
                    currentlyViewedTalentTree = Instantiate(t);
                    cachedFileName = currentlyViewedTalentTree._fileName;
                    Delete(AssetType.TalentTree, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allTalentTrees.Clear();
                currentlyViewedTalentTree = null;
                break;
            case AssetType.TreePoint:
                maxEntries = allTreePoints.Count;
                foreach (var t in allTreePoints)
                {
                    currentlyViewedTreePoint = Instantiate(t);
                    cachedFileName = currentlyViewedTreePoint._fileName;
                    Delete(AssetType.TreePoint, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allTreePoints.Clear();
                currentlyViewedTreePoint = null;
                break;
            case AssetType.LootTable:
                maxEntries = allLootTables.Count;
                foreach (var t in allLootTables)
                {
                    currentlyViewedLootTable = Instantiate(t);
                    cachedFileName = currentlyViewedLootTable._fileName;
                    Delete(AssetType.LootTable, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allLootTables.Clear();
                currentlyViewedLootTable = null;
                break;
            case AssetType.WorldPosition:
                maxEntries = allWorldPositions.Count;
                foreach (var t in allWorldPositions)
                {
                    currentlyViewedWorldPosition = Instantiate(t);
                    cachedFileName = currentlyViewedWorldPosition._fileName;
                    Delete(AssetType.WorldPosition, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allWorldPositions.Clear();
                currentlyViewedWorldPosition = null;
                break;
            case AssetType.MerchantTable:
                maxEntries = allMerchantTables.Count;
                foreach (var t in allMerchantTables)
                {
                    currentlyViewedMerchantTable = Instantiate(t);
                    cachedFileName = currentlyViewedMerchantTable._fileName;
                    Delete(AssetType.MerchantTable, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allMerchantTables.Clear();
                currentlyViewedMerchantTable = null;
                break;
            case AssetType.Currency:
                maxEntries = allCurrencies.Count;
                foreach (var t in allCurrencies)
                {
                    currentlyViewedCurrency = Instantiate(t);
                    cachedFileName = currentlyViewedCurrency._fileName;
                    Delete(AssetType.Currency, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allCurrencies.Clear();
                currentlyViewedCurrency = null;
                break;
            case AssetType.Task:
                maxEntries = allTasks.Count;
                foreach (var t in allTasks)
                {
                    currentlyViewedTask = Instantiate(t);
                    cachedFileName = currentlyViewedTask._fileName;
                    Delete(AssetType.Task, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allTasks.Clear();
                currentlyViewedTask = null;
                break;
            case AssetType.Quest:
                maxEntries = allQuests.Count;
                foreach (var t in allQuests)
                {
                    currentlyViewedQuest = Instantiate(t);
                    cachedFileName = currentlyViewedQuest._fileName;
                    Delete(AssetType.Quest, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allQuests.Clear();
                currentlyViewedQuest = null;
                break;
            case AssetType.CraftingRecipe:
                maxEntries = allCraftingRecipes.Count;
                foreach (var t in allCraftingRecipes)
                {
                    currentlyViewedCraftingRecipe = Instantiate(t);
                    cachedFileName = currentlyViewedCraftingRecipe._fileName;
                    Delete(AssetType.CraftingRecipe, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allCraftingRecipes.Clear();
                currentlyViewedCraftingRecipe = null;
                break;
            case AssetType.CraftingStation:
                maxEntries = allCraftingStations.Count;
                foreach (var t in allCraftingStations)
                {
                    currentlyViewedCraftingStation = Instantiate(t);
                    cachedFileName = currentlyViewedCraftingStation._fileName;
                    Delete(AssetType.CraftingStation, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allCraftingStations.Clear();
                currentlyViewedCraftingStation = null;
                break;
            case AssetType.ResourceNode:
                maxEntries = allResourceNodes.Count;
                foreach (var t in allResourceNodes)
                {
                    currentlyViewedResourceNode = Instantiate(t);
                    cachedFileName = currentlyViewedResourceNode._fileName;
                    Delete(AssetType.ResourceNode, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allResourceNodes.Clear();
                currentlyViewedResourceNode = null;
                break;
            case AssetType.Bonus:
                maxEntries = allBonuses.Count;
                foreach (var t in allBonuses)
                {
                    currentlyViewedBonus = Instantiate(t);
                    cachedFileName = currentlyViewedBonus._fileName;
                    Delete(AssetType.Bonus, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allBonuses.Clear();
                currentlyViewedBonus = null;
                break;
            case AssetType.GameScene:
                maxEntries = allGameScenes.Count;
                foreach (var t in allGameScenes)
                {
                    currentlyViewedGameScene = Instantiate(t);
                    cachedFileName = currentlyViewedGameScene._fileName;
                    Delete(AssetType.GameScene, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allGameScenes.Clear();
                currentlyViewedGameScene = null;
                break;
            case AssetType.GearSet:
                maxEntries = allGearSets.Count;
                foreach (var t in allGearSets)
                {
                    currentlyViewedGearSet = Instantiate(t);
                    cachedFileName = currentlyViewedGearSet._fileName;
                    Delete(AssetType.GearSet, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allGearSets.Clear();
                currentlyViewedGearSet = null;
                break;
            case AssetType.Enchantment:
                maxEntries = allEnchantments.Count;
                foreach (var t in allEnchantments)
                {
                    currentlyViewedEnchantment = Instantiate(t);
                    cachedFileName = currentlyViewedEnchantment._fileName;
                    Delete(AssetType.Enchantment, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allEnchantments.Clear();
                currentlyViewedEnchantment = null;
                break;
            case AssetType.Spellbook:
                maxEntries = allSpellbooks.Count;
                foreach (var t in allSpellbooks)
                {
                    currentlyViewedSpellbook = Instantiate(t);
                    cachedFileName = currentlyViewedSpellbook._fileName;
                    Delete(AssetType.Spellbook, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allSpellbooks.Clear();
                currentlyViewedSpellbook = null;
                break;
            case AssetType.Faction:
                maxEntries = allFactions.Count;
                foreach (var t in allFactions)
                {
                    currentlyViewedFaction = Instantiate(t);
                    cachedFileName = currentlyViewedFaction._fileName;
                    Delete(AssetType.Faction, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allFactions.Clear();
                currentlyViewedFaction = null;
                break;
            case AssetType.WeaponTemplate:
                maxEntries = allWeaponTemplates.Count;
                foreach (var t in allWeaponTemplates)
                {
                    currentlyViewedWeaponTemplate = Instantiate(t);
                    cachedFileName = currentlyViewedWeaponTemplate.fileName;
                    Delete(AssetType.WeaponTemplate, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allWeaponTemplates.Clear();
                currentlyViewedWeaponTemplate = null;
                break;
            case AssetType.Dialogue:
                maxEntries = allDialogues.Count;
                foreach (var t in allDialogues)
                {
                    currentlyViewedDialogue = Instantiate(t);
                    cachedFileName = currentlyViewedDialogue._fileName;
                    Delete(AssetType.Dialogue, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allDialogues.Clear();
                currentlyViewedDialogue = null;
                break;
            case AssetType.None:
                break;
            case AssetType.GameModifier:
                maxEntries = allGameModifiers.Count;
                foreach (var t in allGameModifiers)
                {
                    currentlyViewedGameModifier = Instantiate(t);
                    cachedFileName = currentlyViewedGameModifier._fileName;
                    Delete(AssetType.GameModifier, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allGameModifiers.Clear();
                currentlyViewedGameModifier = null;
                break;
            case AssetType.EditorSettings:
                break;
            case AssetType.Species:
                maxEntries = allSpecies.Count;
                foreach (var t in allSpecies)
                {
                    currentlyViewedSpecies = Instantiate(t);
                    cachedFileName = currentlyViewedSpecies.fileName;
                    Delete(AssetType.Species, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allSpecies.Clear();
                currentlyViewedSpecies = null;
                break;
            case AssetType.Combo:
                maxEntries = allCombos.Count;
                foreach (var t in allCombos)
                {
                    currentlyViewedCombo = Instantiate(t);
                    cachedFileName = currentlyViewedCombo.fileName;
                    Delete(AssetType.Combo, false);
                    deletedEntries++;
                    EditorUtility.DisplayProgressBar(barTitle, "Completed: " + deletedEntries + " / " + maxEntries, (float)((float)deletedEntries/(float)maxEntries));
                }

                allCombos.Clear();
                currentlyViewedCombo = null;
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(assetType), assetType, null);
        }

        
        EditorUtility.ClearProgressBar();
        DataSavingSystem.DeleteAssetIDFile(assetIDType);
        
        RequestFilterCheck();
        RequestElementListRedraw();
    }

    private void ResetFilterWindow()
    {
        currentFilterEntryDataIndex = -1;
        isSelectingField = false;
        showFilters = false;
    }

    private void SelectCategory(string categoryName)
    { 
        moduleSearchText = "";
        curSubCategorySelected = 0;
        
        ResetFilterWindow();
        ResetScrollPositions();
        viewScrollPosition = Vector2.zero;
        
        switch (categoryName)
        {
            case "Combat":
            case "COMBAT":
                currentCategorySelected = CategorySelectedType.Combat;
                combatSubCurrentCategorySelected = 0;
                if (combatSubCurrentCategorySelected == CombatSubCategorySelectedType.Ability)
                {
                    if (allAbilities.Count > 0) SelectAbility(0);
                    else currentlyViewedAssetType = AssetType.Ability;
                }
                break;
            case "General":
            case "GENERAL":
                currentCategorySelected = CategorySelectedType.General;
                generalSubCurrentCategorySelected = 0;
                if (generalSubCurrentCategorySelected == GeneralSubCategorySelectedType.Item)
                {
                    if (allItems.Count > 0) SelectItem(0);
                    else currentlyViewedAssetType = AssetType.Item;
                }
                break;
            case "World":
            case "WORLD":
                currentCategorySelected = CategorySelectedType.World;
                worldSubCurrentCategorySelected = 0;
                if (worldSubCurrentCategorySelected == WorldSubCategorySelectedType.Task)
                {
                    if (allTasks.Count > 0) SelectTask(0);
                    else currentlyViewedAssetType = AssetType.Task;
                }
                break;
            case "Settings":
            case "SETTINGS":
                curElementList.Clear();
                currentlyViewedAssetType = AssetType.None;
                currentCategorySelected = CategorySelectedType.Settings;
                settingsSubCurrentCategorySelected = 0;
                SelectSubCategory((int)settingsSubCurrentCategorySelected);
                break;
            case "Partners":
            case "PARTNERS":
                curElementList.Clear();
                currentlyViewedAssetType = AssetType.None;
                currentCategorySelected = CategorySelectedType.Partners;
                partnersSubCurrentCategorySelected = 0;
                break;
        }

        updateElementList = true;
    }

    private void SelectSubCategory(int subCategoryIndex)
    {
        if (curSubCategorySelected != subCategoryIndex) moduleSearchText = "";
        curSubCategorySelected = subCategoryIndex;
        
        ResetScrollPositions();
        viewScrollPosition = Vector2.zero;
        ResetFilterWindow();
        
        switch (editorDATA.categoriesData[(int)currentCategorySelected].CategoryName)
        {
            case "Combat":
            case "COMBAT":
                combatSubCurrentCategorySelected = (CombatSubCategorySelectedType)subCategoryIndex;
                switch (combatSubCurrentCategorySelected)
                {
                    case CombatSubCategorySelectedType.Ability:
                        if (allAbilities.Count > 0)
                        {
                            SelectAbility(0);
                        }

                        currentlyViewedAssetType = AssetType.Ability;
                        InitializeFilters(editorFilters.abilityFilters);
                        break;
                    case CombatSubCategorySelectedType.Effect:
                        if (allEffects.Count > 0)
                        {
                            SelectEffect(0);
                        }
                        currentlyViewedAssetType = AssetType.Effect;
                        InitializeFilters(editorFilters.effectFilters);
                        break;
                    case CombatSubCategorySelectedType.NPCs:
                        if (allNPCs.Count > 0)
                        {
                            SelectNPC(0);
                        }
                        currentlyViewedAssetType = AssetType.NPC;
                        InitializeFilters(editorFilters.NPCFilters);
                        break;
                    case CombatSubCategorySelectedType.Stat:
                        if (allStats.Count > 0)
                        {
                            SelectStat(0);
                        }
                        currentlyViewedAssetType = AssetType.Stat;
                        InitializeFilters(editorFilters.statFilters);
                        break;
                    case CombatSubCategorySelectedType.TreePoint:
                        if (allTreePoints.Count > 0)
                        {
                            SelectTreePoint(0);
                        }
                        currentlyViewedAssetType = AssetType.TreePoint;
                        InitializeFilters(editorFilters.talentPointFilters);
                        break;
                    case CombatSubCategorySelectedType.Spellbook:
                        if (allSpellbooks.Count > 0)
                        {
                            SelectSpellbook(0);
                        }
                        currentlyViewedAssetType = AssetType.Spellbook;
                        InitializeFilters(editorFilters.spellbookFilters);
                        break;
                    case CombatSubCategorySelectedType.Faction:
                        if (allFactions.Count > 0)
                        {
                            SelectFaction(0);
                        }
                        currentlyViewedAssetType = AssetType.Faction;
                        InitializeFilters(editorFilters.factionFilters);
                        break;
                    case CombatSubCategorySelectedType.WeaponTemplate:
                        if (allWeaponTemplates.Count > 0)
                        {
                            SelectWeaponTemplate(0);
                        }
                        currentlyViewedAssetType = AssetType.WeaponTemplate;
                        InitializeFilters(editorFilters.weaponTemplateFilters);
                        break;
                    case CombatSubCategorySelectedType.Species:
                        if (allSpecies.Count > 0)
                        {
                            SelectSpecies(0);
                        }
                        currentlyViewedAssetType = AssetType.Species;
                        InitializeFilters(editorFilters.speciesFilters);
                        break;
                    case CombatSubCategorySelectedType.Combo:
                        if (allCombos.Count > 0)
                        {
                            SelectCombo(0);
                        }
                        currentlyViewedAssetType = AssetType.Combo;
                        InitializeFilters(editorFilters.comboFilters);
                        break;
                }
        
                updateElementList = true;
                break;
            case "General":
            case "GENERAL":
                generalSubCurrentCategorySelected = (GeneralSubCategorySelectedType)subCategoryIndex;
                switch (generalSubCurrentCategorySelected)
                {
                    case GeneralSubCategorySelectedType.Item:
                        if (allItems.Count > 0)
                        {
                            SelectItem(0);
                        }
                        currentlyViewedAssetType = AssetType.Item;
                        InitializeFilters(editorFilters.itemFilters);
                        break;
                    case GeneralSubCategorySelectedType.Skill:
                        if (allSkills.Count > 0)
                        {
                            SelectSkill(0);
                        }
                        currentlyViewedAssetType = AssetType.Skill;
                        InitializeFilters(editorFilters.skillFilters);
                        break;
                    case GeneralSubCategorySelectedType.LevelTemplate:
                        if (allLevelsTemplate.Count > 0)
                        {
                            SelectLevelTemplate(0);
                        }
                        currentlyViewedAssetType = AssetType.LevelTemplate;
                        InitializeFilters(editorFilters.levelTemplateFilters);
                        break;
                    case GeneralSubCategorySelectedType.Race:
                        if (allRaces.Count > 0)
                        {
                            SelectRace(0);
                        }
                        currentlyViewedAssetType = AssetType.Race;
                        InitializeFilters(editorFilters.raceFilters);
                        break;
                    case GeneralSubCategorySelectedType.Class:
                        if (allClasses.Count > 0)
                        {
                            SelectClass(0);
                        }
                        currentlyViewedAssetType = AssetType.Class;
                        InitializeFilters(editorFilters.classFilters);
                        break;
                    case GeneralSubCategorySelectedType.LootTable:
                        if (allLootTables.Count > 0)
                        {
                            SelectLootTable(0);
                        }
                        currentlyViewedAssetType = AssetType.LootTable;
                        InitializeFilters(editorFilters.lootTablesFilters);
                        break;
                    case GeneralSubCategorySelectedType.MerchantTable:
                        if (allMerchantTables.Count > 0)
                        {
                            SelectMerchantTable(0);
                        }
                        currentlyViewedAssetType = AssetType.MerchantTable;
                        InitializeFilters(editorFilters.merchantTableFilters);
                        break;
                    case GeneralSubCategorySelectedType.Currency:
                        if (allCurrencies.Count > 0)
                        {
                            SelectCurrency(0);
                        }
                        currentlyViewedAssetType = AssetType.Currency;
                        InitializeFilters(editorFilters.currencyFilters);
                        break;
                    case GeneralSubCategorySelectedType.CraftingRecipe:
                        if (allCraftingRecipes.Count > 0)
                        {
                            SelectCraftingRecipe(0);
                        }
                        currentlyViewedAssetType = AssetType.CraftingRecipe;
                        InitializeFilters(editorFilters.recipeFilters);
                        break;
                    case GeneralSubCategorySelectedType.CraftingStation:
                        if (allCraftingStations.Count > 0)
                        {
                            SelectCraftingStation(0);
                        }
                        currentlyViewedAssetType = AssetType.CraftingStation;
                        InitializeFilters(editorFilters.craftingStationFilters);
                        break;
                    case GeneralSubCategorySelectedType.TalentTree:
                        if (allTalentTrees.Count > 0)
                        {
                            SelectTalentTree(0);
                        }
                        currentlyViewedAssetType = AssetType.TalentTree;
                        InitializeFilters(editorFilters.talentTreeFilters);
                        break;
                    case GeneralSubCategorySelectedType.Bonus:
                        if (allBonuses.Count > 0)
                        {
                            SelectBonus(0);
                        }
                        currentlyViewedAssetType = AssetType.Bonus;
                        InitializeFilters(editorFilters.bonusFilters);
                        break;
                    case GeneralSubCategorySelectedType.GearSet:
                        if (allGearSets.Count > 0)
                        {
                            SelectGearSet(0);
                        }
                        currentlyViewedAssetType = AssetType.GearSet;
                        InitializeFilters(editorFilters.gearsSetFilters);
                        break;
                    case GeneralSubCategorySelectedType.Enchantment:
                        if (allEnchantments.Count > 0)
                        {
                            SelectEnchantment(0);
                        }
                        currentlyViewedAssetType = AssetType.Enchantment;
                        InitializeFilters(editorFilters.enchantmentFilters);
                        break;
                }
        
                updateElementList = true;
                break;
            case "World":
            case "WORLD":
                worldSubCurrentCategorySelected = (WorldSubCategorySelectedType)subCategoryIndex;
                switch (worldSubCurrentCategorySelected)
                {
                    case WorldSubCategorySelectedType.Task:
                        if (allTasks.Count > 0)
                        {
                            SelectTask(0);
                        }
                        currentlyViewedAssetType = AssetType.Task;
                        InitializeFilters(editorFilters.taskFilters);
                        break;
                    case WorldSubCategorySelectedType.Quest:
                        if (allQuests.Count > 0)
                        {
                            SelectQuest(0);
                        }
                        currentlyViewedAssetType = AssetType.Quest;
                        InitializeFilters(editorFilters.questFilters);
                        break;
                    case WorldSubCategorySelectedType.WorldPosition:
                        if (allWorldPositions.Count > 0)
                        {
                            SelectWorldPosition(0);
                        }
                        currentlyViewedAssetType = AssetType.WorldPosition;
                        InitializeFilters(editorFilters.worldPositionFilters);
                        break;
                    case WorldSubCategorySelectedType.ResourceNode:
                        if (allResourceNodes.Count > 0)
                        {
                            SelectResourceNode(0);
                        }
                        currentlyViewedAssetType = AssetType.ResourceNode;
                        InitializeFilters(editorFilters.resourceNodeFilters);
                        break;
                    case WorldSubCategorySelectedType.GameScene:
                        if (allGameScenes.Count > 0)
                        {
                            SelectGameScene(0);
                        }
                        currentlyViewedAssetType = AssetType.GameScene;
                        InitializeFilters(editorFilters.gameSceneFilters);
                        break;
                    case WorldSubCategorySelectedType.Dialogue:
                        if (allDialogues.Count > 0)
                        {
                            SelectDialogue(0);
                        }
                        currentlyViewedAssetType = AssetType.Dialogue;
                        InitializeFilters(editorFilters.dialogueFilters);
                        break;
                    case WorldSubCategorySelectedType.GameModifier:
                        if (allGameModifiers.Count > 0)
                        {
                            SelectGameModifier(0);
                        }
                        currentlyViewedAssetType = AssetType.GameModifier;
                        InitializeFilters(editorFilters.gameModifierFilters);
                        break;
                }
                updateElementList = true;
                break;
            case "Settings":
            case "SETTINGS":
                settingsSubCurrentCategorySelected = (SettingsSubCategorySelectedType)subCategoryIndex;
                switch (settingsSubCurrentCategorySelected)
                {
                    case SettingsSubCategorySelectedType.Combat:
                        currentlyViewedAssetType = AssetType.CombatSettings;
                        break;
                    case SettingsSubCategorySelectedType.General:
                        currentlyViewedAssetType = AssetType.GeneralSettings;
                        break;
                    case SettingsSubCategorySelectedType.Item:
                        currentlyViewedAssetType = AssetType.ItemSettings;
                        break;
                    case SettingsSubCategorySelectedType.Editor:
                        currentlyViewedAssetType = AssetType.EditorSettings;
                        break;
                }
                break;
            case "Partners":
            case "PARTNERS":
                partnersSubCurrentCategorySelected = (PartnersSubCategorySelectedType)subCategoryIndex;
                break;
        }

        LoadData();
    }

    private void LoadData()
    {
        if (currentCategorySelected == CategorySelectedType.Combat)
            switch (combatSubCurrentCategorySelected)
            {
                case CombatSubCategorySelectedType.Ability:
                    LoadAbilities();
                    break;
                case CombatSubCategorySelectedType.Effect:
                    LoadEffects();
                    break;
                case CombatSubCategorySelectedType.NPCs:
                    LoadNPCs();
                    break;
                case CombatSubCategorySelectedType.Stat:
                    LoadStats();
                    break;
                case CombatSubCategorySelectedType.TreePoint:
                    LoadTreePoints();
                    break;
            }
        else if (currentCategorySelected == CategorySelectedType.General)
            switch (generalSubCurrentCategorySelected)
            {
                case GeneralSubCategorySelectedType.Bonus:
                    LoadBonuses();
                    break;
                case GeneralSubCategorySelectedType.Class:
                    LoadClasses();
                    break;
                case GeneralSubCategorySelectedType.CraftingRecipe:
                    LoadCraftingRecipes();
                    break;
                case GeneralSubCategorySelectedType.CraftingStation:
                    LoadCraftingStations();
                    break;
                case GeneralSubCategorySelectedType.Currency:
                    LoadCurrencies();
                    break;
                case GeneralSubCategorySelectedType.Item:
                    LoadItems();
                    break;
                case GeneralSubCategorySelectedType.LevelTemplate:
                    LoadLevelsTemplate();
                    break;
                case GeneralSubCategorySelectedType.LootTable:
                    LoadLootTables();
                    break;
                case GeneralSubCategorySelectedType.MerchantTable:
                    LoadMerchantTables();
                    break;
                case GeneralSubCategorySelectedType.Race:
                    LoadRaces();
                    break;
                case GeneralSubCategorySelectedType.Skill:
                    LoadSkills();
                    break;
                case GeneralSubCategorySelectedType.TalentTree:
                    LoadTalentTrees();
                    break;
            }
        else if (currentCategorySelected == CategorySelectedType.World)
            switch (worldSubCurrentCategorySelected)
            {
                case WorldSubCategorySelectedType.Task:
                    LoadTasks();
                    break;
                case WorldSubCategorySelectedType.Quest:
                    LoadQuests();
                    break;
                case WorldSubCategorySelectedType.WorldPosition:
                    LoadWorldPositions();
                    break;
                case WorldSubCategorySelectedType.ResourceNode:
                    LoadResourceNodes();
                    break;
                case WorldSubCategorySelectedType.Dialogue:
                    LoadDialogues();
                    break;
                case WorldSubCategorySelectedType.GameModifier:
                    LoadGameModifiers();
                    break;
            }
    }


    private void LoadMerchantTables()
    {
        allMerchantTables = Resources.LoadAll<RPGMerchantTable>(editorDATA.RPGBDatabasePath + "MerchantTables").ToList();
    }

    private void LoadAbilities()
    {
        allAbilities = Resources.LoadAll<RPGAbility>(editorDATA.RPGBDatabasePath + "Abilities").ToList();
    }

    private void LoadGameScenes()
    {
        allGameScenes = Resources.LoadAll<RPGGameScene>(editorDATA.RPGBDatabasePath + "GameScenes").ToList();
    }

    private void LoadDialogues()
    {
        allDialogues = Resources.LoadAll<RPGDialogue>(editorDATA.RPGBDatabasePath + "Dialogues").ToList();
    }

    private void LoadGameModifiers()
    {
        allGameModifiers = Resources.LoadAll<RPGGameModifier>(editorDATA.RPGBDatabasePath + "GameModifiers").ToList();
    }
    private void LoadGearSet()
    {
        allGearSets = Resources.LoadAll<RPGGearSet>(editorDATA.RPGBDatabasePath + "GearSets").ToList();
    }
    private void LoadEnchantments()
    {
        allEnchantments = Resources.LoadAll<RPGEnchantment>(editorDATA.RPGBDatabasePath + "Enchantments").ToList();
    }
    private void LoadSpellbooks()
    {
        allSpellbooks = Resources.LoadAll<RPGSpellbook>(editorDATA.RPGBDatabasePath + "Spellbooks").ToList();
    }
    private void LoadFactions()
    {
        allFactions = Resources.LoadAll<RPGFaction>(editorDATA.RPGBDatabasePath + "Factions").ToList();
    }
    private void LoadWeaponTemplates()
    {
        allWeaponTemplates = Resources.LoadAll<RPGWeaponTemplate>(editorDATA.RPGBDatabasePath + "WeaponTemplates").ToList();
    }
    private void LoadSpecies()
    {
        allSpecies = Resources.LoadAll<RPGSpecies>(editorDATA.RPGBDatabasePath + "Species").ToList();
    }
    private void LoadCombos()
    {
        allCombos = Resources.LoadAll<RPGCombo>(editorDATA.RPGBDatabasePath + "Combos").ToList();
    }
    
    private void LoadCraftingRecipes()
    {
        allCraftingRecipes = Resources.LoadAll<RPGCraftingRecipe>(editorDATA.RPGBDatabasePath + "CraftingRecipes").ToList();
    }

    private void LoadCraftingStations()
    {
        allCraftingStations = Resources.LoadAll<RPGCraftingStation>(editorDATA.RPGBDatabasePath + "CraftingStations").ToList();
    }

    private void LoadResourceNodes()
    {
        allResourceNodes = Resources.LoadAll<RPGResourceNode>(editorDATA.RPGBDatabasePath + "ResourceNodes").ToList();
    }

    private void LoadBonuses()
    {
        allBonuses = Resources.LoadAll<RPGBonus>(editorDATA.RPGBDatabasePath + "Bonuses").ToList();
    }

    private void LoadTasks()
    {
        allTasks = Resources.LoadAll<RPGTask>(editorDATA.RPGBDatabasePath + "Tasks").ToList();
    }

    private void LoadQuests()
    {
        allQuests = Resources.LoadAll<RPGQuest>(editorDATA.RPGBDatabasePath + "Quests").ToList();
    }

    private void LoadWorldPositions()
    {
        allWorldPositions = Resources.LoadAll<RPGWorldPosition>(editorDATA.RPGBDatabasePath + "WorldPositions").ToList();
    }

    private void LoadCurrencies()
    {
        allCurrencies = Resources.LoadAll<RPGCurrency>(editorDATA.RPGBDatabasePath + "Currencies").ToList();
    }

    private void LoadTreePoints()
    {
        allTreePoints = Resources.LoadAll<RPGTreePoint>(editorDATA.RPGBDatabasePath + "TreePoints").ToList();
    }

    private void LoadLootTables()
    {
        allLootTables = Resources.LoadAll<RPGLootTable>(editorDATA.RPGBDatabasePath + "LootTables").ToList();
    }

    private void LoadEffects()
    {
        allEffects = Resources.LoadAll<RPGEffect>(editorDATA.RPGBDatabasePath + "Effects").ToList();
    }

    private void LoadNPCs()
    {
        allNPCs = Resources.LoadAll<RPGNpc>(editorDATA.RPGBDatabasePath + "NPCs").ToList();
    }

    private void LoadStats()
    {
        allStats = Resources.LoadAll<RPGStat>(editorDATA.RPGBDatabasePath + "Stats").ToList();
    }

    private void LoadItems()
    {
        allItems = Resources.LoadAll<RPGItem>(editorDATA.RPGBDatabasePath + "Items").ToList();
    }

    private void LoadSkills()
    {
        allSkills = Resources.LoadAll<RPGSkill>(editorDATA.RPGBDatabasePath + "Skills").ToList();
    }

    private void LoadLevelsTemplate()
    {
        allLevelsTemplate = Resources.LoadAll<RPGLevelsTemplate>(editorDATA.RPGBDatabasePath + "LevelsTemplate").ToList();
    }

    private void LoadRaces()
    {
        allRaces = Resources.LoadAll<RPGRace>(editorDATA.RPGBDatabasePath + "Races").ToList();
    }

    private void LoadClasses()
    {
        allClasses = Resources.LoadAll<RPGClass>(editorDATA.RPGBDatabasePath + "Classes").ToList();
    }

    private void LoadTalentTrees()
    {
        allTalentTrees = Resources.LoadAll<RPGTalentTree>(editorDATA.RPGBDatabasePath + "TalentTrees").ToList();
    }
}

